{"version":3,"file":"stylist-main-84781932.32ffe035c746d5d23dde.js","mappings":"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","sources":["webpack://StylistWidget/./src/mock-data/products.ts","webpack://StylistWidget/./src/mock-data/user.ts","webpack://StylistWidget/./src/mock-data/quiz.ts","webpack://StylistWidget/./src/mock-data/socialProof.ts","webpack://StylistWidget/./src/mock-data/index.ts","webpack://StylistWidget/./src/integration/integrateTryOn.ts"],"sourcesContent":["// Mock data for product-related endpoints\nimport { mockData } from '../utils/mockData';\n// Use the existing comprehensive mock data\nconst { products, outfits, categories, brands, colors } = mockData;\n/**\n * Filter products based on request parameters\n * @param allProducts - All available products\n * @param options - Filter options\n * @returns Filtered products\n */\nconst filterProducts = (allProducts, options) => {\n    let filtered = [...allProducts];\n    // Apply category filter\n    if (options.category) {\n        filtered = filtered.filter(p => p.category.toLowerCase() === options.category.toLowerCase());\n    }\n    // Apply brand filter\n    if (options.brands && Array.isArray(options.brands) && options.brands.length > 0) {\n        filtered = filtered.filter(p => options.brands.some((b) => p.brand.toLowerCase().includes(b.toLowerCase())));\n    }\n    // Apply color filter\n    if (options.colors && Array.isArray(options.colors) && options.colors.length > 0) {\n        filtered = filtered.filter(p => p.colors.some(c => options.colors.some((oc) => c.toLowerCase().includes(oc.toLowerCase()))));\n    }\n    // Apply price range filter\n    if (options.priceRange) {\n        const { min, max } = options.priceRange;\n        if (typeof min === 'number') {\n            filtered = filtered.filter(p => p.price >= min);\n        }\n        if (typeof max === 'number') {\n            filtered = filtered.filter(p => p.price <= max);\n        }\n    }\n    // Apply retailer filter\n    if (options.filterByRetailers && Array.isArray(options.filterByRetailers) && options.filterByRetailers.length > 0) {\n        filtered = filtered.filter(p => options.filterByRetailers.includes(p.retailerId));\n    }\n    // Apply in-stock filter\n    if (options.inStock === true) {\n        filtered = filtered.filter(p => p.inStock === true);\n    }\n    // Adjust match scores based on context\n    if (options.context) {\n        const contextFactors = {\n            'personal': 0.1,\n            'trending': 0.15,\n            'seasonal': 0.05,\n            'complete_look': 0.2,\n            'occasion': 0.1\n        };\n        const factor = contextFactors[options.context] || 0;\n        // Adjust match scores\n        filtered = filtered.map(p => (Object.assign(Object.assign({}, p), { matchScore: Math.min(1, p.matchScore + factor) })));\n    }\n    // Sort results by match score (descending)\n    filtered.sort((a, b) => b.matchScore - a.matchScore);\n    return filtered;\n};\n/**\n * Filter outfits based on request parameters\n * @param allOutfits - All available outfits\n * @param options - Filter options\n * @returns Filtered outfits\n */\nconst filterOutfits = (allOutfits, options) => {\n    let filtered = [...allOutfits];\n    // Apply occasion filter\n    if (options.occasion) {\n        filtered = filtered.filter(o => o.occasion.toLowerCase() === options.occasion.toLowerCase());\n    }\n    // Sort by match score (descending)\n    filtered.sort((a, b) => b.matchScore - a.matchScore);\n    return filtered;\n};\n/**\n * Get recommendations based on request criteria\n */\nconst getRecommendations = (options = {}) => {\n    // Destructure options or use defaults\n    const { userId = 'demo_user', limit = 20, includeOutfits = true } = options;\n    // Filter products based on criteria\n    const filteredProducts = filterProducts(products, options);\n    // Apply limit - make sure we get the right number of items\n    const limitedProducts = filteredProducts.slice(0, limit);\n    // Get outfits if requested\n    let responseOutfits = [];\n    if (includeOutfits) {\n        const filteredOutfits = filterOutfits(outfits, options);\n        responseOutfits = filteredOutfits.slice(0, Math.min(5, outfits.length));\n    }\n    // Build response\n    return {\n        userId,\n        timestamp: new Date(),\n        items: limitedProducts,\n        outfits: responseOutfits\n    };\n};\n/**\n * Get products with optional filtering\n */\nconst getProducts = (options = {}) => {\n    // Filter products\n    const filteredProducts = filterProducts(products, options);\n    // Apply pagination\n    const page = Number(options.page) || 1;\n    const pageSize = Number(options.limit) || 20;\n    const start = (page - 1) * pageSize;\n    const end = start + pageSize;\n    // Slice results for current page\n    const paginatedProducts = filteredProducts.slice(start, end);\n    return {\n        products: paginatedProducts,\n        total: filteredProducts.length\n    };\n};\n/**\n * Search products by query string\n */\nconst searchProducts = (options = {}) => {\n    const { query = '', limit = 20 } = options;\n    // If no query, return empty results\n    if (!query) {\n        return { results: [], total: 0 };\n    }\n    // Search by name, brand, category\n    const normalizedQuery = query.trim().toLowerCase();\n    const results = products.filter(product => product.name.toLowerCase().includes(normalizedQuery) ||\n        product.brand.toLowerCase().includes(normalizedQuery) ||\n        product.category.toLowerCase().includes(normalizedQuery) ||\n        (product.colors && product.colors.some(color => color.toLowerCase().includes(normalizedQuery))));\n    // Sort by relevance (exact matches first)\n    results.sort((a, b) => {\n        const aNameMatch = a.name.toLowerCase() === normalizedQuery ? 3 :\n            a.name.toLowerCase().startsWith(normalizedQuery) ? 2 :\n                a.name.toLowerCase().includes(normalizedQuery) ? 1 : 0;\n        const bNameMatch = b.name.toLowerCase() === normalizedQuery ? 3 :\n            b.name.toLowerCase().startsWith(normalizedQuery) ? 2 :\n                b.name.toLowerCase().includes(normalizedQuery) ? 1 : 0;\n        return bNameMatch - aNameMatch;\n    });\n    // Apply limit\n    const limitedResults = results.slice(0, limit);\n    return {\n        results: limitedResults,\n        total: results.length\n    };\n};\n/**\n * Get similar items to a reference item\n */\nconst getSimilarItems = (options = {}) => {\n    const { itemId, limit = 10 } = options;\n    // Find the reference item\n    const referenceItem = products.find(p => p.id === itemId);\n    if (!referenceItem) {\n        return [];\n    }\n    // Find items with similar attributes\n    const similarItems = products\n        .filter(p => p.id !== itemId) // Exclude reference item\n        .map(product => {\n        // Calculate similarity score based on various factors\n        let similarityScore = 0;\n        // Same category (high weight)\n        if (product.category === referenceItem.category) {\n            similarityScore += 0.4;\n        }\n        // Same brand (medium weight)\n        if (product.brand === referenceItem.brand) {\n            similarityScore += 0.2;\n        }\n        // Similar price range (medium weight)\n        const priceRatio = Math.min(product.price, referenceItem.price) /\n            Math.max(product.price, referenceItem.price);\n        similarityScore += priceRatio * 0.2;\n        // Color overlap (low weight)\n        const colorOverlap = product.colors.filter(c => referenceItem.colors.includes(c)).length;\n        if (colorOverlap > 0) {\n            similarityScore += (colorOverlap / product.colors.length) * 0.1;\n        }\n        // Pattern overlap (low weight)\n        if (product.patterns && referenceItem.patterns) {\n            const patternOverlap = product.patterns.filter(p => { var _a; return (_a = referenceItem.patterns) === null || _a === void 0 ? void 0 : _a.includes(p); }).length;\n            if (patternOverlap > 0) {\n                similarityScore += (patternOverlap / product.patterns.length) * 0.1;\n            }\n        }\n        return Object.assign(Object.assign({}, product), { matchScore: similarityScore });\n    })\n        .filter(product => product.matchScore > 0.3) // Threshold for similarity\n        .sort((a, b) => b.matchScore - a.matchScore); // Sort by similarity\n    return similarItems.slice(0, limit);\n};\n/**\n * Complete an outfit based on selected items\n */\nconst completeOutfit = (options = {}) => {\n    const { itemIds = [], userId = 'demo_user', occasion } = options;\n    if (!itemIds.length) {\n        return [];\n    }\n    // Find selected items\n    const selectedItems = products.filter(p => itemIds.includes(p.id));\n    if (!selectedItems.length) {\n        return [];\n    }\n    // Identify what categories are missing from a complete outfit\n    const selectedCategories = selectedItems.map(item => item.category);\n    // Define essential outfit categories\n    const essentialCategories = ['Tops', 'Bottoms', 'Footwear'];\n    const complementaryCategories = ['Outerwear', 'Accessories', 'Bags', 'Jewelry'];\n    // Find missing essential categories\n    const missingEssentials = essentialCategories.filter(category => !selectedCategories.includes(category));\n    // Find missing complementary categories\n    const missingComplementary = complementaryCategories.filter(category => !selectedCategories.includes(category));\n    // Generate outfit suggestions (up to 3)\n    const outfitSuggestions = [];\n    for (let i = 0; i < 3; i++) {\n        // Start with selected items\n        const outfitItems = [...selectedItems];\n        const outfitCategories = [...selectedCategories];\n        // Add missing essential items first\n        for (const category of missingEssentials) {\n            // Find matching items from this category\n            const candidates = products\n                .filter(p => p.category === category && !itemIds.includes(p.id))\n                .sort(() => 0.5 - Math.random()); // Randomize\n            if (candidates.length) {\n                // Add the first candidate\n                outfitItems.push(candidates[0]);\n                outfitCategories.push(category);\n            }\n        }\n        // Add some complementary items (up to 2)\n        const complementsToAdd = missingComplementary\n            .sort(() => 0.5 - Math.random()) // Randomize\n            .slice(0, 2);\n        for (const category of complementsToAdd) {\n            // Find matching items from this category\n            const candidates = products\n                .filter(p => p.category === category && !itemIds.includes(p.id))\n                .sort(() => 0.5 - Math.random()); // Randomize\n            if (candidates.length) {\n                // Add the first candidate\n                outfitItems.push(candidates[0]);\n                outfitCategories.push(category);\n            }\n        }\n        // Generate outfit name\n        const outfitOccasion = occasion || 'everyday';\n        const outfitName = `${outfitOccasion.charAt(0).toUpperCase() + outfitOccasion.slice(1)} Outfit ${i + 1}`;\n        // Calculate match score\n        const avgMatchScore = outfitItems.reduce((sum, item) => sum + item.matchScore, 0) / outfitItems.length;\n        // Generate match reasons\n        const matchReasons = [\n            `Completes your look with coordinated items`,\n            `Balanced outfit for ${outfitOccasion} occasions`,\n            `Colors and styles complement each other`\n        ];\n        outfitSuggestions.push({\n            id: `outfit_${Date.now()}_${i}`,\n            name: outfitName,\n            occasion: outfitOccasion,\n            items: outfitItems,\n            matchScore: avgMatchScore,\n            matchReasons\n        });\n    }\n    return outfitSuggestions;\n};\nexport default {\n    getRecommendations,\n    getProducts,\n    searchProducts,\n    getSimilarItems,\n    completeOutfit\n};\n","// Mock data for user-related endpoints\nimport { mockData } from '../utils/mockData';\n// Use the existing mock user profile\nconst { userProfile: defaultUserProfile } = mockData;\n// Store user data for current session\nconst userStore = {\n    profiles: {\n        'demo_user': defaultUserProfile,\n        'test_user': Object.assign(Object.assign({}, defaultUserProfile), { userId: 'test_user', preferences: Object.assign(Object.assign({}, defaultUserProfile.preferences), { styles: ['preppy', 'formal', 'classic'], brands: ['ClassicCouture', 'PremiumBlends', 'ItalianCraft'] }) })\n    },\n    savedOutfits: {\n        'demo_user': [],\n        'test_user': []\n    },\n    itemFeedback: {\n        'demo_user': [],\n        'test_user': []\n    },\n    outfitFeedback: {\n        'demo_user': [],\n        'test_user': []\n    }\n};\n// Generate default profiles for new users\nconst generateDefaultProfile = (userId) => {\n    return {\n        userId,\n        username: `user_${Math.random().toString(36).substring(2, 8)}`,\n        preferences: {\n            stylePreferences: [\n                {\n                    style: 'casual',\n                    weight: 0.8\n                },\n                {\n                    style: 'minimalist',\n                    weight: 0.7\n                },\n                {\n                    style: 'contemporary',\n                    weight: 0.9\n                }\n            ],\n            colorPreferences: [\n                {\n                    color: 'black',\n                    weight: 0.9\n                },\n                {\n                    color: 'navy',\n                    weight: 0.8\n                },\n                {\n                    color: 'white',\n                    weight: 0.7\n                },\n                {\n                    color: 'gray',\n                    weight: 0.6\n                },\n                {\n                    color: 'blue',\n                    weight: 0.8\n                }\n            ],\n            sizePreferences: [\n                {\n                    category: 'top',\n                    size: 'M'\n                },\n                {\n                    category: 'bottom',\n                    size: '32'\n                },\n                {\n                    category: 'dress',\n                    size: '10'\n                },\n                {\n                    category: 'shoe',\n                    size: '9'\n                }\n            ],\n            // Keep these for backward compatibility\n            sizes: {\n                top: ['M'],\n                bottom: ['32'],\n                dress: ['10'],\n                shoe: ['9']\n            },\n            colors: ['black', 'navy', 'white', 'gray', 'blue'],\n            styles: ['casual', 'minimalist', 'contemporary'],\n            brands: ['UrbanFlair', 'ModernEssentials', 'ClassicCouture'],\n            occasions: ['casual', 'work'],\n            priceRanges: ['BUDGET', 'MIDRANGE']\n        },\n        history: {\n            viewedItems: [],\n            likedItems: [],\n            dislikedItems: [],\n            purchasedItems: []\n        },\n        createdAt: new Date(),\n        lastActive: new Date()\n    };\n};\n/**\n * Get user profile\n */\nconst getProfile = (options = {}) => {\n    const { params = {}, userId = 'demo_user' } = options;\n    // Get user ID from params or options\n    const id = params.userId || userId;\n    // Return existing profile or create new one\n    if (userStore.profiles[id]) {\n        return userStore.profiles[id];\n    }\n    // Create new profile for this user\n    const newProfile = generateDefaultProfile(id);\n    userStore.profiles[id] = newProfile;\n    return newProfile;\n};\n/**\n * Update user profile\n */\nconst updateProfile = (options = {}) => {\n    const { params = {}, userId = 'demo_user', body = {} } = options;\n    // Get user ID from params or options\n    const id = params.userId || userId;\n    // Get existing profile or create new one\n    let profile = userStore.profiles[id] || generateDefaultProfile(id);\n    // Update profile with new data\n    profile = Object.assign(Object.assign(Object.assign({}, profile), body), { \n        // Merge preferences rather than replace\n        preferences: Object.assign(Object.assign({}, profile.preferences), (body.preferences || {})), lastActive: new Date() });\n    // Save updated profile\n    userStore.profiles[id] = profile;\n    return profile;\n};\n/**\n * Get saved outfits\n */\nconst getSavedOutfits = (options = {}) => {\n    const { params = {}, userId = 'demo_user' } = options;\n    // Get user ID from params or options\n    const id = params.userId || userId;\n    // Return saved outfits or empty array\n    return userStore.savedOutfits[id] || [];\n};\n/**\n * Save outfit\n */\nconst saveOutfit = (options = {}) => {\n    const { params = {}, userId = 'demo_user', body = {} } = options;\n    // Get user ID from params or options\n    const id = params.userId || userId;\n    // Create outfit object\n    const outfit = {\n        id: body.outfitId || `outfit_${Date.now()}`,\n        userId: id,\n        outfitId: body.outfitId || `outfit_${Date.now()}`,\n        name: body.name || 'My Outfit',\n        items: body.items || [],\n        notes: body.notes || '',\n        savedAt: new Date(),\n        createdAt: new Date(),\n    };\n    // Initialize user's outfits array if needed\n    if (!userStore.savedOutfits[id]) {\n        userStore.savedOutfits[id] = [];\n    }\n    // Add outfit to user's saved outfits\n    userStore.savedOutfits[id].push(outfit);\n    return outfit;\n};\n/**\n * Delete saved outfit\n */\nconst deleteSavedOutfit = (options = {}) => {\n    const { params = {}, userId = 'demo_user' } = options;\n    // Get user ID and outfit ID from params\n    const id = params.userId || userId;\n    const outfitId = params.outfitId;\n    if (!outfitId || !userStore.savedOutfits[id]) {\n        return { success: false };\n    }\n    // Find outfit index\n    const index = userStore.savedOutfits[id].findIndex(o => o.id === outfitId);\n    if (index === -1) {\n        return { success: false };\n    }\n    // Remove outfit\n    userStore.savedOutfits[id].splice(index, 1);\n    return { success: true };\n};\n/**\n * Add item feedback\n */\nconst addItemFeedback = (options = {}) => {\n    const { params = {}, userId = 'demo_user', body = {} } = options;\n    // Get user ID and item ID from params\n    const id = params.userId || userId;\n    const itemId = params.itemId;\n    if (!itemId) {\n        return { success: false };\n    }\n    // Create feedback object\n    const feedback = {\n        userId: id,\n        itemId,\n        liked: body.liked === true,\n        context: body.context || 'general',\n        timestamp: new Date()\n    };\n    // Initialize user's feedback array if needed\n    if (!userStore.itemFeedback[id]) {\n        userStore.itemFeedback[id] = [];\n    }\n    // Add feedback to user's feedback history\n    userStore.itemFeedback[id].push(feedback);\n    // Also update profile history\n    if (!userStore.profiles[id]) {\n        userStore.profiles[id] = generateDefaultProfile(id);\n    }\n    if (feedback.liked) {\n        userStore.profiles[id].history.likedItems.push(itemId);\n    }\n    else {\n        userStore.profiles[id].history.dislikedItems.push(itemId);\n    }\n    return { success: true };\n};\n/**\n * Add outfit feedback\n */\nconst addOutfitFeedback = (options = {}) => {\n    const { params = {}, userId = 'demo_user', body = {} } = options;\n    // Get user ID and outfit ID from params\n    const id = params.userId || userId;\n    const outfitId = params.outfitId;\n    if (!outfitId) {\n        return { success: false };\n    }\n    // Create feedback object\n    const feedback = {\n        userId: id,\n        outfitId,\n        liked: body.liked === true,\n        context: body.context || 'general',\n        timestamp: new Date()\n    };\n    // Initialize user's feedback array if needed\n    if (!userStore.outfitFeedback[id]) {\n        userStore.outfitFeedback[id] = [];\n    }\n    // Add feedback to user's feedback history\n    userStore.outfitFeedback[id].push(feedback);\n    return { success: true };\n};\n/**\n * Log item view\n */\nconst logItemView = (options = {}) => {\n    const { params = {}, userId = 'demo_user' } = options;\n    // Get user ID and item ID from params\n    const id = params.userId || userId;\n    const itemId = params.itemId;\n    if (!itemId) {\n        return { success: false };\n    }\n    // Initialize profile if needed\n    if (!userStore.profiles[id]) {\n        userStore.profiles[id] = generateDefaultProfile(id);\n    }\n    // Add item to viewed items\n    userStore.profiles[id].history.viewedItems.push(itemId);\n    return { success: true };\n};\nexport default {\n    getProfile,\n    updateProfile,\n    getSavedOutfits,\n    saveOutfit,\n    deleteSavedOutfit,\n    addItemFeedback,\n    addOutfitFeedback,\n    logItemView\n};\n","// Quiz data\nconst quizData = [\n    {\n        id: 'style_preferences',\n        title: 'Style Preferences',\n        description: 'Let\\'s learn about your personal style preferences.',\n        questions: [\n            {\n                id: 'preferred_styles',\n                type: 'multiple_choice',\n                question: 'Which styles do you prefer?',\n                required: true,\n                options: [\n                    { id: 'casual', text: 'Casual' },\n                    { id: 'business', text: 'Business' },\n                    { id: 'formal', text: 'Formal' },\n                    { id: 'bohemian', text: 'Bohemian' },\n                    { id: 'sporty', text: 'Sporty' },\n                    { id: 'vintage', text: 'Vintage' },\n                    { id: 'minimalist', text: 'Minimalist' },\n                    { id: 'preppy', text: 'Preppy' },\n                    { id: 'street', text: 'Street Style' },\n                    { id: 'romantic', text: 'Romantic' }\n                ]\n            },\n            {\n                id: 'color_preferences',\n                type: 'multiple_choice',\n                question: 'Which colors do you typically wear?',\n                required: true,\n                options: [\n                    { id: 'black', text: 'Black' },\n                    { id: 'white', text: 'White' },\n                    { id: 'navy', text: 'Navy' },\n                    { id: 'gray', text: 'Gray' },\n                    { id: 'beige', text: 'Beige' },\n                    { id: 'brown', text: 'Brown' },\n                    { id: 'red', text: 'Red' },\n                    { id: 'pink', text: 'Pink' },\n                    { id: 'blue', text: 'Blue' },\n                    { id: 'green', text: 'Green' },\n                    { id: 'yellow', text: 'Yellow' },\n                    { id: 'orange', text: 'Orange' },\n                    { id: 'purple', text: 'Purple' }\n                ]\n            },\n            {\n                id: 'pattern_preferences',\n                type: 'multiple_choice',\n                question: 'Which patterns do you like?',\n                required: false,\n                options: [\n                    { id: 'solid', text: 'Solid colors (no pattern)' },\n                    { id: 'stripes', text: 'Stripes' },\n                    { id: 'plaid', text: 'Plaid' },\n                    { id: 'floral', text: 'Floral' },\n                    { id: 'geometric', text: 'Geometric' },\n                    { id: 'animal', text: 'Animal print' },\n                    { id: 'polka_dots', text: 'Polka dots' },\n                    { id: 'abstract', text: 'Abstract' }\n                ]\n            }\n        ]\n    },\n    {\n        id: 'body_type',\n        title: 'Body Type & Fit',\n        description: 'Help us understand your body type and fit preferences.',\n        questions: [\n            {\n                id: 'top_size',\n                type: 'single_choice',\n                question: 'What size do you typically wear for tops?',\n                required: true,\n                options: [\n                    { id: 'xs', text: 'XS' },\n                    { id: 's', text: 'S' },\n                    { id: 'm', text: 'M' },\n                    { id: 'l', text: 'L' },\n                    { id: 'xl', text: 'XL' },\n                    { id: 'xxl', text: 'XXL' }\n                ]\n            },\n            {\n                id: 'bottom_size',\n                type: 'single_choice',\n                question: 'What size do you typically wear for bottoms?',\n                required: true,\n                options: [\n                    { id: '00', text: '00' },\n                    { id: '0', text: '0' },\n                    { id: '2', text: '2' },\n                    { id: '4', text: '4' },\n                    { id: '6', text: '6' },\n                    { id: '8', text: '8' },\n                    { id: '10', text: '10' },\n                    { id: '12', text: '12' },\n                    { id: '14', text: '14' },\n                    { id: '16', text: '16' },\n                    { id: '18', text: '18' }\n                ]\n            },\n            {\n                id: 'shoe_size',\n                type: 'single_choice',\n                question: 'What is your shoe size?',\n                required: true,\n                options: [\n                    { id: '5', text: '5' },\n                    { id: '5.5', text: '5.5' },\n                    { id: '6', text: '6' },\n                    { id: '6.5', text: '6.5' },\n                    { id: '7', text: '7' },\n                    { id: '7.5', text: '7.5' },\n                    { id: '8', text: '8' },\n                    { id: '8.5', text: '8.5' },\n                    { id: '9', text: '9' },\n                    { id: '9.5', text: '9.5' },\n                    { id: '10', text: '10' },\n                    { id: '10.5', text: '10.5' },\n                    { id: '11', text: '11' }\n                ]\n            },\n            {\n                id: 'fit_preference',\n                type: 'single_choice',\n                question: 'How do you prefer your clothes to fit?',\n                required: true,\n                options: [\n                    { id: 'tight', text: 'Tight/fitted' },\n                    { id: 'semi_fitted', text: 'Semi-fitted' },\n                    { id: 'relaxed', text: 'Relaxed' },\n                    { id: 'loose', text: 'Loose/oversized' }\n                ]\n            }\n        ]\n    },\n    {\n        id: 'brand_preferences',\n        title: 'Brand & Price Preferences',\n        description: 'Tell us about your favorite brands and budget.',\n        questions: [\n            {\n                id: 'favorite_brands',\n                type: 'multiple_choice',\n                question: 'Which brands do you typically shop from?',\n                required: false,\n                options: [\n                    { id: 'luxe_style', text: 'LuxeStyle' },\n                    { id: 'urban_flair', text: 'UrbanFlair' },\n                    { id: 'eco_chic', text: 'EcoChic' },\n                    { id: 'modern_essentials', text: 'ModernEssentials' },\n                    { id: 'coastal_breeze', text: 'CoastalBreeze' },\n                    { id: 'nordic_minimal', text: 'NordicMinimal' },\n                    { id: 'vintage_revival', text: 'VintageRevival' },\n                    { id: 'metro_edge', text: 'MetroEdge' },\n                    { id: 'classic_couture', text: 'ClassicCouture' },\n                    { id: 'athletic_prime', text: 'AthleticPrime' }\n                ]\n            },\n            {\n                id: 'price_range',\n                type: 'single_choice',\n                question: 'What is your typical budget for clothing items?',\n                required: true,\n                options: [\n                    { id: 'budget', text: 'Budget ($0-$50)' },\n                    { id: 'mid_range', text: 'Mid-range ($50-$150)' },\n                    { id: 'premium', text: 'Premium ($150-$300)' },\n                    { id: 'luxury', text: 'Luxury ($300+)' }\n                ]\n            },\n            {\n                id: 'sustainability',\n                type: 'slider',\n                question: 'How important is sustainability in your clothing choices?',\n                required: false,\n                minValue: 1,\n                maxValue: 10,\n                defaultValue: 5\n            }\n        ]\n    },\n    {\n        id: 'style_inspirations',\n        title: 'Style Inspirations',\n        description: 'Select celebrities or influencers whose style you admire.',\n        questions: [\n            {\n                id: 'celebrity_style',\n                type: 'image_choice',\n                question: 'Which celebrity styles do you admire?',\n                required: false,\n                options: [\n                    {\n                        id: 'emma_watson',\n                        text: 'Emma Watson',\n                        imageUrl: 'https://via.placeholder.com/200?text=Emma+Watson'\n                    },\n                    {\n                        id: 'zendaya',\n                        text: 'Zendaya',\n                        imageUrl: 'https://via.placeholder.com/200?text=Zendaya'\n                    },\n                    {\n                        id: 'timothee_chalamet',\n                        text: 'Timothée Chalamet',\n                        imageUrl: 'https://via.placeholder.com/200?text=Timothee+Chalamet'\n                    },\n                    {\n                        id: 'harry_styles',\n                        text: 'Harry Styles',\n                        imageUrl: 'https://via.placeholder.com/200?text=Harry+Styles'\n                    },\n                    {\n                        id: 'rihanna',\n                        text: 'Rihanna',\n                        imageUrl: 'https://via.placeholder.com/200?text=Rihanna'\n                    },\n                    {\n                        id: 'beyonce',\n                        text: 'Beyoncé',\n                        imageUrl: 'https://via.placeholder.com/200?text=Beyonce'\n                    },\n                    {\n                        id: 'taylor_swift',\n                        text: 'Taylor Swift',\n                        imageUrl: 'https://via.placeholder.com/200?text=Taylor+Swift'\n                    },\n                    {\n                        id: 'bts',\n                        text: 'BTS',\n                        imageUrl: 'https://via.placeholder.com/200?text=BTS'\n                    }\n                ]\n            },\n            {\n                id: 'style_icons',\n                type: 'multiple_choice',\n                question: 'Which fashion eras or icons influence your style?',\n                required: false,\n                options: [\n                    { id: '90s', text: '90s Fashion' },\n                    { id: 'y2k', text: 'Y2K (Early 2000s)' },\n                    { id: '70s', text: '70s Bohemian' },\n                    { id: '80s', text: '80s Bold' },\n                    { id: '50s', text: '50s Classic' },\n                    { id: 'parisian', text: 'Parisian Chic' },\n                    { id: 'scandi', text: 'Scandinavian Minimal' },\n                    { id: 'streetwear', text: 'Modern Streetwear' }\n                ]\n            }\n        ]\n    },\n    {\n        id: 'occasion_preferences',\n        title: 'Occasions & Activities',\n        description: 'Tell us about your lifestyle and clothing needs.',\n        questions: [\n            {\n                id: 'common_occasions',\n                type: 'multiple_choice',\n                question: 'What occasions do you regularly dress for?',\n                required: true,\n                options: [\n                    { id: 'casual', text: 'Casual everyday' },\n                    { id: 'work', text: 'Work/office' },\n                    { id: 'formal', text: 'Formal events' },\n                    { id: 'evening', text: 'Evening out' },\n                    { id: 'athletic', text: 'Athletic/workout' },\n                    { id: 'outdoors', text: 'Outdoor activities' },\n                    { id: 'beach', text: 'Beach/pool' },\n                    { id: 'travel', text: 'Travel' }\n                ]\n            },\n            {\n                id: 'activity_level',\n                type: 'slider',\n                question: 'How active is your lifestyle?',\n                required: false,\n                minValue: 1,\n                maxValue: 10,\n                defaultValue: 5\n            },\n            {\n                id: 'weather_conditions',\n                type: 'multiple_choice',\n                question: 'What weather conditions do you typically dress for?',\n                required: true,\n                options: [\n                    { id: 'hot', text: 'Hot/summer' },\n                    { id: 'mild', text: 'Mild/spring-fall' },\n                    { id: 'cold', text: 'Cold/winter' },\n                    { id: 'rainy', text: 'Rainy/wet' },\n                    { id: 'variable', text: 'Variable/all seasons' }\n                ]\n            }\n        ]\n    }\n];\n/**\n * Get quiz questions\n */\nconst getQuestions = (options = {}) => {\n    return { sections: quizData };\n};\n/**\n * Process quiz results\n */\nconst getResults = (options = {}) => {\n    const { body = {} } = options;\n    // In a real implementation, this would analyze the answers\n    // For mock purposes, generate a style profile based on current time\n    // to give some variation in responses\n    // Get a \"random\" selection based on time\n    const timeBasedIndex = new Date().getSeconds() % 5;\n    const styleProfiles = [\n        {\n            primaryStyle: 'Minimalist',\n            secondaryStyle: 'Contemporary',\n            colorPalette: ['black', 'white', 'gray', 'navy'],\n            occasions: ['work', 'casual', 'evening'],\n            recommendations: {\n                tops: ['Classic white button-down', 'Relaxed black t-shirt', 'Sleek turtleneck'],\n                bottoms: ['Straight-leg jeans', 'Tailored trousers', 'A-line midi skirt'],\n                dresses: ['Simple shift dress', 'Sleeveless maxi dress'],\n                outerwear: ['Structured blazer', 'Classic trench coat'],\n                accessories: ['Leather tote bag', 'Minimalist watch', 'Simple gold hoops']\n            }\n        },\n        {\n            primaryStyle: 'Bohemian',\n            secondaryStyle: 'Vintage',\n            colorPalette: ['terracotta', 'mustard', 'olive', 'cream'],\n            occasions: ['casual', 'beach', 'travel'],\n            recommendations: {\n                tops: ['Embroidered blouse', 'Flowy camisole', 'Off-shoulder top'],\n                bottoms: ['Wide-leg pants', 'Maxi skirt', 'Distressed denim'],\n                dresses: ['Floral maxi dress', 'Embroidered midi dress'],\n                outerwear: ['Fringed kimono', 'Denim jacket'],\n                accessories: ['Woven tote', 'Statement earrings', 'Layered necklaces']\n            }\n        },\n        {\n            primaryStyle: 'Classic',\n            secondaryStyle: 'Preppy',\n            colorPalette: ['navy', 'cream', 'burgundy', 'green'],\n            occasions: ['work', 'formal', 'evening'],\n            recommendations: {\n                tops: ['Striped button-down', 'Cashmere sweater', 'Silk blouse'],\n                bottoms: ['Tailored chinos', 'Pencil skirt', 'Dark wash jeans'],\n                dresses: ['Wrap dress', 'Sheath dress'],\n                outerwear: ['Navy blazer', 'Wool peacoat'],\n                accessories: ['Leather satchel', 'Pearl earrings', 'Silk scarf']\n            }\n        },\n        {\n            primaryStyle: 'Streetwear',\n            secondaryStyle: 'Sporty',\n            colorPalette: ['black', 'white', 'red', 'gray'],\n            occasions: ['casual', 'athletic', 'evening'],\n            recommendations: {\n                tops: ['Graphic tee', 'Hoodie', 'Crop top'],\n                bottoms: ['Track pants', 'High-waisted jeans', 'Joggers'],\n                dresses: ['T-shirt dress', 'Sporty mini dress'],\n                outerwear: ['Bomber jacket', 'Puffer coat'],\n                accessories: ['Backpack', 'Chunky sneakers', 'Baseball cap']\n            }\n        },\n        {\n            primaryStyle: 'Romantic',\n            secondaryStyle: 'Feminine',\n            colorPalette: ['blush', 'lavender', 'sky blue', 'cream'],\n            occasions: ['formal', 'evening', 'work'],\n            recommendations: {\n                tops: ['Ruffled blouse', 'Lace camisole', 'Puff sleeve top'],\n                bottoms: ['Pleated skirt', 'Wide-leg trousers', 'Cigarette pants'],\n                dresses: ['Floral midi dress', 'Fit and flare dress'],\n                outerwear: ['Cropped cardigan', 'Pastel coat'],\n                accessories: ['Structured handbag', 'Delicate jewelry', 'Silk scarf']\n            }\n        }\n    ];\n    return { styleProfile: styleProfiles[timeBasedIndex] };\n};\nexport default {\n    getQuestions,\n    getResults\n};\n","// Mock data for social proof-related endpoints\nimport { mockData } from '../utils/mockData';\n// Use the existing mock data\nconst { socialProofItems, products } = mockData;\n/**\n * Get celebrity social proof items\n */\nconst getCelebrities = (options = {}) => {\n    const { limit = 20, offset = 0 } = options;\n    // Apply pagination\n    const paginatedItems = socialProofItems.slice(offset, offset + limit);\n    // Sort by most recent first\n    paginatedItems.sort((a, b) => new Date(b.timestamp).getTime() - new Date(a.timestamp).getTime());\n    return {\n        items: paginatedItems,\n        total: socialProofItems.length\n    };\n};\n/**\n * Get celebrity outfits\n */\nconst getOutfits = (options = {}) => {\n    const { celebrity = '', limit = 20, offset = 0 } = options;\n    // Filter by celebrity if specified\n    let filteredItems = [...socialProofItems];\n    if (celebrity) {\n        filteredItems = filteredItems.filter(item => item.celebrity.toLowerCase().includes(celebrity.toLowerCase()));\n    }\n    // Apply pagination\n    const paginatedItems = filteredItems.slice(offset, offset + limit);\n    return {\n        items: paginatedItems,\n        total: filteredItems.length\n    };\n};\n/**\n * Get similar products from social proof\n */\nconst getMatches = (options = {}) => {\n    const { itemId, imageUrl, colors = [], patterns = [], category = '', limit = 10 } = options;\n    // In a real implementation, this would use image analysis\n    // For mock data, we'll just return a selection of matches\n    // If itemId is provided, find the specific product\n    let itemMatches = [];\n    if (itemId) {\n        // Find the product\n        const product = products.find(p => p.id === itemId);\n        if (product) {\n            // Find social proof items that have matching products\n            for (const socialItem of socialProofItems) {\n                const matchedProduct = socialItem.matchedProducts.find(mp => mp.id === product.id ||\n                    mp.name.toLowerCase().includes(product.name.toLowerCase()));\n                if (matchedProduct) {\n                    itemMatches.push({\n                        id: matchedProduct.id,\n                        celebrityName: socialItem.celebrity || 'Celebrity',\n                        event: socialItem.event || 'Event',\n                        imageUrl: matchedProduct.imageUrl,\n                        matchedProducts: [{\n                                id: matchedProduct.id,\n                                name: matchedProduct.name,\n                                description: `${matchedProduct.brand} ${matchedProduct.name}`,\n                                price: matchedProduct.price,\n                                brand: matchedProduct.brand,\n                                category: matchedProduct.category,\n                                imageUrl: matchedProduct.imageUrl,\n                                matchScore: matchedProduct.matchScore,\n                                matchReasons: matchedProduct.matchReasons\n                            }],\n                        confidence: matchedProduct.matchScore || 0.8,\n                        source: 'social_proof',\n                        timestamp: socialItem.timestamp || new Date().toISOString()\n                    });\n                }\n            }\n        }\n    }\n    // For similar items, find products that match the criteria\n    let similarMatches = [];\n    // Generate similar matches based on category, colors, patterns\n    for (const socialItem of socialProofItems) {\n        // Check for color matches\n        const hasColorMatch = colors.length === 0 ||\n            socialItem.colors.some(c => colors.includes(c));\n        // Check for pattern matches\n        const hasPatternMatch = patterns.length === 0 ||\n            socialItem.patterns.some(p => patterns.includes(p));\n        // Check for category relevance\n        const relevantCategory = !category ||\n            socialItem.outfitTags.some(tag => tag.toLowerCase().includes(category.toLowerCase()));\n        // If we have some matches, add the social proof item's products\n        if ((hasColorMatch || hasPatternMatch) && relevantCategory) {\n            for (const matchedProduct of socialItem.matchedProducts) {\n                // Create a similarity score based on how many attributes match\n                let matchScore = 0.5; // Base score\n                if (hasColorMatch)\n                    matchScore += 0.2;\n                if (hasPatternMatch)\n                    matchScore += 0.2;\n                if (relevantCategory)\n                    matchScore += 0.1;\n                // Create match reasons\n                const matchReasons = [\n                    `Similar to ${socialItem.celebrity}'s style`,\n                    `Featured in ${socialItem.event}`\n                ];\n                if (hasColorMatch) {\n                    matchReasons.push(`Matching color palette`);\n                }\n                if (hasPatternMatch) {\n                    matchReasons.push(`Similar pattern`);\n                }\n                // Add to similar matches\n                similarMatches.push({\n                    id: matchedProduct.id,\n                    celebrityName: socialItem.celebrity || 'Celebrity',\n                    event: socialItem.event || 'Event',\n                    imageUrl: matchedProduct.imageUrl,\n                    matchedProducts: [{\n                            id: matchedProduct.id,\n                            name: matchedProduct.name,\n                            description: `${matchedProduct.brand} ${matchedProduct.name}`,\n                            price: matchedProduct.price,\n                            brand: matchedProduct.brand,\n                            category: matchedProduct.category,\n                            imageUrl: matchedProduct.imageUrl,\n                            matchScore: matchScore,\n                            matchReasons: matchReasons.slice(0, 3)\n                        }],\n                    confidence: matchScore,\n                    source: 'social_proof',\n                    timestamp: socialItem.timestamp || new Date().toISOString()\n                });\n            }\n        }\n    }\n    // Remove duplicates\n    similarMatches = similarMatches.filter((match, index, self) => index === self.findIndex(m => m.id === match.id));\n    // Sort by match score\n    similarMatches.sort((a, b) => b.matchScore - a.matchScore);\n    // Limit results\n    return {\n        exact: itemMatches.slice(0, limit),\n        similar: similarMatches.slice(0, limit)\n    };\n};\nexport default {\n    getCelebrities,\n    getOutfits,\n    getMatches\n};\n","// Mock data system for API fallback\nimport productData from './products';\nimport userData from './user';\nimport quizData from './quiz';\nimport socialProofData from './socialProof';\nimport { USE_MOCK_RETAILER, FORCE_DEMO_MODE } from '../utils/environment';\n// Map endpoints to mock data handlers\nconst mockDataMap = {\n    // Product endpoints\n    '/api/v1/recommendations': productData.getRecommendations,\n    '/api/v1/products': productData.getProducts,\n    '/api/v1/products/search': productData.searchProducts,\n    '/api/v1/similar-items': productData.getSimilarItems,\n    '/api/v1/complete-outfit': productData.completeOutfit,\n    // User-related endpoints\n    '/api/v1/users/profile': userData.getProfile,\n    '/api/v1/users/outfits': userData.getSavedOutfits,\n    '/api/v1/users/feedback/items': userData.addItemFeedback,\n    '/api/v1/users/feedback/outfits': userData.addOutfitFeedback,\n    // Quiz endpoints\n    '/api/v1/quiz/questions': quizData.getQuestions,\n    '/api/v1/quiz/results': quizData.getResults,\n    // Social proof\n    '/api/v1/social/celebrities': socialProofData.getCelebrities,\n    '/api/v1/social/outfits': socialProofData.getOutfits,\n    '/api/v1/social/matches': socialProofData.getMatches\n};\n// Helper to extract path parameters from an endpoint\nconst extractPathParams = (pattern, endpoint) => {\n    const patternParts = pattern.split('/');\n    const endpointParts = endpoint.split('/');\n    const params = {};\n    if (patternParts.length !== endpointParts.length) {\n        return params;\n    }\n    for (let i = 0; i < patternParts.length; i++) {\n        const part = patternParts[i];\n        if (part.startsWith(':')) {\n            const paramName = part.slice(1);\n            params[paramName] = endpointParts[i];\n        }\n    }\n    return params;\n};\n/**\n * Get mock data for any endpoint\n * @param endpoint - API endpoint path\n * @param options - Request options (query params, body, etc)\n * @returns Mock response data\n */\nexport function get(endpoint, options = {}) {\n    console.debug(`[MOCK API] Request to ${endpoint}`, options);\n    // Check for exact match first\n    if (mockDataMap[endpoint]) {\n        return mockDataMap[endpoint](options, endpoint);\n    }\n    // Try pattern matching for dynamic endpoints\n    for (const [pattern, handler] of Object.entries(mockDataMap)) {\n        // Extract path parameters\n        if (pattern.includes(':')) {\n            const regex = new RegExp('^' + pattern.replace(/:[^/]+/g, '([^/]+)') + '$');\n            if (regex.test(endpoint)) {\n                const params = extractPathParams(pattern, endpoint);\n                return handler(Object.assign(Object.assign({}, options), { params }), endpoint);\n            }\n        }\n        // Check if endpoint starts with pattern for catch-all handlers\n        if (endpoint.startsWith(pattern) && pattern.endsWith('*')) {\n            const basePattern = pattern.slice(0, -1); // Remove the *\n            if (endpoint.startsWith(basePattern)) {\n                return handler(options, endpoint);\n            }\n        }\n    }\n    // Default empty response if no match\n    console.warn(`[MOCK API] No mock data found for: ${endpoint}`);\n    return { data: {} };\n}\n/**\n * Check if mock data should be used\n * @returns True if mock data should be used\n */\nexport function shouldUseMockData() {\n    // Mock data is always used in demo mode\n    if (FORCE_DEMO_MODE) {\n        return true;\n    }\n    // Mock retailer mode uses mock data\n    if (USE_MOCK_RETAILER) {\n        return true;\n    }\n    // Check for UI toggle in localStorage\n    try {\n        return localStorage.getItem('STYLIST_DATA_MODE') === 'demo';\n    }\n    catch (e) {\n        return false;\n    }\n}\n/**\n * Toggle mock data mode\n * @param enable - Whether to enable mock data\n */\nexport function setMockDataMode(enable) {\n    try {\n        localStorage.setItem('STYLIST_DATA_MODE', enable ? 'demo' : 'production');\n    }\n    catch (e) {\n        console.error('Failed to set data mode:', e);\n    }\n}\n","import { useTryOnStore } from '@/store/tryOnStore';\n/**\n * Initialize the try-on feature with a product\n * @param productImage URL or File of the product image\n * @param productType Type of the product (top, bottom, etc.)\n */\nexport const startTryOn = (productImage, productType) => {\n    const { startNewTryOn } = useTryOnStore.getState();\n    startNewTryOn(productImage, productType);\n};\n/**\n * Try on a complete outfit\n * @param outfit Outfit to try on\n */\nexport const tryOnOutfit = (outfit) => {\n    const { tryOnOutfit } = useTryOnStore.getState();\n    tryOnOutfit(outfit);\n};\n/**\n * Open the try-on modal\n */\nexport const openTryOnModal = () => {\n    const { openTryOnModal } = useTryOnStore.getState();\n    openTryOnModal();\n};\n/**\n * Close the try-on modal\n */\nexport const closeTryOnModal = () => {\n    const { closeTryOnModal } = useTryOnStore.getState();\n    closeTryOnModal();\n};\n/**\n * Get the current try-on state\n * @returns Current state of the try-on feature\n */\nexport const getTryOnState = () => {\n    const { currentOutfit, userImage, isLoading, error, savedResults } = useTryOnStore.getState();\n    return {\n        currentOutfit,\n        userImage,\n        isLoading,\n        error,\n        savedResults,\n        hasUserImage: !!userImage,\n        hasOutfit: !!currentOutfit && currentOutfit.garments.length > 0\n    };\n};\n// Usage example for React components:\n// \n// import { startTryOn, openTryOnModal } from '@/integration/integrateTryOn';\n// import { GarmentType } from '@/types/tryOn';\n//\n// // In a product detail component:\n// const handleTryOnClick = () => {\n//   startTryOn(product.imageUrl, GarmentType.TOP);\n//   openTryOnModal();\n// };\n//\n// // Button in the component:\n// <button onClick={handleTryOnClick}>Virtual Try-On</button>\n"],"names":["products","outfits","categories","brands","colors","mockData","filterProducts","allProducts","options","filtered","category","filter","p","toLowerCase","Array","isArray","length","some","b","brand","includes","c","oc","priceRange","min","max","price","filterByRetailers","retailerId","inStock","context","factor","map","Object","assign","matchScore","Math","sort","a","getRecommendations","userId","limit","includeOutfits","limitedProducts","slice","responseOutfits","filteredOutfits","allOutfits","occasion","o","filterOutfits","timestamp","Date","items","getProducts","filteredProducts","page","Number","pageSize","start","end","total","searchProducts","query","results","normalizedQuery","trim","product","name","color","aNameMatch","startsWith","getSimilarItems","itemId","referenceItem","find","id","similarityScore","colorOverlap","patterns","patternOverlap","_a","completeOutfit","itemIds","selectedItems","selectedCategories","item","missingEssentials","missingComplementary","outfitSuggestions","i","outfitItems","outfitCategories","candidates","random","push","complementsToAdd","outfitOccasion","outfitName","charAt","toUpperCase","avgMatchScore","reduce","sum","matchReasons","now","userProfile","defaultUserProfile","userStore","profiles","preferences","styles","savedOutfits","itemFeedback","outfitFeedback","generateDefaultProfile","username","toString","substring","stylePreferences","style","weight","colorPreferences","sizePreferences","size","sizes","top","bottom","dress","shoe","occasions","priceRanges","history","viewedItems","likedItems","dislikedItems","purchasedItems","createdAt","lastActive","getProfile","params","newProfile","updateProfile","body","profile","getSavedOutfits","saveOutfit","outfit","outfitId","notes","savedAt","deleteSavedOutfit","success","index","findIndex","splice","addItemFeedback","feedback","liked","addOutfitFeedback","logItemView","quizData","title","description","questions","type","question","required","text","minValue","maxValue","defaultValue","imageUrl","getQuestions","sections","getResults","styleProfile","primaryStyle","secondaryStyle","colorPalette","recommendations","tops","bottoms","dresses","outerwear","accessories","getSeconds","socialProofItems","getCelebrities","offset","paginatedItems","getTime","getOutfits","celebrity","filteredItems","getMatches","itemMatches","socialItem","matchedProduct","matchedProducts","mp","celebrityName","event","confidence","source","toISOString","similarMatches","hasColorMatch","hasPatternMatch","relevantCategory","outfitTags","tag","match","self","m","exact","similar","mockDataMap","user","quiz","socialProof","extractPathParams","pattern","endpoint","patternParts","split","endpointParts","part","get","handler","entries","RegExp","replace","test","endsWith","basePattern","data","shouldUseMockData","localStorage","getItem","e","setMockDataMode","enable","setItem","startTryOn","productImage","productType","startNewTryOn","getState","openTryOnModal"],"sourceRoot":""}