{"version":3,"file":"stylist-vendors-a3688a81.8a9d945064a1ac491957.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/int.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/kernel_funcs_utils.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reduce.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/arg_min_max.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/shared.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-webgl/dist/kernel_utils/reshape.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnaryOpProgram } from '../unaryop_gpu';\nconst TO_INT = `return float(int(x));`;\nexport function int(input, backend) {\n    const program = new UnaryOpProgram(input.shape, TO_INT);\n    const output = backend.runWebGLProgram(program, [input], 'int32');\n    return { dataId: output.dataId, shape: output.shape, dtype: output.dtype };\n}\n//# sourceMappingURL=int.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { env, upcastType } from '@tensorflow/tfjs-core';\nimport { BinaryOpProgram } from '../binaryop_gpu';\nimport { BinaryOpPackedProgram } from '../binaryop_packed_gpu';\nimport { complex } from '../kernels/Complex';\nimport { LEAKYRELU, LEAKYRELU_PACKED } from '../kernels/LeakyRelu';\nimport { PRELU, PRELU_PACKED } from '../kernels/Prelu';\nimport * as unary_op from '../unaryop_gpu';\nimport { UnaryOpProgram } from '../unaryop_gpu';\nimport * as unary_packed_op from '../unaryop_packed_gpu';\nimport { UnaryOpPackedProgram } from '../unaryop_packed_gpu';\nexport const CHECK_NAN_SNIPPET_UNARY = `if (isnan(x)) return x;`;\nexport const CHECK_NAN_SNIPPET_BINARY = `\n  if (isnan(a)) return a;\n  if (isnan(b)) return b;\n`;\nexport const CHECK_NAN_SNIPPET_BINARY_PACKED = `\n  result.r = isNaN.r > 0. ? NAN : result.r;\n  result.g = isNaN.g > 0. ? NAN : result.g;\n  result.b = isNaN.b > 0. ? NAN : result.b;\n  result.a = isNaN.a > 0. ? NAN : result.a;\n`;\n/**\n * Template that creates a `KernelFunc` for unary ops.\n * @param opSnippet Op snippet to create `UnaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `UnaryOpPackedProgram`.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function unaryKernelFunc({ opSnippet, packedOpSnippet, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { x } = inputs;\n        const webglBackend = backend;\n        const $dtype = dtype || x.dtype;\n        if (webglBackend.shouldExecuteOnCPU([x]) && cpuKernelImpl != null) {\n            const xData = webglBackend.texData.get(x.dataId);\n            const outValues = cpuKernelImpl(xData.values, $dtype);\n            return webglBackend.makeTensorInfo(x.shape, $dtype, outValues);\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_UNARY_OPERATIONS') && packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new UnaryOpPackedProgram(x.shape, packedOpSnippet);\n        }\n        else {\n            program = new UnaryOpProgram(x.shape, opSnippet);\n        }\n        return webglBackend.runWebGLProgram(program, [x], $dtype);\n    };\n}\n/**\n * Template that creates a `KernelFunc` for binary ops.\n * @param opSnippet Op snippet to create `BinaryOpProgram`.\n * @param packedOpSnippet Op snippet to create `BinaryOpPackedProgram`.\n * @param checkOutOfBoundsForPackedProgram Whether to set checkOutOfBounds=true\n *     when creating BinaryOpPackedProgram.\n * @param dtype Optional. If set, the result has this dtype. Otherwise, the\n *     result has the same dtype as the first input. This is mainly used in\n *     comparison kernels, such as Equal, Less, Greater, etc.\n */\nexport function binaryKernelFunc({ opSnippet, packedOpSnippet, checkOutOfBounds = false, supportsComplex = false, cpuKernelImpl, dtype }) {\n    return ({ inputs, backend }) => {\n        const { a, b } = inputs;\n        const webglBackend = backend;\n        if (supportsComplex && a.dtype === 'complex64') {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [real, imag] = [\n                [aData.complexTensorInfos.real, bData.complexTensorInfos.real],\n                [aData.complexTensorInfos.imag, bData.complexTensorInfos.imag]\n            ].map(complexParts => {\n                const [aPart, bPart] = complexParts;\n                const aHandle = {\n                    dataId: aPart.dataId,\n                    dtype: aPart.dtype,\n                    shape: a.shape\n                };\n                const bHandle = {\n                    dataId: bPart.dataId,\n                    dtype: bPart.dtype,\n                    shape: b.shape\n                };\n                const program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n                return webglBackend.runWebGLProgram(program, [aHandle, bHandle], upcastType(aPart.dtype, bPart.dtype));\n            });\n            const complexOutput = complex({ inputs: { real, imag }, backend: webglBackend });\n            webglBackend.disposeIntermediateTensorInfo(real);\n            webglBackend.disposeIntermediateTensorInfo(imag);\n            // TODO(annxingyuan): Implement CPU forwarding for complex inputs.\n            return complexOutput;\n        }\n        const $dtype = dtype || upcastType(a.dtype, b.dtype);\n        if (webglBackend.shouldExecuteOnCPU([a, b]) && cpuKernelImpl != null) {\n            const aData = webglBackend.texData.get(a.dataId);\n            const bData = webglBackend.texData.get(b.dataId);\n            const [outValues, outShape] = cpuKernelImpl(a.shape, b.shape, aData.values, bData.values, $dtype);\n            const out = webglBackend.makeTensorInfo(outShape, $dtype);\n            const outData = webglBackend.texData.get(out.dataId);\n            outData.values = outValues;\n            return out;\n        }\n        const shouldUsePackedProgram = env().getBool('WEBGL_PACK_BINARY_OPERATIONS') &&\n            packedOpSnippet != null;\n        let program;\n        if (shouldUsePackedProgram) {\n            program = new BinaryOpPackedProgram(packedOpSnippet, a.shape, b.shape, checkOutOfBounds);\n        }\n        else {\n            program = new BinaryOpProgram(opSnippet, a.shape, b.shape);\n        }\n        return webglBackend.runWebGLProgram(program, [a, b], $dtype);\n    };\n}\nexport function mapActivationToShaderProgram(activation, packed = false) {\n    if (activation === 'linear') {\n        if (packed) {\n            return unary_packed_op.LINEAR;\n        }\n        return unary_op.LINEAR;\n    }\n    else if (activation === 'relu') {\n        if (packed) {\n            return unary_packed_op.RELU;\n        }\n        return unary_op.RELU;\n    }\n    else if (activation === 'elu') {\n        if (packed) {\n            return unary_packed_op.ELU;\n        }\n        return unary_op.ELU;\n    }\n    else if (activation === 'relu6') {\n        if (packed) {\n            return unary_packed_op.RELU6;\n        }\n        return unary_op.RELU6;\n    }\n    else if (activation === 'prelu') {\n        if (packed) {\n            return PRELU_PACKED;\n        }\n        return PRELU;\n    }\n    else if (activation === 'leakyrelu') {\n        if (packed) {\n            return LEAKYRELU_PACKED;\n        }\n        return LEAKYRELU;\n    }\n    else if (activation === 'sigmoid') {\n        if (packed) {\n            return unary_packed_op.SIGMOID;\n        }\n        return unary_op.SIGMOID;\n    }\n    throw new Error(`Activation ${activation} has not been implemented for the WebGL backend.`);\n}\n//# sourceMappingURL=kernel_funcs_utils.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { MeanProgram } from '../mean_gpu';\nimport { ReduceProgram } from '../reduce_gpu';\n// Returns an array of configuration objects that describe each stage of the\n// reduction.\nfunction getReductionStages(inShape) {\n    const stages = [];\n    while (stages.length === 0 || stages[stages.length - 1].outSize !== 1) {\n        const outSize = stages.length ? stages[stages.length - 1].outSize : inShape[1];\n        const windowSize = backend_util.computeOptimalWindowSize(outSize);\n        stages.push({\n            inSize: outSize,\n            windowSize,\n            outSize: Math.ceil(outSize / windowSize)\n        });\n    }\n    return stages;\n}\nexport function reduce(x, dtype, reductionType, backend) {\n    const reductionStages = getReductionStages(x.shape);\n    let result = x;\n    for (let i = 0; i < reductionStages.length; i++) {\n        const { inSize, windowSize, outSize } = reductionStages[i];\n        let program;\n        let previousResult;\n        if (reductionType === 'mean') {\n            program = i === 0 ?\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, inSize) :\n                new MeanProgram({ windowSize, inSize, batchSize: x.shape[0], outSize });\n        }\n        else {\n            program = new ReduceProgram({ windowSize, inSize, batchSize: x.shape[0], outSize }, reductionType);\n        }\n        previousResult = result;\n        result = backend.runWebGLProgram(program, [result], dtype);\n        if (previousResult.dataId !== x.dataId) {\n            backend.disposeIntermediateTensorInfo(previousResult);\n        }\n    }\n    return result;\n}\n//# sourceMappingURL=reduce.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, env, util } from '@tensorflow/tfjs-core';\nimport { ArgMinMaxProgram } from '../argminmax_gpu';\nimport { ArgMinMaxPackedProgram } from '../argminmax_packed_gpu';\nimport { reshape } from '../kernels/Reshape';\nfunction argReduce(backend, x, reduceType, bestIndicesA = null) {\n    let batchSize = x.shape[0];\n    let inSize = x.shape[1];\n    if (bestIndicesA != null) {\n        batchSize = bestIndicesA.shape[0];\n        inSize = bestIndicesA.shape[1];\n    }\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const reduceInfo = { windowSize, inSize, batchSize, outSize: Math.ceil(inSize / windowSize) };\n    const program = new ArgMinMaxProgram(reduceInfo, reduceType, bestIndicesA == null);\n    const inputs = [x];\n    if (bestIndicesA != null) {\n        inputs.push(bestIndicesA);\n    }\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    // No need to run another GPGPU program.\n    if (output.shape[1] === 1) {\n        return output;\n    }\n    const result = argReduce(backend, x, reduceType, output);\n    backend.disposeIntermediateTensorInfo(output);\n    return result;\n}\nfunction argReducePacked(backend, x, reduceType, bestIndicesA = null) {\n    const inShape = bestIndicesA != null ? bestIndicesA.shape : x.shape;\n    const inSize = inShape[inShape.length - 1];\n    const windowSize = backend_util.computeOptimalWindowSize(inSize);\n    const program = new ArgMinMaxPackedProgram(inShape, windowSize, reduceType, bestIndicesA == null);\n    const inputs = bestIndicesA == null ? [x] : [x, bestIndicesA];\n    const output = backend.runWebGLProgram(program, inputs, 'int32');\n    if (output.shape.length === x.shape.length) {\n        const result = argReducePacked(backend, x, reduceType, output);\n        backend.disposeIntermediateTensorInfo(output);\n        return result;\n    }\n    return output;\n}\nexport function argMinMaxReduce(backend, x, axis, reduceType) {\n    const axes = [axis];\n    backend_util.assertAxesAreInnerMostDims('arg' + reduceType.charAt(0).toUpperCase() + reduceType.slice(1), axes, x.shape.length);\n    if (!env().getBool('WEBGL_PACK_REDUCE') || x.shape.length <= 2) {\n        const intermediateTensorInfos = [];\n        const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(x.shape, axes);\n        const inSize = util.sizeFromShape(reduceShape);\n        const a2D = reshape({ inputs: { x }, backend, attrs: { shape: [-1, inSize] } });\n        intermediateTensorInfos.push(a2D);\n        const reduced = argReduce(backend, a2D, reduceType);\n        intermediateTensorInfos.push(reduced);\n        const reshaped = reshape({ inputs: { x: reduced }, backend, attrs: { shape: outShape } });\n        intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n        return reshaped;\n    }\n    return argReducePacked(backend, x, reduceType);\n}\n//# sourceMappingURL=arg_min_max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Import shared functionality from tfjs-backend-cpu without triggering\n// side effects.\n// tslint:disable-next-line: no-imports-from-dist\nimport * as shared from '@tensorflow/tfjs-backend-cpu/dist/shared';\nconst { addImpl: addImplCPU, bincountImpl: bincountImplCPU, bincountReduceImpl: bincountReduceImplCPU, ceilImpl: ceilImplCPU, concatImpl: concatImplCPU, expImpl: expImplCPU, expm1Impl: expm1ImplCPU, floorImpl: floorImplCPU, gatherV2Impl: gatherV2ImplCPU, greaterImpl: greaterImplCPU, lessImpl: lessImplCPU, linSpaceImpl: linSpaceImplCPU, logImpl: logImplCPU, maxImpl: maxImplCPU, maximumImpl: maximumImplCPU, minimumImpl: minimumImplCPU, multiplyImpl: multiplyImplCPU, negImpl: negImplCPU, prodImpl: prodImplCPU, rangeImpl: rangeImplCPU, rsqrtImpl: rsqrtImplCPU, simpleAbsImpl: simpleAbsImplCPU, sliceImpl: sliceImplCPU, sparseFillEmptyRowsImpl: sparseFillEmptyRowsImplCPU, sparseReshapeImpl: sparseReshapeImplCPU, stridedSliceImpl: stridedSliceImplCPU, subImpl: subImplCPU, tileImpl: tileImplCPU, topKImpl: topKImplCPU, transposeImpl: transposeImplCPU, uniqueImpl: uniqueImplCPU, } = shared;\nexport { addImplCPU, bincountImplCPU, bincountReduceImplCPU, ceilImplCPU, concatImplCPU, expImplCPU, expm1ImplCPU, floorImplCPU, gatherV2ImplCPU, greaterImplCPU, lessImplCPU, linSpaceImplCPU, logImplCPU, maxImplCPU, maximumImplCPU, minimumImplCPU, multiplyImplCPU, negImplCPU, prodImplCPU, simpleAbsImplCPU, sliceImplCPU, sparseFillEmptyRowsImplCPU, sparseReshapeImplCPU, stridedSliceImplCPU, subImplCPU, rangeImplCPU, rsqrtImplCPU, tileImplCPU, topKImplCPU, transposeImplCPU, uniqueImplCPU, };\n//# sourceMappingURL=shared.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ReshapePackedProgram } from '../reshape_packed_gpu';\nimport { getBatchDim, getRowsCols } from '../webgl_util';\nexport function packedReshape(input, afterShape, backend) {\n    const input3DShape = [getBatchDim(input.shape),\n        ...getRowsCols(input.shape)];\n    const input3D = {\n        dtype: input.dtype,\n        shape: input3DShape,\n        dataId: input.dataId\n    };\n    const afterShapeAs3D = [getBatchDim(afterShape),\n        ...getRowsCols(afterShape)];\n    const program = new ReshapePackedProgram(afterShapeAs3D, input3DShape);\n    const preventEagerUnpackingOfOutput = true;\n    const output = backend.runWebGLProgram(program, [input3D], input.dtype, null /* customSetup */, preventEagerUnpackingOfOutput);\n    return { dataId: output.dataId, shape: afterShape, dtype: output.dtype };\n}\n//# sourceMappingURL=reshape.js.map"],"names":["TO_INT","int","input","backend","program","shape","output","runWebGLProgram","dataId","dtype","CHECK_NAN_SNIPPET_UNARY","CHECK_NAN_SNIPPET_BINARY","CHECK_NAN_SNIPPET_BINARY_PACKED","unaryKernelFunc","opSnippet","packedOpSnippet","cpuKernelImpl","inputs","x","webglBackend","$dtype","shouldExecuteOnCPU","xData","texData","get","outValues","values","makeTensorInfo","env","getBool","binaryKernelFunc","checkOutOfBounds","supportsComplex","a","b","aData","bData","real","imag","complexTensorInfos","map","complexParts","aPart","bPart","aHandle","bHandle","upcastType","complexOutput","disposeIntermediateTensorInfo","outShape","out","mapActivationToShaderProgram","activation","packed","Error","reduce","reductionType","reductionStages","inShape","stages","length","outSize","windowSize","backend_util","push","inSize","Math","ceil","getReductionStages","result","i","previousResult","batchSize","argReduce","reduceType","bestIndicesA","reduceInfo","argReducePacked","argMinMaxReduce","axis","axes","charAt","toUpperCase","slice","intermediateTensorInfos","reduceShape","util","a2D","attrs","reduced","reshaped","forEach","t","addImplCPU","bincountImplCPU","bincountReduceImplCPU","ceilImplCPU","concatImplCPU","expImplCPU","expm1ImplCPU","floorImplCPU","gatherV2ImplCPU","greaterImplCPU","lessImplCPU","linSpaceImplCPU","logImplCPU","maxImplCPU","maximumImplCPU","minimumImplCPU","multiplyImplCPU","negImplCPU","prodImplCPU","rangeImplCPU","rsqrtImplCPU","simpleAbsImplCPU","sliceImplCPU","sparseFillEmptyRowsImplCPU","sparseReshapeImplCPU","stridedSliceImplCPU","subImplCPU","tileImplCPU","topKImplCPU","transposeImplCPU","uniqueImplCPU","packedReshape","afterShape","input3DShape","input3D","afterShapeAs3D","R"],"sourceRoot":""}