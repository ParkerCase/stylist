{"version":3,"file":"stylist-embed.js","mappings":"cAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAuB,cAAID,IAE3BD,EAAoB,cAAIC,GACzB,CATD,CASGK,MAAM,WACT,O,wVCNA,GAAsB,oBAAXC,QAA0BA,OAAOC,eAAgB,CACxD,MAAMC,EAASF,OAAOC,eAEtBD,OAAOG,yBAA2B,CAC9BC,gBAAiD,kBAAzBF,EAAOG,eAA8BH,EAAOG,cACpEC,gBAAiD,kBAAzBJ,EAAOK,eAA8BL,EAAOK,cACpEC,kBAAqD,kBAA3BN,EAAOO,iBAAgCP,EAAOO,gBACxEC,kBAAmBR,EAAOS,iBAAmB,IAGjDC,QAAQC,IAAI,8CAChB,CAEA,SAASC,EAAKZ,GACV,IAQI,OANAF,OAAOe,sBAAwBb,EAEjB,KAAac,WACrBC,eAAe,QAErBL,QAAQC,IAAI,kEACL,CACHK,SAAS,EACTC,QAAS,iEAEjB,CACA,MAAOC,GAEH,OADAR,QAAQQ,MAAM,6BAA8BA,GACrC,CACHF,SAAS,EACTC,QAAS,0BAA0BC,aAAiBC,MAAQD,EAAMD,QAAUG,OAAOF,KAE3F,CACJ,CAEA,SAASG,IACL,IAEI,OADA,KAAaP,WAAWQ,cACjB,CACX,CACA,MAAOJ,GAEH,OADAR,QAAQQ,MAAM,wBAAyBA,IAChC,CACX,CACJ,CAEA,SAASK,IACL,IACI,MAAM,OAAEC,GAAW,KAAaV,WAIhC,OAHIU,GACA,KAAaV,WAAWQ,cAErB,CACX,CACA,MAAOJ,GAEH,OADAR,QAAQQ,MAAM,wBAAyBA,IAChC,CACX,CACJ,CAEA,SAASO,IACL,IAEI,OADA,KAAaX,WAAWY,kBACjB,CACX,CACA,MAAOR,GAEH,OADAR,QAAQQ,MAAM,2BAA4BA,IACnC,CACX,CACJ,CAEA,SAASS,EAAWC,GAChB,IAEI,OADA,KAAad,WAAWC,eAAea,IAChC,CACX,CACA,MAAOV,GAEH,OADAR,QAAQQ,MAAM,wBAAyBA,IAChC,CACX,CACJ,CAEA,SAASW,IACL,IAQI,OALA/B,OAAOgC,wBAAyB,EAE5BhC,OAAOiC,uBACPjC,OAAOiC,sBAAsBC,KAAK,mBAE/B,CACX,CACA,MAAOd,GAEH,OADAR,QAAQQ,MAAM,4BAA6BA,IACpC,CACX,CACJ,CAEA,SAASe,IACL,IAOI,OALAnC,OAAOoC,2BAA4B,EAE/BpC,OAAOiC,uBACPjC,OAAOiC,sBAAsBC,KAAK,sBAE/B,CACX,CACA,MAAOd,GAEH,OADAR,QAAQQ,MAAM,gCAAiCA,IACxC,CACX,CACJ,CAEA,MAAMiB,EAAY,CACdvB,OACAS,OACAE,QACAE,WACAE,aACAE,gBACAI,mBACAG,QAAS,CACLC,aAAc,KAAM,CAChBrB,SAAS,EACTC,QAAS,8CAEbqB,eAAgB,KAAM,CAClBC,KAAM,GACNC,MAAO,CACHC,aAAa,EACbC,SAAS,EACTC,gBAAgB,EAChBC,mBAAmB,EACnBC,wBAAwB,KAGhCC,iBAAkB,KAAM,CACpB9B,SAAS,EACTC,QAAS,iDAKC,oBAAXnB,QAA2BA,OAAOiD,gBAEzCjD,OAAOiD,cAAgBZ,E","sources":["webpack://StylistWidget/webpack/universalModuleDefinition","webpack://StylistWidget/./src/embed.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StylistWidget\"] = factory();\n\telse\n\t\troot[\"StylistWidget\"] = factory();\n})(self, function() {\nreturn ","// Embed script for retailers to include the full-featured widget on their site\nimport { useChatStore } from '@store/index';\n// Map window.STYLIST_CONFIG values to a global config object\n// This is only needed for the standalone full-widget.html file\nif (typeof window !== 'undefined' && window.STYLIST_CONFIG) {\n    const config = window.STYLIST_CONFIG;\n    // Create a global runtime config object instead of modifying process.env\n    window.__STYLIST_RUNTIME_CONFIG = {\n        FORCE_DEMO_MODE: typeof config.forceDemoMode === 'boolean' ? config.forceDemoMode : false,\n        USE_CLAUDE_DEMO: typeof config.useClaudeDemo === 'boolean' ? config.useClaudeDemo : false,\n        USE_MOCK_RETAILER: typeof config.useMockRetailer === 'boolean' ? config.useMockRetailer : true,\n        ANTHROPIC_API_KEY: config.anthropicApiKey || ''\n    };\n    // Log configuration\n    console.log('Stylist widget runtime configuration loaded');\n}\n// Initialize the widget with all features enabled\nfunction init(config) {\n    try {\n        // Store configuration\n        window.__StylistWidgetConfig = config;\n        // Set widget to automatically open\n        const store = useChatStore.getState();\n        store.setCurrentView('chat');\n        // Log initialization\n        console.log('The Stylist widget initialized successfully with all features.');\n        return {\n            success: true,\n            message: 'The Stylist widget initialized successfully with all features.'\n        };\n    }\n    catch (error) {\n        console.error('Error initializing widget:', error);\n        return {\n            success: false,\n            message: `Initialization failed: ${error instanceof Error ? error.message : String(error)}`\n        };\n    }\n}\n// Open the widget\nfunction open() {\n    try {\n        useChatStore.getState().toggleOpen();\n        return true;\n    }\n    catch (error) {\n        console.error('Error opening widget:', error);\n        return false;\n    }\n}\n// Close the widget\nfunction close() {\n    try {\n        const { isOpen } = useChatStore.getState();\n        if (isOpen) {\n            useChatStore.getState().toggleOpen();\n        }\n        return true;\n    }\n    catch (error) {\n        console.error('Error closing widget:', error);\n        return false;\n    }\n}\n// Minimize the widget\nfunction minimize() {\n    try {\n        useChatStore.getState().toggleMinimize();\n        return true;\n    }\n    catch (error) {\n        console.error('Error minimizing widget:', error);\n        return false;\n    }\n}\n// Switch view between chat and lookbook\nfunction switchView(view) {\n    try {\n        useChatStore.getState().setCurrentView(view);\n        return true;\n    }\n    catch (error) {\n        console.error('Error switching view:', error);\n        return false;\n    }\n}\n// Start the style quiz\nfunction openStyleQuiz() {\n    try {\n        // This function will be used by the ChatWidget component to show the quiz\n        // Set the flag without resetting it - the component will handle state\n        window.__StylistShowStyleQuiz = true;\n        // Emit an event if the event system is available\n        if (window.__StylistWidgetEvents) {\n            window.__StylistWidgetEvents.emit('styleQuiz:open');\n        }\n        return true;\n    }\n    catch (error) {\n        console.error('Error opening style quiz:', error);\n        return false;\n    }\n}\n// Open virtual try-on\nfunction openVirtualTryOn() {\n    try {\n        // Set the flag without resetting it - the component will handle state\n        window.__StylistShowVirtualTryOn = true;\n        // Emit an event if the event system is available\n        if (window.__StylistWidgetEvents) {\n            window.__StylistWidgetEvents.emit('virtualTryOn:open');\n        }\n        return true;\n    }\n    catch (error) {\n        console.error('Error opening virtual try-on:', error);\n        return false;\n    }\n}\n// Export the API\nconst widgetAPI = {\n    init,\n    open,\n    close,\n    minimize,\n    switchView,\n    openStyleQuiz,\n    openVirtualTryOn,\n    __debug: {\n        addMockItems: () => ({\n            success: false,\n            message: 'Mock items not available in embed version'\n        }),\n        getDiagnostics: () => ({\n            logs: [],\n            flags: {\n                initialized: false,\n                mounted: false,\n                renderComplete: false,\n                storesInitialized: false,\n                backgroundInitComplete: false\n            }\n        }),\n        clearDiagnostics: () => ({\n            success: false,\n            message: 'Diagnostics not available in embed version'\n        })\n    }\n};\n// Add to window object\nif (typeof window !== 'undefined' && !window.StylistWidget) {\n    // Use type assertion to ensure TypeScript knows this is a valid operation\n    window.StylistWidget = widgetAPI;\n}\nexport { init, open, close, minimize, switchView, openStyleQuiz, openVirtualTryOn };\n"],"names":["root","factory","exports","module","define","amd","self","window","STYLIST_CONFIG","config","__STYLIST_RUNTIME_CONFIG","FORCE_DEMO_MODE","forceDemoMode","USE_CLAUDE_DEMO","useClaudeDemo","USE_MOCK_RETAILER","useMockRetailer","ANTHROPIC_API_KEY","anthropicApiKey","console","log","init","__StylistWidgetConfig","getState","setCurrentView","success","message","error","Error","String","open","toggleOpen","close","isOpen","minimize","toggleMinimize","switchView","view","openStyleQuiz","__StylistShowStyleQuiz","__StylistWidgetEvents","emit","openVirtualTryOn","__StylistShowVirtualTryOn","widgetAPI","__debug","addMockItems","getDiagnostics","logs","flags","initialized","mounted","renderComplete","storesInitialized","backgroundInitComplete","clearDiagnostics","StylistWidget"],"sourceRoot":""}