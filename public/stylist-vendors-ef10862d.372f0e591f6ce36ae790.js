"use strict";(self.webpackChunkStylistWidget=self.webpackChunkStylistWidget||[]).push([[9723],{6439:function(t,e,a){a.d(e,{CC:function(){return p},Cq:function(){return u},Xi:function(){return i},Zg:function(){return r},cS:function(){return s},hV:function(){return y},lz:function(){return o}});var n=a(9495);function r(t,e,a,r,p){const o=e.inputParams[t];if(o&&void 0!==o.inputIndexStart){const t=o.inputIndexStart,m=0===o.inputIndexEnd?void 0:void 0===o.inputIndexEnd?t+1:o.inputIndexEnd;if("tensor"===o.type)return s(e.inputNames[o.inputIndexStart],a,r,p);if("tensors"===o.type){return e.inputNames.slice(t,m).map((t=>s(t,a,r,p)))}const i=s(e.inputNames.slice(t)[0],a,r,p),u=i.dataSync();return"number"===o.type?u[0]:n.util.toNestedArray(i.shape,u)}const m=e.attrParams[t];return m&&m.value}function s(t,e,a,n){const[r,s]=i(t);if(null!=n){const t=n.getHashTableHandleByName(r);if(null!=t)return t}const p=a.currentContextIds.find((t=>!!e[m(r,t)]));return void 0!==p?e[m(r,p)][s]:void 0}function p(t,e,a){return e[m(t,a.currentContextId)]}function o(t,e){const[a,n]=i(t);return[m(a,e&&e.currentContextId),n]}function m(t,e){return e?`${t}-${e}`:t}function i(t){const e=t.split(":");if(1===e.length)return[t,0];return[e[0],Number(e[e.length-1])]}function u(t,e,a){let n=r("pad",t,e,a);if("explicit"===n){n=r("explicitPaddings",t,e,a);const s=[[0,0],[0,0],[0,0],[0,0]];for(let t=0;t<4;t++)s[t][0]=n[2*t],s[t][1]=n[2*t+1];return s}return n}function y(t){return t.kept?t:(0,n.clone)(t)}},23470:function(t,e,a){a.d(e,{_e:function(){return r}});const n={};function r(t){return n[t]}},29720:function(t,e,a){a.d(e,{bo:function(){return j},zJ:function(){return at},aO:function(){return W},$A:function(){return Y},Yu:function(){return K},L:function(){return $},MZ:function(){return J},kP:function(){return tt},$2:function(){return H},Ph:function(){return et},k1:function(){return Q}});var n={};a.r(n),a.d(n,{json:function(){return O}});var r={};a.r(r),a.d(r,{json:function(){return _}});var s={};a.r(s),a.d(s,{json:function(){return V}});var p={};a.r(p),a.d(p,{json:function(){return v}});var o={};a.r(o),a.d(o,{json:function(){return A}});var m={};a.r(m),a.d(m,{json:function(){return k}});var i={};a.r(i),a.d(i,{json:function(){return w}});var u={};a.r(u),a.d(u,{json:function(){return D}});var y={};a.r(y),a.d(y,{json:function(){return I}});var d={};a.r(d),a.d(d,{json:function(){return M}});var c={};a.r(c),a.d(c,{json:function(){return L}});var l={};a.r(l),a.d(l,{json:function(){return z}});var f={};a.r(f),a.d(f,{json:function(){return C}});var g={};a.r(g),a.d(g,{json:function(){return F}});var N={};a.r(N),a.d(N,{json:function(){return E}});var h={};a.r(h),a.d(h,{json:function(){return P}});var b={};a.r(b),a.d(b,{json:function(){return B}});var Z=a(9495),x=a(92737),S=a(23470),T=a(6439);const O=[{tfOpName:"Add",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddV2",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AddN",category:"arithmetic",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"BiasAdd",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"Sub",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"RealDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Div",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"DivNoNan",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorDiv",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mul",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Maximum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Minimum",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Pow",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SquaredDifference",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Mod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"FloorMod",category:"arithmetic",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],_=[{tfOpName:"Abs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atan2",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ceil",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ClipByValue",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"clipValueMin",type:"number"},{start:2,name:"clipValueMax",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Complex",category:"basic_math",inputs:[{start:0,name:"real",type:"tensor"},{start:1,name:"imag",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ComplexAbs",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cos",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Cosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Elu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Exp",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Floor",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Imag",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Neg",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Real",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"Tout",name:"outputType",type:"dtype",notSupported:!0}]},{tfOpName:"Prelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"alpha",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Relu6",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Selu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sigmoid",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sin",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Rsqrt",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Square",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Tanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Sign",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Round",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Expm1",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Log1p",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Reciprocal",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Softplus",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Asinh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Acosh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Atanh",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Erf",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Prod",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axes",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LeakyRelu",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"alpha",name:"alpha",type:"number",defaultValue:.2},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"IsNan",category:"basic_math",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],V=[{tfOpName:"EmptyTensorList",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"maxNumElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"LoopCond",category:"control",inputs:[{start:0,name:"pred",type:"tensor"}]},{tfOpName:"Switch",category:"control",inputs:[{start:0,name:"data",type:"tensor"},{start:1,name:"pred",type:"tensor"}]},{tfOpName:"Merge",category:"control",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}]},{tfOpName:"Enter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"frame_name",name:"frameName",type:"string"},{tfName:"is_constant",name:"isConstant",type:"bool"}]},{tfOpName:"Exit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NextIteration",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayV3",category:"control",inputs:[{start:0,name:"size",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"dynamic_size",name:"dynamicSize",type:"bool"},{tfName:"clear_after_read",name:"clearAfterRead",type:"bool"},{tfName:"identical_element_shapes",name:"identicalElementShapes",type:"bool"},{tfName:"tensor_array_name",name:"name",type:"string"}]},{tfOpName:"TensorArrayWriteV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayReadV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"TensorArrayGatherV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape",name:"elementShape",type:"shape"}]},{tfOpName:"TensorArrayScatterV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"tensor",type:"tensor"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArrayConcatV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"element_shape_except0",name:"elementShapeExcept0",type:"shape",notSupported:!0}]},{tfOpName:"TensorArraySplitV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"tensor",type:"tensor"},{start:2,name:"lengths",type:"number[]"},{start:3,name:"flowIn",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"TensorArraySizeV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"},{start:1,name:"flowIn",type:"number"}]},{tfOpName:"TensorArrayCloseV3",category:"control",inputs:[{start:0,name:"tensorArrayId",type:"tensor"}]},{tfOpName:"StatelessIf",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"If",category:"control",inputs:[{start:0,name:"cond",type:"tensor"},{start:1,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"then_branch",name:"thenBranch",type:"func"},{tfName:"else_branch",name:"elseBranch",type:"func"}]},{tfOpName:"StatelessWhile",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"While",category:"control",inputs:[{start:0,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"cond",name:"cond",type:"func"},{tfName:"body",name:"body",type:"func"}]},{tfOpName:"TensorListScatter",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListScatterV2",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"},{start:3,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGather",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"indices",type:"number[]"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListGetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListSetItem",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"index",type:"number"},{start:2,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListReserve",category:"control",inputs:[{start:0,name:"elementShape",type:"shape"},{start:1,name:"numElements",type:"number"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListFromTensor",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListStack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"},{tfName:"num_elements",name:"numElements",type:"dtype"}]},{tfOpName:"TensorListSplit",category:"control",inputs:[{start:0,name:"tensor",type:"tensor"},{start:1,name:"elementShape",type:"shape"},{start:2,name:"lengths",type:"number[]"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListConcat",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"}],attrs:[{tfName:"element_shape",name:"elementShape",type:"shape"},{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPopBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"elementShape",type:"shape"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]},{tfOpName:"TensorListPushBack",category:"control",inputs:[{start:0,name:"tensorListId",type:"tensor"},{start:1,name:"tensor",type:"tensor"}],attrs:[{tfName:"element_dtype",name:"elementDType",type:"dtype"}]}],v=[{tfOpName:"AvgPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[],notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPoolWithArgmax",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"include_batch_in_index",name:"includeBatchInIndex",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"AvgPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MaxPool3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"ksize",name:"kernelSize",type:"number[]"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Conv1D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"stride",name:"stride",type:"number"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NWC"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"dilation",name:"dilation",type:"number",defaultValue:1}]},{tfOpName:"Conv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"useCudnnOnGpu",name:"useCudnnOnGpu",type:"bool"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"_FusedConv2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"use_cudnn_on_gpu",name:"useCudnnOnGpu",type:"bool",defaultValue:!0},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"leakyrelu_alpha",name:"leakyreluAlpha",type:"number"}]},{tfOpName:"Conv2DBackpropInput",category:"convolution",inputs:[{start:2,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:0,name:"outputShape",type:"number[]"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]",notSupported:!0}]},{tfOpName:"DepthwiseConv2d",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"DepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"input",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"FusedDepthwiseConv2dNative",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]",defaultValue:[1,1,1,1]},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"explicit_paddings",name:"explicitPaddings",type:"number[]",defaultValue:[]}]},{tfOpName:"Conv3D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"padding",name:"pad",type:"string"},{tfName:"data_format",name:"dataFormat",type:"string",defaultValue:"NHWC"},{tfName:"dilations",name:"dilations",type:"number[]"}]},{tfOpName:"Dilation2D",category:"convolution",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"filter",type:"tensor"}],attrs:[{tfName:"strides",name:"strides",type:"number[]"},{tfName:"rates",name:"dilations",type:"number[]"},{tfName:"padding",name:"pad",type:"string"}]}],A=[{tfOpName:"Fill",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"},{start:1,name:"value",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"LinSpace",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"num",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"OneHot",category:"creation",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"depth",type:"number"},{start:2,name:"onValue",type:"number",defaultValue:1},{start:3,name:"offValue",type:"number",defaultValue:0}],attrs:[{tfName:"axis",name:"axis",type:"number",notSupported:!0},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Ones",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"OnesLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"RandomUniform",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"minval",name:"minval",type:"number",defaultValue:0},{tfName:"maxval",name:"maxval",type:"number",defaultValue:1},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"seed",name:"seed",type:"number",defaultValue:0},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Range",category:"creation",inputs:[{start:0,name:"start",type:"number"},{start:1,name:"stop",type:"number"},{start:2,name:"step",type:"number",defaultValue:0}],attrs:[{tfName:"Tidx",name:"dtype",type:"dtype"}]},{tfOpName:"TruncatedNormal",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"means",name:"mean",type:"number",defaultValue:0},{tfName:"stddev",name:"stdDev",type:"number",defaultValue:1},{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number",defaultValue:0,notSupported:!0},{tfName:"dtype",name:"dtype",type:"dtype"},{tfName:"T",name:"T",type:"number",notSupported:!0}]},{tfOpName:"Zeros",category:"creation",inputs:[{start:0,name:"shape",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"ZerosLike",category:"creation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype"}]},{tfOpName:"Multinomial",category:"creation",inputs:[{start:0,name:"logits",type:"tensor"},{start:1,name:"numSamples",type:"number"}],attrs:[{tfName:"seed",name:"seed",type:"number"},{tfName:"seed2",name:"seed2",type:"number"},{tfName:"T",name:"dtype",type:"dtype"},{tfName:"output_dtype",name:"output_dtype",type:"dtype"}]}],k=[{tfOpName:"NonMaxSuppressionV2",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV3",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}]},{tfOpName:"NonMaxSuppressionV4",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0},{tfName:"T_threshold",name:"threshold",type:"dtype",notSupported:!0},{tfName:"pad_to_max_output_size",name:"padToMaxOutputSize",type:"bool"}]},{tfOpName:"NonMaxSuppressionV5",category:"dynamic",inputs:[{start:0,name:"boxes",type:"tensor"},{start:1,name:"scores",type:"tensor"},{start:2,name:"maxOutputSize",type:"number"},{start:3,name:"iouThreshold",type:"number"},{start:4,name:"scoreThreshold",type:"number"},{start:5,name:"softNmsSigma",type:"number"}]},{tfOpName:"Where",category:"dynamic",inputs:[{start:0,name:"condition",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ListDiff",category:"dynamic",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"y",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],w=[{tfOpName:"TopKV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"k",type:"number"}],attrs:[{tfName:"sorted",name:"sorted",type:"bool"}]},{tfOpName:"Unique",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"UniqueV2",category:"evaluation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]}],D=[{tfOpName:"PlaceholderWithDefault",category:"graph",inputs:[{start:0,name:"default",type:"tensor"}],attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Placeholder",category:"graph",attrs:[{tfName:"shape",name:"shape",type:"shape"},{tfName:"dtype",name:"dtype",type:"dtype"}]},{tfOpName:"Const",category:"graph"},{tfOpName:"Identity",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IdentityN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Snapshot",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Rank",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Size",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"Shape",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"ShapeN",category:"graph",inputs:[{start:0,end:0,name:"x",type:"tensors"}]},{tfOpName:"Print",category:"graph",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"data",type:"tensors"}],attrs:[{tfName:"message",name:"message",type:"string"},{tfName:"first_n",name:"firstN",type:"number",notSupported:!0},{tfName:"summarize",name:"summarize",type:"number",defaultValue:3}]},{tfOpName:"NoOp",category:"graph",inputs:[]},{tfOpName:"StopGradient",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"FakeQuantWithMinMaxVars",category:"graph",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"min",name:"min",type:"number"},{tfName:"max",name:"max",type:"number"}]}],I=[{tfOpName:"HashTable",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"HashTableV2",category:"hash_table",inputs:[],attrs:[{tfName:"shared_name",name:"sharedName",type:"string"},{tfName:"use_node_name_sharing",name:"useNodeNameSharing",type:"bool"},{tfName:"key_dtype",name:"keyDType",type:"dtype"},{tfName:"value_dtype",name:"valueDType",type:"dtype"}]},{tfOpName:"LookupTableImport",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableImportV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"values",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFind",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableFindV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"},{start:1,name:"keys",type:"tensor"},{start:2,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"Tin",name:"tIn",type:"dtype",notSupported:!0},{tfName:"Tout",name:"tOut",type:"dtype",notSupported:!0}]},{tfOpName:"LookupTableSize",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]},{tfOpName:"LookupTableSizeV2",category:"hash_table",inputs:[{start:0,name:"tableHandle",type:"tensor"}]}],M=[{tfOpName:"ResizeBilinear",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"ResizeNearestNeighbor",category:"image",inputs:[{start:0,name:"images",type:"tensor"},{start:1,name:"size",type:"number[]"}],attrs:[{tfName:"align_corners",name:"alignCorners",type:"bool"},{tfName:"half_pixel_centers",name:"halfPixelCenters",type:"bool"},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"CropAndResize",category:"image",inputs:[{start:0,name:"image",type:"tensor"},{start:1,name:"boxes",type:"tensor"},{start:2,name:"boxInd",type:"tensor"},{start:3,name:"cropSize",type:"number[]"}],attrs:[{tfName:"method",name:"method",type:"string"},{tfName:"extrapolation_value",name:"extrapolationValue",type:"number"}]}],L=[{tfOpName:"Equal",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"NotEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Greater",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"GreaterEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Less",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LessEqual",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalAnd",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalNot",category:"logical",inputs:[{start:0,name:"a",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"LogicalOr",category:"logical",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Select",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"SelectV2",category:"logical",inputs:[{start:0,name:"condition",type:"tensor"},{start:1,name:"a",type:"tensor"},{start:2,name:"b",type:"tensor"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]}],z=[{tfOpName:"_FusedMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"},{start:2,end:0,name:"args",type:"tensors"}],attrs:[{tfName:"num_args",name:"numArgs",type:"number"},{tfName:"fused_ops",name:"fusedOps",type:"string[]",defaultValue:[]},{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:1e-4},{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"MatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"transpose_a",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"transpose_b",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMul",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"BatchMatMulV2",category:"matrices",inputs:[{start:0,name:"a",type:"tensor"},{start:1,name:"b",type:"tensor"}],attrs:[{tfName:"adj_x",name:"transposeA",type:"bool",defaultValue:!1},{tfName:"adj_y",name:"transposeB",type:"bool",defaultValue:!1},{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Transpose",category:"matrices",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"perm",type:"number[]"}],attrs:[{tfName:"T",name:"dtype",type:"dtype",notSupported:!0}]},{tfOpName:"Einsum",category:"matrices",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"equation",name:"equation",type:"string"},{tfName:"N",name:"n",type:"number",defaultValue:2},{tfName:"T",name:"dtype",type:"dtype"}]}],C=[{tfOpName:"FusedBatchNorm",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV2",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"FusedBatchNormV3",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"scale",type:"tensor"},{start:2,name:"offset",type:"tensor"},{start:3,name:"mean",type:"tensor"},{start:4,name:"variance",type:"tensor"}],attrs:[{tfName:"epsilon",name:"epsilon",type:"number",defaultValue:.001},{tfName:"data_format",name:"dataFormat",type:"string",notSupported:!0}]},{tfOpName:"LRN",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"depth_radius",name:"radius",type:"number",defaultValue:5},{tfName:"bias",name:"bias",type:"number",defaultValue:1},{tfName:"alpha",name:"alpha",type:"number",defaultValue:1},{tfName:"beta",name:"beta",type:"number",defaultValue:.5}]},{tfOpName:"Softmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"LogSoftmax",category:"normalization",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"SparseToDense",category:"normalization",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!0,notSupported:!0}]}],F=[{tfOpName:"Bincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}]},{tfOpName:"DenseBincount",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"size",type:"number"},{start:2,name:"weights",type:"tensor"}],attrs:[{tfName:"binary_output",name:"binaryOutput",type:"bool"}]},{tfOpName:"Max",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Mean",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Min",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Sum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"All",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Any",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"ArgMax",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"ArgMin",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"Prod",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}],attrs:[{tfName:"keep_dims",name:"keepDims",type:"bool"}]},{tfOpName:"Cumsum",category:"reduction",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}],attrs:[{tfName:"exclusive",name:"exclusive",type:"bool"},{tfName:"reverse",name:"reverse",type:"bool"}]}],E=[{tfOpName:"ConcatV2",category:"slice_join",inputs:[{start:0,end:-1,name:"tensors",type:"tensors"},{start:-1,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"Concat",category:"slice_join",inputs:[{start:1,end:0,name:"tensors",type:"tensors"},{start:0,name:"axis",type:"number"}],attrs:[{tfName:"N",name:"n",type:"number",defaultValue:2}]},{tfOpName:"GatherV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"},{start:2,name:"axis",type:"number",defaultValue:0}],attrs:[{tfName:"batch_dims",name:"batchDims",type:"number",defaultValue:0}]},{tfOpName:"Gather",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",notSupported:!0}]},{tfOpName:"Reverse",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"dims",type:"bool[]"}]},{tfOpName:"ReverseV2",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number[]"}]},{tfOpName:"Slice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"size",type:"number[]"}]},{tfOpName:"StridedSlice",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"begin",type:"number[]"},{start:2,name:"end",type:"number[]"},{start:3,name:"strides",type:"number[]"}],attrs:[{tfName:"begin_mask",name:"beginMask",type:"number",defaultValue:0},{tfName:"end_mask",name:"endMask",type:"number",defaultValue:0},{tfName:"new_axis_mask",name:"newAxisMask",type:"number",defaultValue:0},{tfName:"ellipsis_mask",name:"ellipsisMask",type:"number",defaultValue:0},{tfName:"shrink_axis_mask",name:"shrinkAxisMask",type:"number",defaultValue:0}]},{tfOpName:"Pack",category:"slice_join",inputs:[{start:0,end:0,name:"tensors",type:"tensors"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0}]},{tfOpName:"Unpack",category:"slice_join",inputs:[{start:0,name:"tensor",type:"tensor"}],attrs:[{tfName:"axis",name:"axis",type:"number",defaultValue:0},{tfName:"num",name:"num",type:"number",defaultValue:0,notSupported:!0}]},{tfOpName:"Tile",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"reps",type:"number[]"}]},{tfOpName:"Split",category:"slice_join",inputs:[{start:0,name:"axis",type:"number",defaultValue:0},{start:1,name:"x",type:"tensor"}],attrs:[{tfName:"num_split",name:"numOrSizeSplits",type:"number",defaultValue:1}]},{tfOpName:"SplitV",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"numOrSizeSplits",type:"number[]"},{start:2,name:"axis",type:"number",defaultValue:0}]},{tfOpName:"ScatterNd",category:"slice_join",inputs:[{start:0,name:"indices",type:"tensor"},{start:1,name:"values",type:"tensor"},{start:2,name:"shape",type:"number[]"}]},{tfOpName:"GatherNd",category:"slice_join",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"indices",type:"tensor"}]},{tfOpName:"SparseToDense",category:"slice_join",inputs:[{start:0,name:"sparseIndices",type:"tensor"},{start:1,name:"outputShape",type:"number[]"},{start:2,name:"sparseValues",type:"tensor"},{start:3,name:"defaultValue",type:"tensor"}],attrs:[{tfName:"validate_indices",name:"validateIndices",type:"bool",defaultValue:!1,notSupported:!0}]}],P=[{tfOpName:"FFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"IFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"}]},{tfOpName:"RFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]},{tfOpName:"IRFFT",category:"spectral",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"fft_length",type:"number",notSupported:!0}]}],B=[{tfOpName:"Cast",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"SrcT",name:"sdtype",type:"dtype",notSupported:!0},{tfName:"DstT",name:"dtype",type:"dtype"}]},{tfOpName:"ExpandDims",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"axis",type:"number"}]},{tfOpName:"MirrorPad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"mode",name:"mode",type:"string"}]},{tfOpName:"Pad",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"}],attrs:[{tfName:"constant_value",name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"PadV2",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"padding",type:"number[]"},{start:2,name:"constantValue",type:"number",defaultValue:0}]},{tfOpName:"Reshape",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}]},{tfOpName:"Squeeze",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"axis",tfDeprecatedName:"squeeze_dims",name:"axis",type:"number[]"}]},{tfOpName:"SpaceToBatchND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"paddings",type:"number[]"}]},{tfOpName:"BatchToSpaceND",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"blockShape",type:"number[]"},{start:2,name:"crops",type:"number[]"}]},{tfOpName:"DepthToSpace",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"}],attrs:[{tfName:"block_size",name:"blockSize",type:"number"},{tfName:"data_format",name:"dataFormat",type:"string"}]},{tfOpName:"BroadcastTo",category:"transformation",inputs:[{start:0,name:"x",type:"tensor"},{start:1,name:"shape",type:"number[]"}],attrs:[]}];var R=a(48287).hp;class j{static get Instance(){return this._instance||(this._instance=new this)}constructor(){const t=[].concat(...[n,r,s,p,o,m,i,c,d,u,l,f,g,N,h,b,y].map((t=>t.json)));this.opMappers=t.reduce(((t,e)=>(t[e.tfOpName]=e,t)),{})}transformGraph(t,e={}){const a=t.node,n=[],r=[],s=[],p=a.reduce(((t,e)=>(t[e.name]=this.mapNode(e),e.op.startsWith("Placeholder")?n.push(t[e.name]):"Const"===e.op?r.push(t[e.name]):null!=e.input&&0!==e.input.length||s.push(t[e.name]),t)),{});let o=[];const m=[];let i={},u={};null!=e&&(i=this.mapSignatureEntries(e.inputs),u=this.mapSignatureEntries(e.outputs));const y=Object.keys(p);y.forEach((t=>{const e=p[t];e.inputNames.forEach((t=>{const[a]=(0,T.lz)(t);e.inputs.push(p[a]),p[a].children.push(e)}))})),0===Object.keys(u).length?y.forEach((t=>{const e=p[t];0===e.children.length&&m.push(e)})):Object.keys(u).forEach((t=>{const[e]=(0,T.lz)(t),a=p[e];null!=a&&(a.signatureKey=u[t],m.push(a))})),Object.keys(i).length>0?Object.keys(i).forEach((t=>{const[e]=(0,T.lz)(t),a=p[e];a&&(a.signatureKey=i[t],o.push(a))})):o=n;let d={};null!=t.library&&null!=t.library.function&&(d=t.library.function.reduce(((t,e)=>(t[e.signature.name]=this.mapFunction(e),t)),{}));const c={nodes:p,inputs:o,outputs:m,weights:r,placeholders:n,signature:e,functions:d};return s.length>0&&(c.initNodes=s),c}mapSignatureEntries(t){return Object.keys(t||{}).reduce(((e,a)=>(e[t[a].name]=a,e)),{})}mapNode(t){const e=(0,S._e)(t.op)||this.opMappers[t.op]||{};null==t.attr&&(t.attr={});const a={name:t.name,op:t.op,category:e.category,inputNames:(t.input||[]).map((t=>t.startsWith("^")?t.substr(1):t)),inputs:[],children:[],inputParams:{},attrParams:{},rawAttrs:t.attr};return null!=e.inputs&&(a.inputParams=e.inputs.reduce(((t,e)=>(t[e.name]={type:e.type,inputIndexStart:e.start,inputIndexEnd:e.end},t)),{})),null!=e.attrs&&(a.attrParams=e.attrs.reduce(((e,a)=>{const n=a.type;let r;switch(a.type){case"string":r=H(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=H(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"string[]":r=tt(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=tt(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"number":r=$(t.attr,a.tfName,a.defaultValue||0),void 0===r&&a.tfDeprecatedName&&(r=$(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"number[]":r=J(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=J(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool":r=W(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=W(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"bool[]":r=at(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=at(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape":r=Q(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=Q(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"shape[]":r=et(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=et(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype":r=K(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=K(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"dtype[]":r=Y(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=Y(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"func":r=U(t.attr,a.tfName,a.defaultValue),void 0===r&&a.tfDeprecatedName&&(r=U(t.attr,a.tfDeprecatedName,a.defaultValue));break;case"tensor":case"tensors":break;default:throw new Error(`Unsupported param type: ${a.type} for op: ${t.op}`)}return e[a.name]={value:r,type:n},e}),{})),a}mapFunction(t){const e=t.nodeDef,a=[];let n={};null!=e&&(n=e.reduce(((t,e)=>(t[e.name]=this.mapNode(e),"Const"===e.op&&a.push(t[e.name]),t)),{}));const r=[],s=[];t.signature.inputArg.forEach((t=>{const[e]=(0,T.lz)(t.name),a={name:e,op:"Placeholder",inputs:[],inputNames:[],category:"graph",inputParams:{},attrParams:{dtype:{value:G(t.type),type:"dtype"}},children:[]};a.signatureKey=t.name,r.push(a),n[e]=a}));Object.keys(n).forEach((t=>{const e=n[t];e.inputNames.forEach((t=>{const[a]=(0,T.lz)(t);e.inputs.push(n[a]),n[a].children.push(e)}))}));const p=t.ret;t.signature.outputArg.forEach((t=>{const[e,a]=(0,T.lz)(p[t.name]),r=n[e];null!=r&&(r.defaultOutput=a,s.push(r))}));const o=this.mapArgsToSignature(t);return{nodes:n,inputs:r,outputs:s,weights:a,placeholders:[],signature:o}}mapArgsToSignature(t){return{methodName:t.signature.name,inputs:t.signature.inputArg.reduce(((t,e)=>(t[e.name]=this.mapArgToTensorInfo(e),t)),{}),outputs:t.signature.outputArg.reduce(((e,a)=>(e[a.name]=this.mapArgToTensorInfo(a,t.ret),e)),{})}}mapArgToTensorInfo(t,e){let a=t.name;return null!=e&&(a=e[a]),{name:a,dtype:t.type}}}function q(t,e){const a=Array.isArray(t)?String.fromCharCode.apply(null,t):function(t){const e=(0,Z.env)().global;if("undefined"!==typeof e.atob)return e.atob(t);if("undefined"!==typeof R)return new R(t,"base64").toString();throw new Error("Unable to decode base64 in this environment. Missing built-in atob() or Buffer()")}(t);return e?a:a.toLowerCase()}function H(t,e,a,n=!1){const r=t[e];return null!=r?q(r.s,n):a}function W(t,e,a){const n=t[e];return n?n.b:a}function $(t,e,a){const n=t[e]||{},r=null!=n.i?n.i:null!=n.f?n.f:a;return"number"===typeof r?r:parseInt(r,10)}function G(t){switch("string"===typeof t&&(t=x.p[t]),t){case x.p.DT_FLOAT:return"float32";case x.p.DT_INT32:case x.p.DT_INT64:case x.p.DT_INT8:case x.p.DT_UINT8:return"int32";case x.p.DT_BOOL:return"bool";case x.p.DT_DOUBLE:return"float32";case x.p.DT_STRING:return"string";default:return null}}function U(t,e,a){const n=t[e];return n&&n.func?n.func.name:a}function K(t,e,a){const n=t[e];return n&&n.type?G(n.type):a}function Y(t,e,a){const n=t[e];return n&&n.list&&n.list.type?n.list.type.map((t=>G(t))):a}function X(t){if(!t.unknownRank)return null!=t.dim?t.dim.map((t=>"number"===typeof t.size?t.size:parseInt(t.size,10))):[]}function Q(t,e,a){const n=t[e];return n&&n.shape?X(n.shape):a}function J(t,e,a){const n=t[e];return n?((n.list.f&&n.list.f.length?n.list.f:n.list.i)||[]).map((t=>"number"===typeof t?t:parseInt(t,10))):a}function tt(t,e,a,n=!1){const r=t[e];return r&&r.list&&r.list.s?r.list.s.map((t=>q(t,n))):a}function et(t,e,a){const n=t[e];return n&&n.list&&n.list.shape?n.list.shape.map((t=>X(t))):a}function at(t,e,a){const n=t[e];return n&&n.list&&n.list.b?n.list.b:a}},45285:function(t,e,a){a.d(e,{j:function(){return ia}});var n=a(9495),r=a(6439),s=a(29720);class p{constructor(t,e,a){this.node=t,this.tensorMap=e,this.context=a,this.inputs=[],this.attrs={},this.inputs=t.inputNames.map((t=>this.getInput(t))),null!=t.rawAttrs&&(this.attrs=Object.keys(t.rawAttrs).reduce(((t,e)=>(t[e]=this.getAttr(e),t)),{}))}getInput(t){return(0,r.cS)(t,this.tensorMap,this.context)}getAttr(t,e){const a=this.node.rawAttrs[t];if(null!=a.tensor)return(0,r.cS)(t,this.tensorMap,this.context);if(null!=a.i||null!=a.f)return(0,s.L)(this.node.rawAttrs,t,e);if(null!=a.s)return(0,s.$2)(this.node.rawAttrs,t,e);if(null!=a.b)return(0,s.aO)(this.node.rawAttrs,t,e);if(null!=a.shape)return(0,s.k1)(this.node.rawAttrs,t,e);if(null!=a.type)return(0,s.Yu)(this.node.rawAttrs,t,e);if(null!=a.list){if(null!=a.list.i||null!=a.list.f)return(0,s.MZ)(this.node.rawAttrs,t,e);if(null!=a.list.s)return(0,s.kP)(this.node.rawAttrs,t,e);if(null!=a.list.shape)return(0,s.Ph)(this.node.rawAttrs,t,e);if(null!=a.list.b)return(0,s.zJ)(this.node.rawAttrs,t,e);if(null!=a.list.type)return(0,s.$A)(this.node.rawAttrs,t,e)}return e}}var o=a(23470),m=a(37523),i=a(16054),u=a(60152),y=a(9258),d=a(89359),c=a(919),l=a(88991),f=a(77126),g=a(12644),N=a(30178),h=a(98990),b=a(53427);const Z=(t,e,a)=>{switch(t.op){case"BiasAdd":case"AddV2":case"Add":return[m.W((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"AddN":return[i.Q((0,r.Zg)("tensors",t,e,a))];case"FloorMod":case"Mod":return[u.z((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Mul":return[y.l((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"RealDiv":case"Div":return[d.y((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"DivNoNan":return[c.e((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"FloorDiv":return[l.w((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Sub":return[f.j((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Minimum":return[g.B((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Maximum":return[N.P((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Pow":return[h.n((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"SquaredDifference":return[b.P((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var x=a(4888),S=a(12804),T=a(37558),O=a(66841),_=a(50269),V=a(29580),v=a(21404),A=a(63774),k=a(30855),w=a(37148),D=a(99907),I=a(27451),M=a(83416),L=a(95207),z=a(8631),C=a(40517),F=a(15606),E=a(44010),P=a(12015),B=a(35040),R=a(96522),j=a(19870),q=a(1902),H=a(90112),W=a(25912),$=a(26325),G=a(28968),U=a(33726),K=a(51115),Y=a(58276),X=a(66030),Q=a(79348),J=a(45793),tt=a(57311),et=a(77823),at=a(96928),nt=a(83732),rt=a(17820),st=a(67771),pt=a(66919),ot=a(64394),mt=a(6300);const it=(t,e,a)=>{switch(t.op){case"Abs":case"ComplexAbs":return[x.t((0,r.Zg)("x",t,e,a))];case"Acos":return[S.H((0,r.Zg)("x",t,e,a))];case"Acosh":return[T.F((0,r.Zg)("x",t,e,a))];case"Asin":return[O.q((0,r.Zg)("x",t,e,a))];case"Asinh":return[_.y((0,r.Zg)("x",t,e,a))];case"Atan":return[V.r((0,r.Zg)("x",t,e,a))];case"Atan2":return[v.F((0,r.Zg)("x",t,e,a),(0,r.Zg)("y",t,e,a))];case"Atanh":return[A.r((0,r.Zg)("x",t,e,a))];case"Ceil":return[k.m((0,r.Zg)("x",t,e,a))];case"Complex":return[w.f((0,r.Zg)("real",t,e,a),(0,r.Zg)("imag",t,e,a))];case"Cos":return[D.g((0,r.Zg)("x",t,e,a))];case"Cosh":return[I.y((0,r.Zg)("x",t,e,a))];case"Elu":return[M.P((0,r.Zg)("x",t,e,a))];case"Erf":return[L.Y((0,r.Zg)("x",t,e,a))];case"Exp":return[z.o((0,r.Zg)("x",t,e,a))];case"Expm1":return[C.I((0,r.Zg)("x",t,e,a))];case"Floor":return[F.R((0,r.Zg)("x",t,e,a))];case"Log":return[E.R((0,r.Zg)("x",t,e,a))];case"Log1p":return[P.K((0,r.Zg)("x",t,e,a))];case"Imag":return[B.n((0,r.Zg)("x",t,e,a))];case"Neg":return[R.H((0,r.Zg)("x",t,e,a))];case"Reciprocal":return[j.V((0,r.Zg)("x",t,e,a))];case"Real":return[q.x((0,r.Zg)("x",t,e,a))];case"Relu":return[H.V((0,r.Zg)("x",t,e,a))];case"Round":return[W.L((0,r.Zg)("x",t,e,a))];case"Selu":return[$.W((0,r.Zg)("x",t,e,a))];case"Sigmoid":return[G.r((0,r.Zg)("x",t,e,a))];case"Sin":return[U.F((0,r.Zg)("x",t,e,a))];case"Sign":return[K._((0,r.Zg)("x",t,e,a))];case"Sinh":return[Y.L((0,r.Zg)("x",t,e,a))];case"Softplus":return[X.l((0,r.Zg)("x",t,e,a))];case"Sqrt":return[Q.R((0,r.Zg)("x",t,e,a))];case"Square":return[J.E((0,r.Zg)("x",t,e,a))];case"Tanh":return[tt.y((0,r.Zg)("x",t,e,a))];case"Tan":return[et.M((0,r.Zg)("x",t,e,a))];case"ClipByValue":return[at.z((0,r.Zg)("x",t,e,a),(0,r.Zg)("clipValueMin",t,e,a),(0,r.Zg)("clipValueMax",t,e,a))];case"Relu6":return[nt.j((0,r.Zg)("x",t,e,a))];case"Rsqrt":return[rt.Z((0,r.cS)(t.inputNames[0],e,a))];case"Prod":return[st._((0,r.Zg)("x",t,e,a),(0,r.Zg)("axes",t,e,a))];case"LeakyRelu":return[pt.H((0,r.Zg)("x",t,e,a),(0,r.Zg)("alpha",t,e,a))];case"Prelu":return[ot.N((0,r.Zg)("x",t,e,a),(0,r.Zg)("alpha",t,e,a))];case"IsNan":return[mt.y((0,r.cS)(t.inputNames[0],e,a))];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var ut=a(26105),yt=a(4282);const dt=async(t,e,a)=>{switch(t.op){case"If":case"StatelessIf":{const n=(0,r.Zg)("thenBranch",t,e,a),s=(0,r.Zg)("elseBranch",t,e,a),p=(0,r.Zg)("cond",t,e,a),o=(0,r.Zg)("args",t,e,a);return(await p.data())[0]?a.functionMap[n].executeFunctionAsync(o,a.tensorArrayMap,a.tensorListMap):a.functionMap[s].executeFunctionAsync(o,a.tensorArrayMap,a.tensorListMap)}case"While":case"StatelessWhile":{const n=(0,r.Zg)("body",t,e,a),s=(0,r.Zg)("cond",t,e,a),p=(0,r.Zg)("args",t,e,a),o=await a.functionMap[s].executeFunctionAsync(p,a.tensorArrayMap,a.tensorListMap),m=p.map((t=>t.id));let i=await o[0].data();o.forEach((t=>{t.kept||-1!==m.indexOf(t.id)||t.dispose()}));let u=p;for(;i[0];){const t=u;u=await a.functionMap[n].executeFunctionAsync(u,a.tensorArrayMap,a.tensorListMap);const e=u.map((t=>t.id));t.forEach((t=>{t.kept||-1!==m.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}));const r=await a.functionMap[s].executeFunctionAsync(u,a.tensorArrayMap,a.tensorListMap);i=await r[0].data(),r.forEach((t=>{t.kept||-1!==m.indexOf(t.id)||-1!==e.indexOf(t.id)||t.dispose()}))}return u}case"LoopCond":{const n=(0,r.Zg)("pred",t,e,a);return[(0,r.hV)(n)]}case"Switch":{const n=(0,r.Zg)("pred",t,e,a);let s=(0,r.Zg)("data",t,e,a);return s.kept||(s=(0,r.hV)(s)),(await n.data())[0]?[void 0,s]:[s,void 0]}case"Merge":{const n=t.inputNames.find((t=>void 0!==(0,r.cS)(t,e,a)));if(n){const t=(0,r.cS)(n,e,a);return[(0,r.hV)(t)]}return}case"Enter":{const n=(0,r.Zg)("frameName",t,e,a),s=(0,r.Zg)("tensor",t,e,a);return a.enterFrame(n),[(0,r.hV)(s)]}case"Exit":{const n=(0,r.Zg)("tensor",t,e,a);return a.exitFrame(),[(0,r.hV)(n)]}case"NextIteration":{const n=(0,r.Zg)("tensor",t,e,a);return a.nextIteration(),[(0,r.hV)(n)]}case"TensorArrayV3":{const s=(0,r.Zg)("size",t,e,a),p=(0,r.Zg)("dtype",t,e,a),o=(0,r.Zg)("elementShape",t,e,a),m=(0,r.Zg)("dynamicSize",t,e,a),i=(0,r.Zg)("clearAfterRead",t,e,a),u=(0,r.Zg)("identicalElementShapes",t,e,a),y=(0,r.Zg)("name",t,e,a),d=new ut.n(y,p,s,o,u,m,i);return a.addTensorArray(d),[d.idTensor,(0,n.scalar)(1)]}case"TensorArrayWriteV3":{const n=(0,r.Zg)("tensorArrayId",t,e,a),s=(0,r.Zg)("index",t,e,a),p=(0,r.Zg)("tensor",t,e,a),o=a.getTensorArray(n.id);return o.write(s,p),[o.idTensor]}case"TensorArrayReadV3":{const n=(0,r.Zg)("tensorArrayId",t,e,a),s=(0,r.Zg)("index",t,e,a);return[a.getTensorArray(n.id).read(s)]}case"TensorArrayGatherV3":{const n=(0,r.Zg)("tensorArrayId",t,e,a),s=(0,r.Zg)("indices",t,e,a),p=(0,r.Zg)("dtype",t,e,a);return[a.getTensorArray(n.id).gather(s,p)]}case"TensorArrayScatterV3":{const n=(0,r.Zg)("tensorArrayId",t,e,a),s=(0,r.Zg)("indices",t,e,a),p=(0,r.Zg)("tensor",t,e,a),o=a.getTensorArray(n.id);return o.scatter(s,p),[o.idTensor]}case"TensorArrayConcatV3":{const n=(0,r.Zg)("tensorArrayId",t,e,a),s=a.getTensorArray(n.id),p=(0,r.Zg)("dtype",t,e,a);return[s.concat(p)]}case"TensorArraySplitV3":{const n=(0,r.Zg)("tensorArrayId",t,e,a),s=(0,r.Zg)("tensor",t,e,a),p=(0,r.Zg)("lengths",t,e,a),o=a.getTensorArray(n.id);return o.split(p,s),[o.idTensor]}case"TensorArraySizeV3":{const s=(0,r.Zg)("tensorArrayId",t,e,a),p=a.getTensorArray(s.id);return[(0,n.scalar)(p.size(),"int32")]}case"TensorArrayCloseV3":{const n=(0,r.Zg)("tensorArrayId",t,e,a),s=a.getTensorArray(n.id);return s.clearAndClose(),[s.idTensor]}case"TensorListSetItem":{const n=(0,r.Zg)("tensorListId",t,e,a),s=(0,r.Zg)("index",t,e,a),p=(0,r.Zg)("tensor",t,e,a),o=a.getTensorList(n.id);return o.setItem(s,p),[o.idTensor]}case"TensorListGetItem":{const n=(0,r.Zg)("tensorListId",t,e,a),s=(0,r.Zg)("index",t,e,a),p=(0,r.Zg)("elementShape",t,e,a),o=(0,r.Zg)("elementDType",t,e,a);return[a.getTensorList(n.id).getItem(s,p,o)]}case"TensorListScatterV2":case"TensorListScatter":{const n=(0,r.Zg)("indices",t,e,a),s=(0,r.Zg)("tensor",t,e,a),p=(0,r.Zg)("elementShape",t,e,a),o=(0,r.Zg)("numElements",t,e,a),m=(0,yt.Tb)(s,n,p,o);return a.addTensorList(m),[m.idTensor]}case"TensorListReserve":case"EmptyTensorList":{const n=(0,r.Zg)("elementShape",t,e,a),s=(0,r.Zg)("elementDType",t,e,a);let p;p="TensorListReserve"===t.op?"numElements":"maxNumElements";const o=(0,r.Zg)(p,t,e,a),m=(0,yt.vY)(n,s,o);return a.addTensorList(m),[m.idTensor]}case"TensorListGather":{const n=(0,r.Zg)("tensorListId",t,e,a),s=(0,r.Zg)("indices",t,e,a),p=(0,r.Zg)("elementShape",t,e,a),o=(0,r.Zg)("elementDType",t,e,a);return[a.getTensorList(n.id).gather(s,o,p)]}case"TensorListStack":{const n=(0,r.Zg)("tensorListId",t,e,a),s=(0,r.Zg)("elementShape",t,e,a),p=(0,r.Zg)("elementDType",t,e,a),o=(0,r.Zg)("numElements",t,e,a);return[a.getTensorList(n.id).stack(s,p,o)]}case"TensorListFromTensor":{const n=(0,r.Zg)("tensor",t,e,a),s=(0,r.Zg)("elementShape",t,e,a),p=(0,r.Zg)("elementDType",t,e,a),o=(0,yt.uK)(n,s,p);return a.addTensorList(o),[o.idTensor]}case"TensorListConcat":{const n=(0,r.Zg)("tensorListId",t,e,a),s=a.getTensorList(n.id),p=(0,r.Zg)("dtype",t,e,a),o=(0,r.Zg)("elementShape",t,e,a);return[s.concat(p,o)]}case"TensorListPushBack":{const n=(0,r.Zg)("tensorListId",t,e,a),s=(0,r.Zg)("tensor",t,e,a),p=a.getTensorList(n.id);return p.pushBack(s),[p.idTensor]}case"TensorListPopBack":{const n=(0,r.Zg)("tensorListId",t,e,a),s=(0,r.Zg)("elementShape",t,e,a),p=(0,r.Zg)("elementDType",t,e,a);return[a.getTensorList(n.id).popBack(s,p)]}case"TensorListSplit":{const n=(0,r.Zg)("tensor",t,e,a),s=(0,r.Zg)("elementShape",t,e,a),p=(0,r.Zg)("lengths",t,e,a),o=(0,yt.lD)(n,p,s);return a.addTensorList(o),[o.idTensor]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};var ct=a(3701),lt=a(28794),ft=a(93502),gt=a(91624),Nt=a(41106),ht=a(10676),bt=a(90167),Zt=a(53909),xt=a(86999),St=a(45243),Tt=a(53855),Ot=a(14349),_t=a(93002);function Vt(t,e,a){const[n,s]=(0,r.Zg)("fusedOps",t,e,a),p="biasadd"===n,o="prelu"===s,m="fusedbatchnorm"===n,i=(0,r.Zg)("numArgs",t,e,a);if(p){if(o&&2!==i)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==i)throw new Error("FusedConv2d and DepthwiseConv2d with BiasAdd must have one extra argument: bias.")}if(m)throw new Error("FusedConv2d and DepthwiseConv2d with FusedBatchNorm is not supported");const u=(0,r.Zg)("strides",t,e,a),y=(0,r.Cq)(t,e,a),d=(0,r.Zg)("dataFormat",t,e,a).toUpperCase(),c=(0,r.Zg)("dilations",t,e,a),[l,f]=(0,r.Zg)("args",t,e,a);return{stride:u,pad:y,dataFormat:d,dilations:c,biasArg:l,preluArg:f,activationFunc:s,leakyreluAlpha:(0,r.Zg)("leakyreluAlpha",t,e,a)}}const vt=(t,e,a)=>{switch(t.op){case"Conv1D":{const n=(0,r.Zg)("stride",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("dataFormat",t,e,a).toUpperCase(),o=(0,r.Zg)("dilation",t,e,a);return[ct.k((0,r.Zg)("x",t,e,a),(0,r.Zg)("filter",t,e,a),n,s,p,o)]}case"Conv2D":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Cq)(t,e,a),p=(0,r.Zg)("dataFormat",t,e,a).toUpperCase(),o=(0,r.Zg)("dilations",t,e,a);return[lt.X((0,r.Zg)("x",t,e,a),(0,r.Zg)("filter",t,e,a),[n[1],n[2]],s,p,[o[1],o[2]])]}case"_FusedConv2D":{const{stride:n,pad:s,dataFormat:p,dilations:o,biasArg:m,preluArg:i,activationFunc:u,leakyreluAlpha:y}=Vt(t,e,a);return[ft.X({x:(0,r.Zg)("x",t,e,a),filter:(0,r.Zg)("filter",t,e,a),strides:[n[1],n[2]],pad:s,dataFormat:p,dilations:[o[1],o[2]],bias:m,activation:u,preluActivationWeights:i,leakyreluAlpha:y})]}case"FusedDepthwiseConv2dNative":{const{stride:n,pad:s,dataFormat:p,dilations:o,biasArg:m,preluArg:i,activationFunc:u,leakyreluAlpha:y}=Vt(t,e,a);return[gt.G({x:(0,r.Zg)("x",t,e,a),filter:(0,r.Zg)("filter",t,e,a),strides:[n[1],n[2]],pad:s,dataFormat:p,dilations:[o[1],o[2]],bias:m,activation:u,preluActivationWeights:i,leakyreluAlpha:y})]}case"Conv2DBackpropInput":case"Conv2dTranspose":{const n=(0,r.Zg)("outputShape",t,e,a),s=(0,r.Zg)("strides",t,e,a),p=(0,r.Cq)(t,e,a);return[Nt.w((0,r.Zg)("x",t,e,a),(0,r.Zg)("filter",t,e,a),n,[s[1],s[2]],p)]}case"DepthwiseConv2dNative":case"DepthwiseConv2d":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Cq)(t,e,a),p=(0,r.Zg)("dilations",t,e,a),o=(0,r.Zg)("dataFormat",t,e,a).toUpperCase();return[ht.G((0,r.Zg)("input",t,e,a),(0,r.Zg)("filter",t,e,a),[n[1],n[2]],s,o,[p[1],p[2]])]}case"Conv3D":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("dataFormat",t,e,a).toUpperCase(),o=(0,r.Zg)("dilations",t,e,a);return[bt.I((0,r.Zg)("x",t,e,a),(0,r.Zg)("filter",t,e,a),[n[1],n[2],n[3]],s,p,[o[1],o[2],o[3]])]}case"AvgPool":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("kernelSize",t,e,a);return[Zt.$((0,r.Zg)("x",t,e,a),[p[1],p[2]],[n[1],n[2]],s)]}case"MaxPool":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("kernelSize",t,e,a);return[xt.j((0,r.Zg)("x",t,e,a),[p[1],p[2]],[n[1],n[2]],s)]}case"MaxPoolWithArgmax":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("kernelSize",t,e,a),o=(0,r.Zg)("includeBatchInIndex",t,e,a),{result:m,indexes:i}=St.R((0,r.Zg)("x",t,e,a),[p[1],p[2]],[n[1],n[2]],s,o);return[m,i]}case"AvgPool3D":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("kernelSize",t,e,a);return[Tt.s((0,r.Zg)("x",t,e,a),[p[1],p[2],p[3]],[n[1],n[2],n[3]],s)]}case"MaxPool3D":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("kernelSize",t,e,a);return[Ot.e((0,r.Zg)("x",t,e,a),[p[1],p[2],p[3]],[n[1],n[2],n[3]],s)]}case"Dilation2D":{const n=(0,r.Zg)("strides",t,e,a),s=(0,r.Zg)("pad",t,e,a),p=(0,r.Zg)("dilations",t,e,a),o=n[1],m=n[2],i=p[1],u=p[2];return[_t.X((0,r.Zg)("x",t,e,a),(0,r.Zg)("filter",t,e,a),[o,m],s,[i,u],"NHWC")]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};var At=a(96111),kt=a(46545),wt=a(71781),Dt=a(11760),It=a(61411),Mt=a(69885),Lt=a(79546),zt=a(44645),Ct=a(97858),Ft=a(42855),Et=a(55537);const Pt=(t,e,a)=>{switch(t.op){case"Fill":{const n=(0,r.Zg)("shape",t,e,a),s=(0,r.Zg)("dtype",t,e,a),p=(0,r.Zg)("value",t,e,a);return[At.G(n,p,s)]}case"LinSpace":{const n=(0,r.Zg)("start",t,e,a),s=(0,r.Zg)("stop",t,e,a),p=(0,r.Zg)("num",t,e,a);return[kt.m(n,s,p)]}case"Multinomial":{const n=(0,r.Zg)("logits",t,e,a),s=(0,r.Zg)("numSamples",t,e,a),p=(0,r.Zg)("seed",t,e,a);return[wt.O(n,s,p)]}case"OneHot":{const n=(0,r.Zg)("indices",t,e,a),s=(0,r.Zg)("depth",t,e,a),p=(0,r.Zg)("onValue",t,e,a),o=(0,r.Zg)("offValue",t,e,a);return[Dt.M(n,s,p,o)]}case"Ones":return[It.S((0,r.Zg)("shape",t,e,a),(0,r.Zg)("dtype",t,e,a))];case"OnesLike":return[Mt.P((0,r.Zg)("x",t,e,a))];case"RandomUniform":return[Lt.Y((0,r.Zg)("shape",t,e,a),(0,r.Zg)("minval",t,e,a),(0,r.Zg)("maxval",t,e,a),(0,r.Zg)("dtype",t,e,a))];case"Range":{const n=(0,r.Zg)("start",t,e,a),s=(0,r.Zg)("stop",t,e,a),p=(0,r.Zg)("step",t,e,a);return[zt.y(n,s,p,(0,r.Zg)("dtype",t,e,a))]}case"TruncatedNormal":{const n=(0,r.Zg)("shape",t,e,a),s=(0,r.Zg)("mean",t,e,a),p=(0,r.Zg)("stdDev",t,e,a),o=(0,r.Zg)("seed",t,e,a);return[Ct.e(n,s,p,(0,r.Zg)("dtype",t,e,a),o)]}case"Zeros":return[Ft.U((0,r.Zg)("shape",t,e,a),(0,r.Zg)("dtype",t,e,a))];case"ZerosLike":return[Et.P((0,r.Zg)("x",t,e,a))];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var Bt=a(33873),Rt=a(29809),jt=a(44271),qt=a(23325);function Ht(t,e,a){return{boxes:(0,r.Zg)("boxes",t,e,a),scores:(0,r.Zg)("scores",t,e,a),maxOutputSize:(0,r.Zg)("maxOutputSize",t,e,a),iouThreshold:(0,r.Zg)("iouThreshold",t,e,a),scoreThreshold:(0,r.Zg)("scoreThreshold",t,e,a),softNmsSigma:(0,r.Zg)("softNmsSigma",t,e,a)}}const Wt=async(t,e,a)=>{switch(t.op){case"NonMaxSuppressionV5":{const{boxes:n,scores:r,maxOutputSize:s,iouThreshold:p,scoreThreshold:o,softNmsSigma:m}=Ht(t,e,a),i=await Bt.Slp.nonMaxSuppressionWithScoreAsync(n,r,s,p,o,m);return[i.selectedIndices,i.selectedScores]}case"NonMaxSuppressionV4":{const{boxes:n,scores:s,maxOutputSize:p,iouThreshold:o,scoreThreshold:m}=Ht(t,e,a),i=(0,r.Zg)("padToMaxOutputSize",t,e,a),u=await Bt.Slp.nonMaxSuppressionPaddedAsync(n,s,p,o,m,i);return[u.selectedIndices,u.validOutputs]}case"NonMaxSuppressionV3":case"NonMaxSuppressionV2":{const{boxes:n,scores:r,maxOutputSize:s,iouThreshold:p,scoreThreshold:o}=Ht(t,e,a);return[await Bt.Slp.nonMaxSuppressionAsync(n,r,s,p,o)]}case"Where":{const n=Rt.w((0,r.Zg)("condition",t,e,a),"bool"),s=[await jt.Y(n)];return n.dispose(),s}case"ListDiff":return qt.F((0,r.Zg)("x",t,e,a),(0,r.Zg)("y",t,e,a));default:throw TypeError(`Node type ${t.op} is not implemented`)}};var $t=a(21190),Gt=a(73937);const Ut=(t,e,a)=>{switch(t.op){case"TopKV2":{const n=(0,r.Zg)("x",t,e,a),s=(0,r.Zg)("k",t,e,a),p=(0,r.Zg)("sorted",t,e,a),o=$t.r(n,s,p);return[o.values,o.indices]}case"Unique":{const n=(0,r.Zg)("x",t,e,a),s=Gt.A(n);return[s.values,s.indices]}case"UniqueV2":{const n=(0,r.Zg)("x",t,e,a),s=(0,r.Zg)("axis",t,e,a),p=Gt.A(n,s);return[p.values,p.indices]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};var Kt=a(62018),Yt=a(45702);const Xt=(t,e,a)=>{switch(t.op){case"Const":return e[t.name];case"PlaceholderWithDefault":const n=(0,r.Zg)("default",t,e,a);return[(0,r.cS)(t.name,e,a)||n];case"Placeholder":return[(0,r.cS)(t.name,e,a)];case"Identity":case"StopGradient":case"FakeQuantWithMinMaxVars":{const n=(0,r.Zg)("x",t,e,a);return[(0,r.hV)(n)]}case"IdentityN":return(0,r.Zg)("x",t,e,a).map((t=>(0,r.hV)(t)));case"Snapshot":const s=(0,r.Zg)("x",t,e,a);return[(0,r.hV)(s)];case"Shape":return[Kt.t((0,r.Zg)("x",t,e,a).shape,"int32")];case"ShapeN":return(0,r.Zg)("x",t,e,a).map((t=>Kt.t(t.shape)));case"Size":return[Yt.d((0,r.Zg)("x",t,e,a).size,"int32")];case"Rank":return[Yt.d((0,r.Zg)("x",t,e,a).rank,"int32")];case"NoOp":return[Yt.d(1)];case"Print":const p=(0,r.Zg)("x",t,e,a),o=(0,r.Zg)("data",t,e,a);(0,r.Zg)("message",t,e,a),(0,r.Zg)("summarize",t,e,a);for(let t=0;t<o.length;t++);return[p];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var Qt=a(24853);const Jt=async(t,e,a,n)=>{switch(t.op){case"HashTable":case"HashTableV2":{const s=(0,r.Zg)("keyDType",t,e,a),p=(0,r.Zg)("valueDType",t,e,a),o=new Qt.J(s,p);return n.addHashTable(t.name,o),[o.handle]}case"LookupTableImport":case"LookupTableImportV2":{const s=(0,r.Zg)("tableHandle",t,e,a,n),p=(0,r.Zg)("keys",t,e,a),o=(0,r.Zg)("values",t,e,a),m=n.getHashTableById(s.id);return[await m.import(p,o)]}case"LookupTableFind":case"LookupTableFindV2":{const s=(0,r.Zg)("tableHandle",t,e,a,n),p=(0,r.Zg)("keys",t,e,a),o=(0,r.Zg)("defaultValue",t,e,a),m=n.getHashTableById(s.id);return[await m.find(p,o)]}case"LookupTableSize":case"LookupTableSizeV2":{const s=(0,r.Zg)("tableHandle",t,e,a,n);return[n.getHashTableById(s.id).tensorSize()]}default:throw TypeError(`Node type ${t.op} is not implemented`)}},te=(t,e,a)=>{switch(t.op){case"ResizeBilinear":{const n=(0,r.Zg)("images",t,e,a),s=(0,r.Zg)("size",t,e,a),p=(0,r.Zg)("alignCorners",t,e,a),o=(0,r.Zg)("halfPixelCenters",t,e,a);return[Bt.Slp.resizeBilinear(n,[s[0],s[1]],p,o)]}case"ResizeNearestNeighbor":{const n=(0,r.Zg)("images",t,e,a),s=(0,r.Zg)("size",t,e,a),p=(0,r.Zg)("alignCorners",t,e,a),o=(0,r.Zg)("halfPixelCenters",t,e,a);return[Bt.Slp.resizeNearestNeighbor(n,[s[0],s[1]],p,o)]}case"CropAndResize":{const n=(0,r.Zg)("image",t,e,a),s=(0,r.Zg)("boxes",t,e,a),p=(0,r.Zg)("boxInd",t,e,a),o=(0,r.Zg)("cropSize",t,e,a),m=(0,r.Zg)("method",t,e,a),i=(0,r.Zg)("extrapolationValue",t,e,a);return[Bt.Slp.cropAndResize(n,s,p,o,m,i)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};var ee=a(13020),ae=a(42118),ne=a(62058),re=a(13337),se=a(61303),pe=a(56508),oe=a(13789),me=a(89881),ie=a(9879),ue=a(12151);const ye=(t,e,a)=>{switch(t.op){case"Equal":return[ee.L((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"NotEqual":return[ae.E((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Greater":return[ne.r((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"GreaterEqual":return[re.D((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Less":return[se.M((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"LessEqual":return[pe.I((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"LogicalAnd":return[oe.n((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"LogicalNot":return[me.N((0,r.Zg)("a",t,e,a))];case"LogicalOr":return[ie.z((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];case"Select":case"SelectV2":return[ue._((0,r.Zg)("condition",t,e,a),(0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a))];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var de=a(65703),ce=a(79853),le=a(7703),fe=a(30099);const ge=(t,e,a)=>{switch(t.op){case"BatchMatMul":case"BatchMatMulV2":case"MatMul":return[de.N((0,r.Zg)("a",t,e,a),(0,r.Zg)("b",t,e,a),(0,r.Zg)("transposeA",t,e,a),(0,r.Zg)("transposeB",t,e,a))];case"Einsum":return[ce._((0,r.Zg)("equation",t,e,a),...(0,r.Zg)("tensors",t,e,a))];case"Transpose":return[le.m((0,r.Zg)("x",t,e,a),(0,r.Zg)("perm",t,e,a))];case"_FusedMatMul":const[n,s]=(0,r.Zg)("fusedOps",t,e,a),p="biasadd"===n,o="prelu"===s,m=(0,r.Zg)("numArgs",t,e,a),i=(0,r.Zg)("leakyreluAlpha",t,e,a);if(p){if(o&&2!==m)throw new Error("Fused MatMul with BiasAdd and Prelu must have two extra arguments: bias and alpha.");if(!o&&1!==m)throw new Error("Fused MatMul with BiasAdd must have one extra argument: bias.")}const[u,y]=(0,r.Zg)("args",t,e,a);return[fe.N({a:(0,r.Zg)("a",t,e,a),b:(0,r.Zg)("b",t,e,a),transposeA:(0,r.Zg)("transposeA",t,e,a),transposeB:(0,r.Zg)("transposeB",t,e,a),bias:u,activation:s,preluActivationWeights:y,leakyreluAlpha:i})];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var Ne=a(9160),he=a(93531),be=a(26346),Ze=a(97991),xe=a(96654);const Se=(t,e,a)=>{switch(t.op){case"FusedBatchNorm":case"FusedBatchNormV2":case"FusedBatchNormV3":return[Ne.$((0,r.Zg)("x",t,e,a),(0,r.Zg)("mean",t,e,a),(0,r.Zg)("variance",t,e,a),(0,r.Zg)("offset",t,e,a),(0,r.Zg)("scale",t,e,a),(0,r.Zg)("epsilon",t,e,a))];case"LRN":return[he.K((0,r.Zg)("x",t,e,a),(0,r.Zg)("radius",t,e,a),(0,r.Zg)("bias",t,e,a),(0,r.Zg)("alpha",t,e,a),(0,r.Zg)("beta",t,e,a))];case"Softmax":return[be.V((0,r.Zg)("x",t,e,a))];case"LogSoftmax":return[Ze.H((0,r.Zg)("x",t,e,a))];case"SparseToDense":return[xe.Z((0,r.Zg)("sparseIndices",t,e,a),(0,r.Zg)("outputShape",t,e,a),(0,r.Zg)("sparseValues",t,e,a),(0,r.Zg)("defaultValue",t,e,a))];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var Te=a(41938),Oe=a(12611),_e=a(57436),Ve=a(83791),ve=a(12307),Ae=a(89326),ke=a(10897),we=a(54339),De=a(76808),Ie=a(40758),Me=a(77974);const Le=(t,e,a)=>{switch(t.op){case"Max":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("keepDims",t,e,a);return[Te.T((0,r.Zg)("x",t,e,a),n,s)]}case"Mean":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("keepDims",t,e,a);return[Oe.i((0,r.Zg)("x",t,e,a),n,s)]}case"Min":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("keepDims",t,e,a);return[_e.j((0,r.Zg)("x",t,e,a),n,s)]}case"Sum":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("keepDims",t,e,a);return[Ve.c((0,r.Zg)("x",t,e,a),n,s)]}case"All":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("keepDims",t,e,a);return[ve.Q((0,r.Zg)("x",t,e,a),n,s)]}case"Any":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("keepDims",t,e,a);return[Ae.b((0,r.Zg)("x",t,e,a),n,s)]}case"ArgMax":{const n=(0,r.Zg)("axis",t,e,a);return[ke.F((0,r.Zg)("x",t,e,a),n)]}case"ArgMin":{const n=(0,r.Zg)("axis",t,e,a);return[we.X((0,r.Zg)("x",t,e,a),n)]}case"Prod":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("keepDims",t,e,a);return[st._((0,r.Zg)("x",t,e,a),n,s)]}case"Cumsum":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("exclusive",t,e,a),p=(0,r.Zg)("reverse",t,e,a);return[De.r((0,r.Zg)("x",t,e,a),n,s,p)]}case"Bincount":const n=(0,r.Zg)("x",t,e,a),s=(0,r.Zg)("weights",t,e,a),p=(0,r.Zg)("size",t,e,a);return[Ie.H(n,s,p)];case"DenseBincount":{const n=(0,r.Zg)("x",t,e,a),s=(0,r.Zg)("weights",t,e,a),p=(0,r.Zg)("size",t,e,a),o=(0,r.Zg)("binaryOutput",t,e,a);return[Me.a(n,s,p,o)]}default:throw TypeError(`Node type ${t.op} is not implemented`)}};var ze=a(25030),Ce=a(48229),Fe=a(53262),Ee=a(17986),Pe=a(45894),Be=a(5932),Re=a(62302),je=a(54268),qe=a(67261),He=a(64826),We=a(66512),$e=a(94791),Ge=a(55598);const Ue=(t,e,a)=>{switch(t.op){case"ConcatV2":case"Concat":{const n=(0,r.Zg)("n",t,e,a),s=(0,r.Zg)("axis",t,e,a);let p=(0,r.Zg)("tensors",t,e,a);return p=p.slice(0,n),[ze.x(p,s)]}case"Gather":{const n=(0,r.Zg)("x",t,e,a),s=(0,r.Zg)("indices",t,e,a);return[Ce.k(n,Rt.w(s,"int32"),0)]}case"GatherV2":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("batchDims",t,e,a),p=(0,r.Zg)("x",t,e,a),o=(0,r.Zg)("indices",t,e,a);return[Ce.k(p,Rt.w(o,"int32"),n,s)]}case"Reverse":{const n=(0,r.Zg)("dims",t,e,a),s=[];for(let t=0;t<n.length;t++)n[t]&&s.push(t);const p=(0,r.Zg)("x",t,e,a);return[Fe.B(p,s)]}case"ReverseV2":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("x",t,e,a);return[Fe.B(s,n)]}case"Slice":{const n=(0,r.Zg)("begin",t,e,a),s=(0,r.Zg)("size",t,e,a);return[Ee.d((0,r.Zg)("x",t,e,a),n,s)]}case"StridedSlice":{const n=(0,r.Zg)("begin",t,e,a),s=(0,r.Zg)("end",t,e,a),p=(0,r.Zg)("strides",t,e,a),o=(0,r.Zg)("beginMask",t,e,a),m=(0,r.Zg)("endMask",t,e,a),i=(0,r.Zg)("ellipsisMask",t,e,a),u=(0,r.Zg)("newAxisMask",t,e,a),y=(0,r.Zg)("shrinkAxisMask",t,e,a),d=(0,r.Zg)("x",t,e,a);return[Pe.Y(d,n,s,p,o,m,i,u,y)]}case"Pack":return(0,n.tidy)((()=>{const s=(0,r.Zg)("axis",t,e,a),p=(0,r.Zg)("tensors",t,e,a),o=p[0].shape,m=Be.r(p[0]).shape,i=p.map((t=>{const e=n.util.arraysEqual(t.shape,o);if(!e&&!n.util.arraysEqual(Be.r(t).shape,m))throw new Error("the input tensors shape does not match");return e?t:Re.t(t,o)}));return[je.t(i,s)]}));case"Unpack":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("tensor",t,e,a);return qe.K(s,n)}case"Tile":{const n=(0,r.Zg)("reps",t,e,a);return[He.V((0,r.Zg)("x",t,e,a),n)]}case"Split":case"SplitV":{const n=(0,r.Zg)("axis",t,e,a),s=(0,r.Zg)("numOrSizeSplits",t,e,a),p=(0,r.Zg)("x",t,e,a);return We.l(p,s,n)}case"ScatterNd":{const n=(0,r.Zg)("indices",t,e,a),s=(0,r.Zg)("values",t,e,a),p=(0,r.Zg)("shape",t,e,a);return[$e.N(n,s,p)]}case"GatherNd":{const n=(0,r.Zg)("x",t,e,a),s=(0,r.Zg)("indices",t,e,a);return[Ge.S(n,s)]}case"SparseToDense":{const n=(0,r.Zg)("sparseIndices",t,e,a),s=(0,r.Zg)("outputShape",t,e,a),p=(0,r.Zg)("sparseValues",t,e,a),o=(0,r.Zg)("defaultValue",t,e,a);return[xe.Z(n,p,s,p.dtype===o.dtype?o:Rt.w(o,p.dtype))]}default:throw TypeError(`Node type ${t.op} is not implemented`)}},Ke=(t,e,a)=>{if("SparseReshape"===t.op){const{outputIndices:n,outputShape:s}=Bt.lMo.sparseReshape((0,r.Zg)("inputIndices",t,e,a),(0,r.Zg)("inputShape",t,e,a),(0,r.Zg)("newShape",t,e,a));return[n,s]}throw TypeError(`Node type ${t.op} is not implemented`)};var Ye=a(41361),Xe=a(13108),Qe=a(8775),Je=a(22292);const ta=(t,e,a)=>{switch(t.op){case"FFT":return[Ye.h((0,r.Zg)("x",t,e,a))];case"IFFT":return[Xe.K((0,r.Zg)("x",t,e,a))];case"RFFT":return[Qe.z((0,r.Zg)("x",t,e,a))];case"IRFFT":return[Je.g((0,r.Zg)("x",t,e,a))];default:throw TypeError(`Node type ${t.op} is not implemented`)}};var ea=a(8710),aa=a(66567),na=a(65661),ra=a(10776),sa=a(69772),pa=a(31216),oa=a(63567);const ma=(t,e,a)=>{switch(t.op){case"Cast":return[Rt.w((0,r.Zg)("x",t,e,a),(0,r.Zg)("dtype",t,e,a))];case"ExpandDims":{const n=(0,r.Zg)("axis",t,e,a);return[ea.U((0,r.Zg)("x",t,e,a),n)]}case"Squeeze":{const n=(0,r.Zg)("axis",t,e,a);return[Be.r((0,r.Zg)("x",t,e,a),n)]}case"Reshape":return[Re.t((0,r.Zg)("x",t,e,a),(0,r.Zg)("shape",t,e,a))];case"MirrorPad":return[aa.F((0,r.Zg)("x",t,e,a),(0,r.Zg)("padding",t,e,a),(0,r.Zg)("mode",t,e,a))];case"PadV2":case"Pad":return[na.e((0,r.Zg)("x",t,e,a),(0,r.Zg)("padding",t,e,a),(0,r.Zg)("constantValue",t,e,a))];case"SpaceToBatchND":{const n=(0,r.Zg)("blockShape",t,e,a),s=(0,r.Zg)("paddings",t,e,a);return[ra.e((0,r.Zg)("x",t,e,a),n,s)]}case"BatchToSpaceND":{const n=(0,r.Zg)("blockShape",t,e,a),s=(0,r.Zg)("crops",t,e,a);return[sa.G((0,r.Zg)("x",t,e,a),n,s)]}case"DepthToSpace":{const n=(0,r.Zg)("blockSize",t,e,a),s=(0,r.Zg)("dataFormat",t,e,a).toUpperCase();return[pa.R((0,r.Zg)("x",t,e,a),n,s)]}case"BroadcastTo":return[oa.h((0,r.Zg)("x",t,e,a),(0,r.Zg)("shape",t,e,a))];default:throw TypeError(`Node type ${t.op} is not implemented`)}};function ia(t,e,a,r){const s=((t,e,a)=>{switch(t.category){case"arithmetic":return n.tidy((()=>Z(t,e,a)));case"basic_math":return n.tidy((()=>it(t,e,a)));case"control":return dt(t,e,a);case"convolution":return n.tidy((()=>vt(t,e,a)));case"creation":return n.tidy((()=>Pt(t,e,a)));case"dynamic":return Wt(t,e,a);case"evaluation":return n.tidy((()=>Ut(t,e,a)));case"image":return n.tidy((()=>te(t,e,a)));case"graph":return n.tidy((()=>Xt(t,e,a)));case"logical":return n.tidy((()=>ye(t,e,a)));case"matrices":return n.tidy((()=>ge(t,e,a)));case"normalization":return n.tidy((()=>Se(t,e,a)));case"reduction":return n.tidy((()=>Le(t,e,a)));case"slice_join":return n.tidy((()=>Ue(t,e,a)));case"sparse":return n.tidy((()=>Ke(t,e,a)));case"spectral":return n.tidy((()=>ta(t,e,a)));case"transformation":return n.tidy((()=>ma(t,e,a)));case"hash_table":return Jt(t,e,a,r);case"custom":const s=(0,o._e)(t.op);if(s&&s.customExecutor)return s.customExecutor(new p(t,e,a));throw TypeError(`Custom op ${t.op} is not registered.`);default:throw TypeError(`Unknown op '${t.op}'. File an issue at https://github.com/tensorflow/tfjs/issues so we can add it, or register a custom execution with tf.registerOp()`)}})(t,e,a);return n.util.isPromise(s)?s.then((t=>[].concat(t))):[].concat(s)}},96820:function(t,e,a){a.d(e,{r:function(){return n}});const n="3.6.0"}}]);
//# sourceMappingURL=stylist-vendors-ef10862d.372f0e591f6ce36ae790.js.map