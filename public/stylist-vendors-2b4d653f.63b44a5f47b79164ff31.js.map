{"version":3,"file":"stylist-vendors-2b4d653f.63b44a5f47b79164ff31.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/io/indexed_db.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/io/io_utils.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport '../flags';\nimport { env } from '../environment';\nimport { getModelArtifactsInfoForJSON } from './io_utils';\nimport { IORouterRegistry } from './router_registry';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nconst DATABASE_NAME = 'tensorflowjs';\nconst DATABASE_VERSION = 1;\n// Model data and ModelArtifactsInfo (metadata) are stored in two separate\n// stores for efficient access of the list of stored models and their metadata.\n// 1. The object store for model data: topology, weights and weight manifests.\nconst MODEL_STORE_NAME = 'models_store';\n// 2. The object store for ModelArtifactsInfo, including meta-information such\n//    as the type of topology (JSON vs binary), byte size of the topology, byte\n//    size of the weights, etc.\nconst INFO_STORE_NAME = 'model_info_store';\n/**\n * Delete the entire database for tensorflow.js, including the models store.\n */\nexport async function deleteDatabase() {\n    const idbFactory = getIndexedDBFactory();\n    return new Promise((resolve, reject) => {\n        const deleteRequest = idbFactory.deleteDatabase(DATABASE_NAME);\n        deleteRequest.onsuccess = () => resolve();\n        deleteRequest.onerror = error => reject(error);\n    });\n}\nfunction getIndexedDBFactory() {\n    if (!env().getBool('IS_BROWSER')) {\n        // TODO(cais): Add more info about what IOHandler subtypes are available.\n        //   Maybe point to a doc page on the web and/or automatically determine\n        //   the available IOHandlers and print them in the error message.\n        throw new Error('Failed to obtain IndexedDB factory because the current environment' +\n            'is not a web browser.');\n    }\n    // tslint:disable-next-line:no-any\n    const theWindow = typeof window === 'undefined' ? self : window;\n    const factory = theWindow.indexedDB || theWindow.mozIndexedDB ||\n        theWindow.webkitIndexedDB || theWindow.msIndexedDB ||\n        theWindow.shimIndexedDB;\n    if (factory == null) {\n        throw new Error('The current browser does not appear to support IndexedDB.');\n    }\n    return factory;\n}\nfunction setUpDatabase(openRequest) {\n    const db = openRequest.result;\n    db.createObjectStore(MODEL_STORE_NAME, { keyPath: 'modelPath' });\n    db.createObjectStore(INFO_STORE_NAME, { keyPath: 'modelPath' });\n}\n/**\n * IOHandler subclass: Browser IndexedDB.\n *\n * See the doc string of `browserIndexedDB` for more details.\n */\nclass BrowserIndexedDB {\n    constructor(modelPath) {\n        this.indexedDB = getIndexedDBFactory();\n        if (modelPath == null || !modelPath) {\n            throw new Error('For IndexedDB, modelPath must not be null, undefined or empty.');\n        }\n        this.modelPath = modelPath;\n    }\n    async save(modelArtifacts) {\n        // TODO(cais): Support saving GraphDef models.\n        if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n            throw new Error('BrowserLocalStorage.save() does not support saving model topology ' +\n                'in binary formats yet.');\n        }\n        return this.databaseAction(this.modelPath, modelArtifacts);\n    }\n    async load() {\n        return this.databaseAction(this.modelPath);\n    }\n    /**\n     * Perform database action to put model artifacts into or read model artifacts\n     * from IndexedDB object store.\n     *\n     * Whether the action is put or get depends on whether `modelArtifacts` is\n     * specified. If it is specified, the action will be put; otherwise the action\n     * will be get.\n     *\n     * @param modelPath A unique string path for the model.\n     * @param modelArtifacts If specified, it will be the model artifacts to be\n     *   stored in IndexedDB.\n     * @returns A `Promise` of `SaveResult`, if the action is put, or a `Promise`\n     *   of `ModelArtifacts`, if the action is get.\n     */\n    databaseAction(modelPath, modelArtifacts) {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                if (modelArtifacts == null) {\n                    // Read model out from object store.\n                    const modelTx = db.transaction(MODEL_STORE_NAME, 'readonly');\n                    const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                    const getRequest = modelStore.get(this.modelPath);\n                    getRequest.onsuccess = () => {\n                        if (getRequest.result == null) {\n                            db.close();\n                            return reject(new Error(`Cannot find model with path '${this.modelPath}' ` +\n                                `in IndexedDB.`));\n                        }\n                        else {\n                            resolve(getRequest.result.modelArtifacts);\n                        }\n                    };\n                    getRequest.onerror = error => {\n                        db.close();\n                        return reject(getRequest.error);\n                    };\n                    modelTx.oncomplete = () => db.close();\n                }\n                else {\n                    // Put model into object store.\n                    // Concatenate all the model weights into a single ArrayBuffer. Large\n                    // models (~1GB) have problems saving if they are not concatenated.\n                    // TODO(mattSoulanille): Save large models to multiple indexeddb\n                    // records.\n                    modelArtifacts.weightData = CompositeArrayBuffer.join(modelArtifacts.weightData);\n                    const modelArtifactsInfo = getModelArtifactsInfoForJSON(modelArtifacts);\n                    // First, put ModelArtifactsInfo into info store.\n                    const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                    let infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                    let putInfoRequest;\n                    try {\n                        putInfoRequest =\n                            infoStore.put({ modelPath: this.modelPath, modelArtifactsInfo });\n                    }\n                    catch (error) {\n                        return reject(error);\n                    }\n                    let modelTx;\n                    putInfoRequest.onsuccess = () => {\n                        // Second, put model data into model store.\n                        modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                        const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                        let putModelRequest;\n                        try {\n                            putModelRequest = modelStore.put({\n                                modelPath: this.modelPath,\n                                modelArtifacts,\n                                modelArtifactsInfo\n                            });\n                        }\n                        catch (error) {\n                            // Sometimes, the serialized value is too large to store.\n                            return reject(error);\n                        }\n                        putModelRequest.onsuccess = () => resolve({ modelArtifactsInfo });\n                        putModelRequest.onerror = error => {\n                            // If the put-model request fails, roll back the info entry as\n                            // well.\n                            infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                            const deleteInfoRequest = infoStore.delete(this.modelPath);\n                            deleteInfoRequest.onsuccess = () => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                            deleteInfoRequest.onerror = error => {\n                                db.close();\n                                return reject(putModelRequest.error);\n                            };\n                        };\n                    };\n                    putInfoRequest.onerror = error => {\n                        db.close();\n                        return reject(putInfoRequest.error);\n                    };\n                    infoTx.oncomplete = () => {\n                        if (modelTx == null) {\n                            db.close();\n                        }\n                        else {\n                            modelTx.oncomplete = () => db.close();\n                        }\n                    };\n                }\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\nBrowserIndexedDB.URL_SCHEME = 'indexeddb://';\nexport { BrowserIndexedDB };\nexport const indexedDBRouter = (url) => {\n    if (!env().getBool('IS_BROWSER')) {\n        return null;\n    }\n    else {\n        if (!Array.isArray(url) && url.startsWith(BrowserIndexedDB.URL_SCHEME)) {\n            return browserIndexedDB(url.slice(BrowserIndexedDB.URL_SCHEME.length));\n        }\n        else {\n            return null;\n        }\n    }\n};\nIORouterRegistry.registerSaveRouter(indexedDBRouter);\nIORouterRegistry.registerLoadRouter(indexedDBRouter);\n/**\n * Creates a browser IndexedDB IOHandler for saving and loading models.\n *\n * ```js\n * const model = tf.sequential();\n * model.add(\n *     tf.layers.dense({units: 1, inputShape: [100], activation: 'sigmoid'}));\n *\n * const saveResult = await model.save('indexeddb://MyModel'));\n * console.log(saveResult);\n * ```\n *\n * @param modelPath A unique identifier for the model to be saved. Must be a\n *   non-empty string.\n * @returns An instance of `BrowserIndexedDB` (subclass of `IOHandler`),\n *   which can be used with, e.g., `tf.Model.save`.\n */\nexport function browserIndexedDB(modelPath) {\n    return new BrowserIndexedDB(modelPath);\n}\nfunction maybeStripScheme(key) {\n    return key.startsWith(BrowserIndexedDB.URL_SCHEME) ?\n        key.slice(BrowserIndexedDB.URL_SCHEME.length) :\n        key;\n}\nexport class BrowserIndexedDBManager {\n    constructor() {\n        this.indexedDB = getIndexedDBFactory();\n    }\n    async listModels() {\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const tx = db.transaction(INFO_STORE_NAME, 'readonly');\n                const store = tx.objectStore(INFO_STORE_NAME);\n                // tslint:disable:max-line-length\n                // Need to cast `store` as `any` here because TypeScript's DOM\n                // library does not have the `getAll()` method even though the\n                // method is supported in the latest version of most mainstream\n                // browsers:\n                // https://developer.mozilla.org/en-US/docs/Web/API/IDBObjectStore/getAll\n                // tslint:enable:max-line-length\n                // tslint:disable-next-line:no-any\n                const getAllInfoRequest = store.getAll();\n                getAllInfoRequest.onsuccess = () => {\n                    const out = {};\n                    for (const item of getAllInfoRequest.result) {\n                        out[item.modelPath] = item.modelArtifactsInfo;\n                    }\n                    resolve(out);\n                };\n                getAllInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getAllInfoRequest.error);\n                };\n                tx.oncomplete = () => db.close();\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n    async removeModel(path) {\n        path = maybeStripScheme(path);\n        return new Promise((resolve, reject) => {\n            const openRequest = this.indexedDB.open(DATABASE_NAME, DATABASE_VERSION);\n            openRequest.onupgradeneeded = () => setUpDatabase(openRequest);\n            openRequest.onsuccess = () => {\n                const db = openRequest.result;\n                const infoTx = db.transaction(INFO_STORE_NAME, 'readwrite');\n                const infoStore = infoTx.objectStore(INFO_STORE_NAME);\n                const getInfoRequest = infoStore.get(path);\n                let modelTx;\n                getInfoRequest.onsuccess = () => {\n                    if (getInfoRequest.result == null) {\n                        db.close();\n                        return reject(new Error(`Cannot find model with path '${path}' ` +\n                            `in IndexedDB.`));\n                    }\n                    else {\n                        // First, delete the entry in the info store.\n                        const deleteInfoRequest = infoStore.delete(path);\n                        const deleteModelData = () => {\n                            // Second, delete the entry in the model store.\n                            modelTx = db.transaction(MODEL_STORE_NAME, 'readwrite');\n                            const modelStore = modelTx.objectStore(MODEL_STORE_NAME);\n                            const deleteModelRequest = modelStore.delete(path);\n                            deleteModelRequest.onsuccess = () => resolve(getInfoRequest.result.modelArtifactsInfo);\n                            deleteModelRequest.onerror = error => reject(getInfoRequest.error);\n                        };\n                        // Proceed with deleting model data regardless of whether deletion\n                        // of info data succeeds or not.\n                        deleteInfoRequest.onsuccess = deleteModelData;\n                        deleteInfoRequest.onerror = error => {\n                            deleteModelData();\n                            db.close();\n                            return reject(getInfoRequest.error);\n                        };\n                    }\n                };\n                getInfoRequest.onerror = error => {\n                    db.close();\n                    return reject(getInfoRequest.error);\n                };\n                infoTx.oncomplete = () => {\n                    if (modelTx == null) {\n                        db.close();\n                    }\n                    else {\n                        modelTx.oncomplete = () => db.close();\n                    }\n                };\n            };\n            openRequest.onerror = error => reject(openRequest.error);\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { complex } from '../ops/complex';\nimport { tensor } from '../ops/tensor';\nimport { sizeFromShape } from '../util';\nimport { DTYPE_VALUE_SIZE_MAP } from './types';\nimport { CompositeArrayBuffer } from './composite_array_buffer';\nimport { backend } from '../globals';\nimport { env } from '../environment';\nimport { getBackend } from '../globals';\n/** Number of bytes reserved for the length of the string. (32bit integer). */\nconst NUM_BYTES_STRING_LENGTH = 4;\n/**\n * Encode a map from names to weight values as an ArrayBuffer, along with an\n * `Array` of `WeightsManifestEntry` as specification of the encoded weights.\n *\n * This function does not perform sharding.\n *\n * This function is the reverse of `decodeWeights`.\n *\n * @param tensors A map (\"dict\") from names to tensors.\n * @param group Group to which the weights belong (optional).\n * @returns A `Promise` of\n *   - A flat `ArrayBuffer` with all the binary values of the `Tensor`s\n *     concatenated.\n *   - An `Array` of `WeightManifestEntry`s, carrying information including\n *     tensor names, `dtype`s and shapes.\n * @throws Error: on unsupported tensor `dtype`.\n */\nexport async function encodeWeights(tensors, group) {\n    // TODO(adarob, cais): Support quantization.\n    const specs = [];\n    const dataPromises = [];\n    const names = Array.isArray(tensors) ?\n        tensors.map(tensor => tensor.name) :\n        Object.keys(tensors);\n    for (let i = 0; i < names.length; ++i) {\n        const name = names[i];\n        const t = Array.isArray(tensors) ? tensors[i].tensor : tensors[name];\n        if (t.dtype !== 'float32' && t.dtype !== 'int32' && t.dtype !== 'bool' &&\n            t.dtype !== 'string' && t.dtype !== 'complex64') {\n            throw new Error(`Unsupported dtype in weight '${name}': ${t.dtype}`);\n        }\n        const spec = { name, shape: t.shape, dtype: t.dtype };\n        if (t.dtype === 'string') {\n            const utf8bytes = new Promise(async (resolve) => {\n                const vals = await t.bytes();\n                const totalNumBytes = vals.reduce((p, c) => p + c.length, 0) +\n                    NUM_BYTES_STRING_LENGTH * vals.length;\n                const bytes = new Uint8Array(totalNumBytes);\n                let offset = 0;\n                for (let i = 0; i < vals.length; i++) {\n                    const val = vals[i];\n                    const bytesOfLength = new Uint8Array(new Uint32Array([val.length]).buffer);\n                    bytes.set(bytesOfLength, offset);\n                    offset += NUM_BYTES_STRING_LENGTH;\n                    bytes.set(val, offset);\n                    offset += val.length;\n                }\n                resolve(bytes);\n            });\n            dataPromises.push(utf8bytes);\n        }\n        else {\n            dataPromises.push(t.data());\n        }\n        if (group != null) {\n            spec.group = group;\n        }\n        specs.push(spec);\n    }\n    const tensorValues = await Promise.all(dataPromises);\n    return { data: concatenateTypedArrays(tensorValues), specs };\n}\n/**\n * Decode flat ArrayBuffer as weights.\n *\n * This function does not handle sharding.\n *\n * This function is the reverse of `encodeWeights`.\n *\n * @param weightData A flat ArrayBuffer or an array of ArrayBuffers carrying the\n *   binary values of the tensors concatenated in the order specified in\n *   `specs`.\n * @param specs Specifications of the names, dtypes and shapes of the tensors\n *   whose value are encoded by `buffer`.\n * @return A map from tensor name to tensor value, with the names corresponding\n *   to names in `specs`.\n * @throws Error, if any of the tensors has unsupported dtype.\n */\nexport function decodeWeights(weightData, specs) {\n    // TODO(adarob, cais): Support quantization.\n    const compositeBuffer = new CompositeArrayBuffer(weightData);\n    const out = {};\n    let offset = 0;\n    for (const spec of specs) {\n        const byteLength = getWeightBytelength(spec, (start, end) => {\n            return compositeBuffer.slice(offset + start, offset + end);\n        });\n        out[spec.name] = decodeWeight(spec, compositeBuffer\n            .slice(offset, offset + byteLength));\n        offset += byteLength;\n    }\n    return out;\n}\nfunction getWeightBytelength(spec, slice) {\n    const size = sizeFromShape(spec.shape);\n    let bytesPerValue;\n    if ('quantization' in spec) {\n        const quantization = spec.quantization;\n        bytesPerValue = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n    }\n    else if (spec.dtype === 'string') {\n        // Can not statically determine string length.\n        let byteLength = 0;\n        for (let i = 0; i < size; i++) {\n            byteLength += NUM_BYTES_STRING_LENGTH + new Uint32Array(slice(byteLength, byteLength + NUM_BYTES_STRING_LENGTH))[0];\n        }\n        return byteLength;\n    }\n    else {\n        bytesPerValue = DTYPE_VALUE_SIZE_MAP[spec.dtype];\n    }\n    return size * bytesPerValue;\n}\nasync function getWeightBytelengthAsync(spec, slice) {\n    const size = sizeFromShape(spec.shape);\n    let bytesPerValue;\n    if ('quantization' in spec) {\n        const quantization = spec.quantization;\n        bytesPerValue = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n    }\n    else if (spec.dtype === 'string') {\n        // Can not statically determine string length.\n        let byteLength = 0;\n        for (let i = 0; i < size; i++) {\n            byteLength += NUM_BYTES_STRING_LENGTH + new Uint32Array(await slice(byteLength, byteLength + NUM_BYTES_STRING_LENGTH))[0];\n        }\n        return byteLength;\n    }\n    else {\n        bytesPerValue = DTYPE_VALUE_SIZE_MAP[spec.dtype];\n    }\n    return size * bytesPerValue;\n}\nfunction decodeWeight(spec, byteBuffer) {\n    const name = spec.name;\n    const dtype = spec.dtype;\n    const shape = spec.shape;\n    const size = sizeFromShape(shape);\n    let values;\n    let offset = 0;\n    if ('quantization' in spec) {\n        const quantization = spec.quantization;\n        if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n            if (!('min' in quantization && 'scale' in quantization)) {\n                throw new Error(`Weight ${spec.name} with quantization ${quantization.dtype} ` +\n                    `doesn't have corresponding metadata min and scale.`);\n            }\n        }\n        else if (quantization.dtype === 'float16') {\n            if (dtype !== 'float32') {\n                throw new Error(`Weight ${spec.name} is quantized with ${quantization.dtype} ` +\n                    `which only supports weights of type float32 not ${dtype}.`);\n            }\n        }\n        else {\n            throw new Error(`Weight ${spec.name} has unknown ` +\n                `quantization dtype ${quantization.dtype}. ` +\n                `Supported quantization dtypes are: ` +\n                `'uint8', 'uint16', and 'float16'.`);\n        }\n        const quantizationSizeFactor = DTYPE_VALUE_SIZE_MAP[quantization.dtype];\n        const quantizedArray = (quantization.dtype === 'uint8') ?\n            new Uint8Array(byteBuffer) :\n            new Uint16Array(byteBuffer);\n        if (dtype === 'float32') {\n            if (quantization.dtype === 'uint8' || quantization.dtype === 'uint16') {\n                values = new Float32Array(quantizedArray.length);\n                for (let i = 0; i < quantizedArray.length; i++) {\n                    const v = quantizedArray[i];\n                    values[i] = v * quantization.scale + quantization.min;\n                }\n            }\n            else if (quantization.dtype === 'float16') {\n                // TODO: This is inefficient. Make getFloat16Decoder efficient.\n                const float16Decode = getFloat16Decoder();\n                values = float16Decode(quantizedArray);\n            }\n            else {\n                throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                    `for weight type float32.`);\n            }\n        }\n        else if (dtype === 'int32') {\n            if (quantization.dtype !== 'uint8' && quantization.dtype !== 'uint16') {\n                throw new Error(`Unsupported quantization type ${quantization.dtype} ` +\n                    `for weight type int32.`);\n            }\n            values = new Int32Array(quantizedArray.length);\n            for (let i = 0; i < quantizedArray.length; i++) {\n                const v = quantizedArray[i];\n                values[i] = Math.round(v * quantization.scale + quantization.min);\n            }\n        }\n        else {\n            throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n        }\n        offset += size * quantizationSizeFactor;\n    }\n    else if (dtype === 'string') {\n        const size = sizeFromShape(spec.shape);\n        values = [];\n        for (let i = 0; i < size; i++) {\n            const byteLength = new Uint32Array(byteBuffer.slice(offset, offset + NUM_BYTES_STRING_LENGTH))[0];\n            offset += NUM_BYTES_STRING_LENGTH;\n            const bytes = new Uint8Array(byteBuffer.slice(offset, offset + byteLength));\n            values.push(bytes);\n            offset += byteLength;\n        }\n    }\n    else {\n        const dtypeFactor = DTYPE_VALUE_SIZE_MAP[dtype];\n        if (dtype === 'float32') {\n            values = new Float32Array(byteBuffer);\n        }\n        else if (dtype === 'int32') {\n            values = new Int32Array(byteBuffer);\n        }\n        else if (dtype === 'bool') {\n            values = new Uint8Array(byteBuffer);\n        }\n        else if (dtype === 'complex64') {\n            values = new Float32Array(byteBuffer);\n            const real = new Float32Array(values.length / 2);\n            const image = new Float32Array(values.length / 2);\n            for (let i = 0; i < real.length; i++) {\n                real[i] = values[i * 2];\n                image[i] = values[i * 2 + 1];\n            }\n            const realTensor = tensor(real, shape, 'float32');\n            const imageTensor = tensor(image, shape, 'float32');\n            const complexTensor = complex(realTensor, imageTensor);\n            realTensor.dispose();\n            imageTensor.dispose();\n            return complexTensor;\n        }\n        else {\n            throw new Error(`Unsupported dtype in weight '${name}': ${dtype}`);\n        }\n        offset += size * dtypeFactor;\n    }\n    return tensor(values, shape, dtype);\n}\nasync function readToLength(reader, initialData, length) {\n    let data = new Uint8Array(initialData);\n    while (data.byteLength < length) {\n        const { done, value } = await reader.read();\n        if (done && value == null) {\n            const missing = length - data.byteLength;\n            throw new Error(`Reader is done but ${missing} bytes are still expected`);\n        }\n        // TODO: Don't create a new array every loop.\n        const newData = new Uint8Array(data.length + value.byteLength);\n        newData.set(data, 0);\n        newData.set(new Uint8Array(value), data.length);\n        data = newData;\n    }\n    return data.buffer;\n}\nexport async function decodeWeightsStream(weightStream, specs) {\n    const tensors = {};\n    const reader = weightStream.getReader();\n    let data = new ArrayBuffer(0);\n    for (const spec of specs) {\n        const byteLength = await getWeightBytelengthAsync(spec, async (start, end) => {\n            data = await readToLength(reader, data, end);\n            return data.slice(start, end);\n        });\n        data = await readToLength(reader, data, byteLength);\n        // Slice the tensor out\n        const tensorData = data.slice(0, byteLength);\n        data = data.slice(byteLength);\n        const weightTensor = decodeWeight(spec, tensorData);\n        tensors[spec.name] = weightTensor;\n        // TODO(mattsoulanille): Better way to call uploadToGPU.\n        // TODO(mattsoulanille): Make this work for webgl too.\n        if (getBackend() === 'webgpu') {\n            const b = backend();\n            if ('uploadToGPU' in b &&\n                sizeFromShape(weightTensor.shape) >= env()\n                    .get('WEBGPU_CPU_HANDOFF_SIZE_THRESHOLD')) {\n                b.uploadToGPU(weightTensor.dataId);\n            }\n        }\n    }\n    return tensors;\n}\n/**\n * Concatenate TypedArrays into an ArrayBuffer.\n */\nexport function concatenateTypedArrays(xs) {\n    // TODO(adarob, cais): Support quantization.\n    if (xs === null) {\n        throw new Error(`Invalid input value: ${JSON.stringify(xs)}`);\n    }\n    let totalByteLength = 0;\n    // `normalizedXs` is here for this reason: a `TypedArray`'s `buffer'\n    // can have a different byte length from that of the `TypedArray` itself,\n    // for example, when the `TypedArray` is created from an offset in an\n    // `ArrayBuffer`. `normliazedXs` holds `TypedArray`s whose `buffer`s match\n    // the `TypedArray` in byte length. If an element of `xs` does not show\n    // this property, a new `TypedArray` that satisfy this property will be\n    // constructed and pushed into `normalizedXs`.\n    const normalizedXs = [];\n    xs.forEach((x) => {\n        totalByteLength += x.byteLength;\n        // tslint:disable:no-any\n        normalizedXs.push(x.byteLength === x.buffer.byteLength ? x :\n            new x.constructor(x));\n        if (!(x instanceof Float32Array || x instanceof Int32Array ||\n            x instanceof Uint8Array)) {\n            throw new Error(`Unsupported TypedArray subtype: ${x.constructor.name}`);\n        }\n        // tslint:enable:no-any\n    });\n    const y = new Uint8Array(totalByteLength);\n    let offset = 0;\n    normalizedXs.forEach((x) => {\n        y.set(new Uint8Array(x.buffer), offset);\n        offset += x.byteLength;\n    });\n    return y.buffer;\n}\n// Use Buffer on Node.js instead of Blob/atob/btoa\nconst useNodeBuffer = typeof Buffer !== 'undefined' &&\n    (typeof Blob === 'undefined' || typeof atob === 'undefined' ||\n        typeof btoa === 'undefined');\n/**\n * Calculate the byte length of a JavaScript string.\n *\n * Note that a JavaScript string can contain wide characters, therefore the\n * length of the string is not necessarily equal to the byte length.\n *\n * @param str Input string.\n * @returns Byte length.\n */\nexport function stringByteLength(str) {\n    if (useNodeBuffer) {\n        return Buffer.byteLength(str, 'utf8');\n    }\n    return new Blob([str]).size;\n}\n/**\n * Encode an ArrayBuffer as a base64 encoded string.\n *\n * @param buffer `ArrayBuffer` to be converted.\n * @returns A string that base64-encodes `buffer`.\n */\nexport function arrayBufferToBase64String(buffer) {\n    if (useNodeBuffer) {\n        return Buffer.from(buffer).toString('base64');\n    }\n    const buf = new Uint8Array(buffer);\n    let s = '';\n    for (let i = 0, l = buf.length; i < l; i++) {\n        s += String.fromCharCode(buf[i]);\n    }\n    return btoa(s);\n}\n/**\n * Decode a base64 string as an ArrayBuffer.\n *\n * @param str Base64 string.\n * @returns Decoded `ArrayBuffer`.\n */\nexport function base64StringToArrayBuffer(str) {\n    if (useNodeBuffer) {\n        const buf = Buffer.from(str, 'base64');\n        return buf.buffer.slice(buf.byteOffset, buf.byteOffset + buf.byteLength);\n    }\n    const s = atob(str);\n    const buffer = new Uint8Array(s.length);\n    for (let i = 0; i < s.length; ++i) {\n        buffer.set([s.charCodeAt(i)], i);\n    }\n    return buffer.buffer;\n}\n/**\n * Concatenate a number of ArrayBuffers into one.\n *\n * @param buffers An array of ArrayBuffers to concatenate, or a single\n *     ArrayBuffer.\n * @returns Result of concatenating `buffers` in order.\n *\n * @deprecated Use tf.io.CompositeArrayBuffer.join() instead.\n */\nexport function concatenateArrayBuffers(buffers) {\n    return CompositeArrayBuffer.join(buffers);\n}\n/**\n * Get the basename of a path.\n *\n * Behaves in a way analogous to Linux's basename command.\n *\n * @param path\n */\nexport function basename(path) {\n    const SEPARATOR = '/';\n    path = path.trim();\n    while (path.endsWith(SEPARATOR)) {\n        path = path.slice(0, path.length - 1);\n    }\n    const items = path.split(SEPARATOR);\n    return items[items.length - 1];\n}\n/**\n * Create `ModelJSON` from `ModelArtifacts`.\n *\n * @param artifacts Model artifacts, describing the model and its weights.\n * @param manifest Weight manifest, describing where the weights of the\n *     `ModelArtifacts` are stored, and some metadata about them.\n * @returns Object representing the `model.json` file describing the model\n *     artifacts and weights\n */\nexport function getModelJSONForModelArtifacts(artifacts, manifest) {\n    const result = {\n        modelTopology: artifacts.modelTopology,\n        format: artifacts.format,\n        generatedBy: artifacts.generatedBy,\n        convertedBy: artifacts.convertedBy,\n        weightsManifest: manifest\n    };\n    if (artifacts.signature != null) {\n        result.signature = artifacts.signature;\n    }\n    if (artifacts.userDefinedMetadata != null) {\n        result.userDefinedMetadata = artifacts.userDefinedMetadata;\n    }\n    if (artifacts.modelInitializer != null) {\n        result.modelInitializer = artifacts.modelInitializer;\n    }\n    if (artifacts.initializerSignature != null) {\n        result.initializerSignature = artifacts.initializerSignature;\n    }\n    if (artifacts.trainingConfig != null) {\n        result.trainingConfig = artifacts.trainingConfig;\n    }\n    return result;\n}\n/**\n * Create `ModelArtifacts` from a JSON file and weights.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param weightSpecs The list of WeightsManifestEntry for the model. Must be\n *     passed if the modelJSON has a weightsManifest.\n * @param weightData An ArrayBuffer or array of ArrayBuffers of weight data for\n *     the model corresponding to the weights in weightSpecs. Must be passed if\n *     the modelJSON has a weightsManifest.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport function getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData) {\n    const modelArtifacts = {\n        modelTopology: modelJSON.modelTopology,\n        format: modelJSON.format,\n        generatedBy: modelJSON.generatedBy,\n        convertedBy: modelJSON.convertedBy\n    };\n    if (modelJSON.trainingConfig != null) {\n        modelArtifacts.trainingConfig = modelJSON.trainingConfig;\n    }\n    if (modelJSON.weightsManifest != null) {\n        if (!weightSpecs) {\n            throw new Error('modelJSON has weightsManifest but weightSpecs is null');\n        }\n        if (!weightData) {\n            throw new Error('modelJSON has weightsManifest but weightData is null');\n        }\n        modelArtifacts.weightSpecs = weightSpecs;\n        modelArtifacts.weightData = weightData;\n    }\n    if (modelJSON.signature != null) {\n        modelArtifacts.signature = modelJSON.signature;\n    }\n    if (modelJSON.userDefinedMetadata != null) {\n        modelArtifacts.userDefinedMetadata = modelJSON.userDefinedMetadata;\n    }\n    if (modelJSON.modelInitializer != null) {\n        modelArtifacts.modelInitializer = modelJSON.modelInitializer;\n    }\n    if (modelJSON.initializerSignature != null) {\n        modelArtifacts.initializerSignature = modelJSON.initializerSignature;\n    }\n    return modelArtifacts;\n}\n/**\n * Create `ModelArtifacts` from a JSON file.\n *\n * @param modelJSON Object containing the parsed JSON of `model.json`\n * @param loadWeights Function that takes the JSON file's weights manifest,\n *     reads weights from the listed path(s), and returns a Promise of the\n *     weight manifest entries along with the weights data.\n * @returns A Promise of the `ModelArtifacts`, as described by the JSON file.\n */\nexport async function getModelArtifactsForJSON(modelJSON, loadWeights) {\n    let weightSpecs;\n    let weightData;\n    if (modelJSON.weightsManifest != null) {\n        [weightSpecs, weightData] = await loadWeights(modelJSON.weightsManifest);\n    }\n    return getModelArtifactsForJSONSync(modelJSON, weightSpecs, weightData);\n}\n/**\n * Populate ModelArtifactsInfo fields for a model with JSON topology.\n * @param modelArtifacts\n * @returns A ModelArtifactsInfo object.\n */\nexport function getModelArtifactsInfoForJSON(modelArtifacts) {\n    if (modelArtifacts.modelTopology instanceof ArrayBuffer) {\n        throw new Error('Expected JSON model topology, received ArrayBuffer.');\n    }\n    return {\n        dateSaved: new Date(),\n        modelTopologyType: 'JSON',\n        modelTopologyBytes: modelArtifacts.modelTopology == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.modelTopology)),\n        weightSpecsBytes: modelArtifacts.weightSpecs == null ?\n            0 :\n            stringByteLength(JSON.stringify(modelArtifacts.weightSpecs)),\n        weightDataBytes: modelArtifacts.weightData == null ?\n            0 :\n            new CompositeArrayBuffer(modelArtifacts.weightData).byteLength,\n    };\n}\n/**\n * Concatenate the weights stored in a WeightsManifestConfig into a list of\n * WeightsManifestEntry\n *\n * @param weightsManifest The WeightsManifestConfig to extract weights from.\n * @returns A list of WeightsManifestEntry of the weights in the weightsManifest\n */\nexport function getWeightSpecs(weightsManifest) {\n    const weightSpecs = [];\n    for (const entry of weightsManifest) {\n        weightSpecs.push(...entry.weights);\n    }\n    return weightSpecs;\n}\n/**\n * Computes mantisa table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 2048 mantissa lookup values.\n */\nfunction computeFloat16MantisaTable() {\n    const convertMantissa = (i) => {\n        let m = i << 13;\n        let e = 0;\n        while ((m & 0x00800000) === 0) {\n            e -= 0x00800000;\n            m <<= 1;\n        }\n        m &= ~0x00800000;\n        e += 0x38800000;\n        return m | e;\n    };\n    const mantisaTable = new Uint32Array(2048);\n    mantisaTable[0] = 0;\n    for (let i = 1; i < 1024; i++) {\n        mantisaTable[i] = convertMantissa(i);\n    }\n    for (let i = 1024; i < 2048; i++) {\n        mantisaTable[i] = 0x38000000 + ((i - 1024) << 13);\n    }\n    return mantisaTable;\n}\n/**\n * Computes exponent table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 64 exponent lookup values.\n */\nfunction computeFloat16ExponentTable() {\n    const exponentTable = new Uint32Array(64);\n    exponentTable[0] = 0;\n    exponentTable[31] = 0x47800000;\n    exponentTable[32] = 0x80000000;\n    exponentTable[63] = 0xc7800000;\n    for (let i = 1; i < 31; i++) {\n        exponentTable[i] = i << 23;\n    }\n    for (let i = 33; i < 63; i++) {\n        exponentTable[i] = 0x80000000 + ((i - 32) << 23);\n    }\n    return exponentTable;\n}\n/**\n * Computes offset table for casting Float16 to Float32\n * See http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n *\n * @returns Uint32Array, 6d offset values.\n */\nfunction computeFloat16OffsetTable() {\n    const offsetTable = new Uint32Array(64);\n    for (let i = 0; i < 64; i++) {\n        offsetTable[i] = 1024;\n    }\n    offsetTable[0] = offsetTable[32] = 0;\n    return offsetTable;\n}\n/**\n * Retrieve a Float16 decoder which will decode a ByteArray of Float16 values\n * to a Float32Array.\n *\n * @returns Function (buffer: Uint16Array) => Float32Array which decodes\n *          the Uint16Array of Float16 bytes to a Float32Array.\n */\nexport function getFloat16Decoder() {\n    // Algorithm is based off of\n    // http://www.fox-toolkit.org/ftp/fasthalffloatconversion.pdf\n    // Cache lookup tables\n    const mantisaTable = computeFloat16MantisaTable();\n    const exponentTable = computeFloat16ExponentTable();\n    const offsetTable = computeFloat16OffsetTable();\n    return (quantizedArray) => {\n        const buffer = new ArrayBuffer(4 * quantizedArray.length);\n        const bufferUint32View = new Uint32Array(buffer);\n        for (let index = 0; index < quantizedArray.length; index++) {\n            const float16Bits = quantizedArray[index];\n            const float32Bits = mantisaTable[offsetTable[float16Bits >> 10] + (float16Bits & 0x3ff)] +\n                exponentTable[float16Bits >> 10];\n            bufferUint32View[index] = float32Bits;\n        }\n        return new Float32Array(buffer);\n    };\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["DATABASE_NAME","MODEL_STORE_NAME","INFO_STORE_NAME","getIndexedDBFactory","getBool","Error","theWindow","window","self","factory","indexedDB","mozIndexedDB","webkitIndexedDB","msIndexedDB","shimIndexedDB","setUpDatabase","openRequest","db","result","createObjectStore","keyPath","BrowserIndexedDB","constructor","modelPath","this","save","modelArtifacts","modelTopology","ArrayBuffer","databaseAction","load","Promise","resolve","reject","open","onupgradeneeded","onsuccess","modelTx","transaction","getRequest","objectStore","get","close","onerror","error","oncomplete","weightData","join","modelArtifactsInfo","infoTx","putInfoRequest","infoStore","put","modelStore","putModelRequest","deleteInfoRequest","delete","URL_SCHEME","indexedDBRouter","url","Array","isArray","startsWith","slice","length","registerSaveRouter","registerLoadRouter","BrowserIndexedDBManager","listModels","tx","getAllInfoRequest","getAll","out","item","removeModel","path","key","getInfoRequest","deleteModelData","deleteModelRequest","NUM_BYTES_STRING_LENGTH","async","encodeWeights","tensors","group","specs","dataPromises","names","map","tensor","name","Object","keys","i","t","dtype","spec","shape","utf8bytes","vals","bytes","totalNumBytes","reduce","p","c","Uint8Array","offset","val","bytesOfLength","Uint32Array","buffer","set","push","data","concatenateTypedArrays","all","decodeWeights","compositeBuffer","byteLength","getWeightBytelength","start","end","decodeWeight","size","bytesPerValue","quantization","getWeightBytelengthAsync","byteBuffer","values","quantizationSizeFactor","quantizedArray","Uint16Array","Float32Array","v","scale","min","float16Decode","mantisaTable","convertMantissa","m","e","computeFloat16MantisaTable","exponentTable","computeFloat16ExponentTable","offsetTable","computeFloat16OffsetTable","bufferUint32View","index","float16Bits","float32Bits","getFloat16Decoder","Int32Array","Math","round","dtypeFactor","real","image","realTensor","imageTensor","complexTensor","dispose","readToLength","reader","initialData","done","value","read","missing","newData","decodeWeightsStream","weightStream","getReader","tensorData","weightTensor","b","uploadToGPU","dataId","xs","JSON","stringify","totalByteLength","normalizedXs","forEach","x","y","useNodeBuffer","Buffer","Blob","atob","btoa","stringByteLength","str","arrayBufferToBase64String","from","toString","buf","s","l","String","fromCharCode","base64StringToArrayBuffer","byteOffset","charCodeAt","concatenateArrayBuffers","buffers","basename","trim","endsWith","items","split","getModelJSONForModelArtifacts","artifacts","manifest","format","generatedBy","convertedBy","weightsManifest","signature","userDefinedMetadata","modelInitializer","initializerSignature","trainingConfig","getModelArtifactsForJSONSync","modelJSON","weightSpecs","getModelArtifactsForJSON","loadWeights","getModelArtifactsInfoForJSON","dateSaved","Date","modelTopologyType","modelTopologyBytes","weightSpecsBytes","weightDataBytes","getWeightSpecs","entry","weights"],"sourceRoot":""}