{"version":3,"file":"stylist-vendors-eae292fb.8212f37ec1856b445375.js","mappings":"uMAoBO,MAAMA,UAA0B,KAUnC,UAAAC,GACI,OAAO,IAAIC,EAAaC,KAC5B,EAWJ,MAAMD,UAAqB,IACvB,WAAAE,CAAYC,GACRC,QACAH,KAAKE,SAAWA,EAChBF,KAAKI,KAAO,IAAIC,EAAiBH,EACrC,CACA,OAAAI,GACI,OAAON,KAAKI,KAAKE,SACrB,CACA,UAAMC,GACF,OAAOP,KAAKI,KAAKG,MACrB,EAwBJ,MAAMF,UAAyB,KAC3B,WAAAJ,CAAYC,GAGR,GAFAC,QACAH,KAAKE,SAAWA,GACZ,IAAAM,OAAMC,IAAI,cACVT,KAAKU,QAAU,IAAIC,YAAY,aAE9B,CAED,MAAM,cAAEC,GAAkB,EAAQ,MAClCZ,KAAKU,QAAU,IAAIE,EAAc,OACrC,CACJ,CACA,OAAAN,GACI,MAAO,GAAGN,KAAKE,SAASI,mBAC5B,CACA,UAAMO,GACF,MAAMC,QAAoBd,KAAKE,SAASK,OACxC,IAAIQ,EAOAC,EANJ,OAAIF,EAAYG,OAIZF,EAAQD,EAAYI,MAIpBF,GADA,IAAAR,OAAMC,IAAI,cACHT,KAAKU,QAAQS,OAAOJ,EAAO,CAAEK,QAAQ,IAGrCpB,KAAKU,QAAQW,MAAMC,EAAOC,KAAKR,EAAMS,SAEhDxB,KAAKyB,YAAYC,KAAKV,IACf,EACX,ECrFG,MAAMW,UAA0B9B,EACnC,WAAAI,CAAY2B,EAAMC,EAAU,CAAC,GACzB1B,QACAH,KAAK4B,KAAOA,EACZ5B,KAAK6B,QAAUA,EACf,EAAAC,KAAA,OAAaF,aAAgBG,eACxB,IAAAvB,OAAMC,IAAI,gBACNmB,aAAgBI,MAAQJ,aAAgBK,OACjC,IAAM,yEAEtBjC,KAAKkC,OAASL,EAAQK,QAAU,EAEhClC,KAAKmC,UAAYN,EAAQM,WAAa,OAC1C,CACA,OAAA7B,GACI,MAAO,cAAcN,KAAK4B,MAC9B,CACA,UAAMrB,GACF,GAAIP,KAAKkC,SAAYlC,KAAK4B,gBAAgBG,WACtC/B,KAAK4B,KAAKQ,WACVpC,KAAK4B,KAAKS,MACV,MAAO,CAAEnB,MAAO,KAAMD,MAAM,GAEhC,MAAMF,EAAQ,IAAIuB,SAAQ,CAACC,EAASC,KAChC,MAAMC,EAAMzC,KAAKkC,OAASlC,KAAKmC,UAC/B,GAAInC,KAAK4B,gBAAgBG,WAGrBQ,EAAQ,IAAIR,WAAW/B,KAAK4B,KAAKc,MAAM1C,KAAKkC,OAAQO,SAEnD,CAID,MAAME,EAAa,IAAIC,WACvBD,EAAWE,OAAUC,IACjB,IAAIC,EAAOJ,EAAWK,OAOtB,GAHID,aAAgBE,cAChBF,EAAO,IAAIhB,WAAWgB,MAEpBA,aAAgBhB,YAClB,OAAOS,EAAO,IAAIU,UAAU,sCAEhCX,EAAQQ,EAAK,EAEjBJ,EAAWQ,QAAWL,GACXN,EAAO,IAAIY,MAAM,YAE5BT,EAAWU,QAAWP,GACXN,EAAO,IAAIY,MAAMN,EAAMQ,OAIlC,MAAMZ,EAAQ1C,KAAK4B,KAAKc,MAAM1C,KAAKkC,OAAQO,GAG3CE,EAAWY,kBAAkBb,EACjC,CACA1C,KAAKkC,OAASO,CAAG,IAErB,MAAO,CAAEvB,YAAcH,EAAQE,MAAM,EACzC,E","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/iterators/byte_chunk_iterator.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/iterators/file_chunk_iterator.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { LazyIterator, OneToManyIterator } from './lazy_iterator';\nimport { StringIterator } from './string_iterator';\nexport class ByteChunkIterator extends LazyIterator {\n    /**\n     * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n     *\n     * The byte arrays producetd from the ByteChunkIterator on which this is\n     * called will be interpreted as concatenated.  No assumptions are made about\n     * the boundaries of the incoming chunks, so a multi-byte UTF8 encoding of a\n     * character may span the boundary between chunks.  This naturally happens,\n     * for instance, when reading fixed-size byte arrays from a file.\n     */\n    decodeUTF8() {\n        return new Utf8Iterator(this);\n    }\n}\n// ============================================================================\n// The following private classes serve to implement the chainable methods\n// on ByteChunkIterator.  Unfortunately they can't be placed in separate files,\n// due to resulting trouble with circular imports.\n// ============================================================================\n// We wanted multiple inheritance, e.g.\n//   class Utf8Iterator extends QueueIterator<string>, StringIterator\n// but the TypeScript mixin approach is a bit hacky, so we take this adapter\n// approach instead.\nclass Utf8Iterator extends StringIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        this.impl = new Utf8IteratorImpl(upstream);\n    }\n    summary() {\n        return this.impl.summary();\n    }\n    async next() {\n        return this.impl.next();\n    }\n}\n/**\n * Decode a stream of UTF8-encoded byte arrays to a stream of strings.\n *\n * This is tricky because the incoming byte array boundaries may disrupt a\n * multi-byte UTF8 character. Thus any incomplete character data at the end of\n * a chunk must be carried over and prepended to the next chunk before\n * decoding. Luckily with native decoder, TextDecoder in browser and\n * string_decoder in node, byte array boundaries are handled automatically.\n *\n * In the context of an input pipeline for machine learning, UTF8 decoding is\n * needed to parse text files containing training examples or prediction\n * requests (e.g., formatted as CSV or JSON). We cannot use the built-in\n * decoding provided by FileReader.readAsText() because here we are in a\n * streaming context, which FileReader does not support.\n *\n * @param upstream A `LazyIterator` of `Uint8Arrays` containing UTF8-encoded\n *   text, which should be interpreted as concatenated.  No assumptions are\n *   made about the boundaries of the incoming chunks, so a multi-byte UTF8\n *   encoding of a character may span the boundary between chunks.  This\n *   naturally happens, for instance, when reading fixed-size byte arrays from a\n *   file.\n */\nclass Utf8IteratorImpl extends OneToManyIterator {\n    constructor(upstream) {\n        super();\n        this.upstream = upstream;\n        if (env().get('IS_BROWSER')) {\n            this.decoder = new TextDecoder('utf-8');\n        }\n        else {\n            // tslint:disable-next-line:no-require-imports\n            const { StringDecoder } = require('string_decoder');\n            this.decoder = new StringDecoder('utf8');\n        }\n    }\n    summary() {\n        return `${this.upstream.summary()} -> Utf8`;\n    }\n    async pump() {\n        const chunkResult = await this.upstream.next();\n        let chunk;\n        if (chunkResult.done) {\n            return false;\n        }\n        else {\n            chunk = chunkResult.value;\n        }\n        let text;\n        if (env().get('IS_BROWSER')) {\n            text = this.decoder.decode(chunk, { stream: true });\n        }\n        else {\n            text = this.decoder.write(Buffer.from(chunk.buffer));\n        }\n        this.outputQueue.push(text);\n        return true;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n// inspired by https://github.com/maxogden/filereader-stream\nimport { env, util } from '@tensorflow/tfjs-core';\nimport { ByteChunkIterator } from './byte_chunk_iterator';\n/**\n * Provide a stream of chunks from a File, Blob, or Uint8Array.\n * @param file The source File, Blob or Uint8Array.\n * @param options Optional settings controlling file reading.\n * @returns a lazy Iterator of Uint8Arrays containing sequential chunks of the\n *   input File, Blob or Uint8Array.\n */\nexport class FileChunkIterator extends ByteChunkIterator {\n    constructor(file, options = {}) {\n        super();\n        this.file = file;\n        this.options = options;\n        util.assert((file instanceof Uint8Array) ||\n            (env().get('IS_BROWSER') ?\n                (file instanceof File || file instanceof Blob) :\n                false), () => 'FileChunkIterator only supports File, Blob and Uint8Array ' +\n            'right now.');\n        this.offset = options.offset || 0;\n        // default 1MB chunk has tolerable perf on large files\n        this.chunkSize = options.chunkSize || 1024 * 1024;\n    }\n    summary() {\n        return `FileChunks ${this.file}`;\n    }\n    async next() {\n        if (this.offset >= ((this.file instanceof Uint8Array) ?\n            this.file.byteLength :\n            this.file.size)) {\n            return { value: null, done: true };\n        }\n        const chunk = new Promise((resolve, reject) => {\n            const end = this.offset + this.chunkSize;\n            if (this.file instanceof Uint8Array) {\n                // Note if end > this.uint8Array.byteLength, we just get a small last\n                // chunk.\n                resolve(new Uint8Array(this.file.slice(this.offset, end)));\n            }\n            else {\n                // This branch assumes that this.file type is File or Blob, which\n                // means it is in the browser environment.\n                // TODO(soergel): is this a performance issue?\n                const fileReader = new FileReader();\n                fileReader.onload = (event) => {\n                    let data = fileReader.result;\n                    // Not sure we can trust the return type of\n                    // FileReader.readAsArrayBuffer See e.g.\n                    // https://github.com/node-file-api/FileReader/issues/2\n                    if (data instanceof ArrayBuffer) {\n                        data = new Uint8Array(data);\n                    }\n                    if (!(data instanceof Uint8Array)) {\n                        return reject(new TypeError('FileReader returned unknown type.'));\n                    }\n                    resolve(data);\n                };\n                fileReader.onabort = (event) => {\n                    return reject(new Error('Aborted'));\n                };\n                fileReader.onerror = (event) => {\n                    return reject(new Error(event.type));\n                };\n                // TODO(soergel): better handle onabort, onerror\n                // Note if end > this.file.size, we just get a small last chunk.\n                const slice = this.file.slice(this.offset, end);\n                // We can't use readAsText here (even if we know the file is text)\n                // because the slice boundary may fall within a multi-byte character.\n                fileReader.readAsArrayBuffer(slice);\n            }\n            this.offset = end;\n        });\n        return { value: (await chunk), done: false };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["ByteChunkIterator","decodeUTF8","Utf8Iterator","this","constructor","upstream","super","impl","Utf8IteratorImpl","summary","next","env","get","decoder","TextDecoder","StringDecoder","pump","chunkResult","chunk","text","done","value","decode","stream","write","Buffer","from","buffer","outputQueue","push","FileChunkIterator","file","options","util","Uint8Array","File","Blob","offset","chunkSize","byteLength","size","Promise","resolve","reject","end","slice","fileReader","FileReader","onload","event","data","result","ArrayBuffer","TypeError","onabort","Error","onerror","type","readAsArrayBuffer"],"sourceRoot":""}