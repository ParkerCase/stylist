"use strict";(self.webpackChunkStylistWidget=self.webpackChunkStylistWidget||[]).push([[2498],{7703:function(r,e,n){n.d(e,{m:function(){return p}});var t=n(67897),o=n(35287),u=n(15441),s=n(28189),a=n(45119),i=n(37148),l=n(35040),f=n(96522),c=n(70929),h=n(1902);const p=(0,c.op)({transpose_:function(r,e,n){const c=(0,s.YT)(r,"x","transpose");if(null==e&&(e=c.shape.map(((r,e)=>e)).reverse()),a.vA(c.rank===e.length,(()=>`Error in transpose: rank of input ${c.rank} must match length of perm ${e}.`)),e.forEach((r=>{a.vA(r>=0&&r<c.rank,(()=>"All entries in 'perm' must be between 0 and "+(c.rank-1)+` but got ${e}`))})),c.rank<=1)return c.clone();const p={x:c},d={perm:e};return"complex64"===c.dtype?(0,o.DZ)((()=>{let r=(0,h.x)(c),e=(0,l.n)(c);return r=t.T2.runKernel(u.wx0,{x:r},d),e=t.T2.runKernel(u.wx0,{x:e},d),n&&(e=(0,f.H)(e)),(0,i.f)(r,e)})):t.T2.runKernel(u.wx0,p,d)}})},10385:function(r,e,n){n.d(e,{y:function(){return s}});var t=n(28189),o=n(45119),u=n(19171);function s(r,e,n){if((0,o.HO)(r),null!=e&&6!==e.length)throw new Error("tensor6d() requires shape to have six numbers");const s=(0,t.MZ)(r,n);if(6!==s.length&&1!==s.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return e=e||s,(0,u.Q)(r,e,s,n)}},18941:function(r,e,n){n.d(e,{K:function(){return s}});var t=n(28189),o=n(45119),u=n(19171);function s(r,e,n){if((0,o.HO)(r),null!=e&&2!==e.length)throw new Error("tensor2d() requires shape to have two numbers");const s=(0,t.MZ)(r,n);if(2!==s.length&&1!==s.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return(0,u.Q)(r,e,s,n)}},19171:function(r,e,n){n.d(e,{Q:function(){return a}});var t=n(67897),o=n(52046),u=n(45119),s=n(89783);function a(r,e,n,a){if(null==a)a=(0,u.X$)(r);else if("complex64"===a)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if((0,o.Nw)(r)||(0,o.Oj)(r)){if("float32"!==a&&"int32"!==a)throw new Error(`Creating tensor from GPU data only supports 'float32'|'int32' dtype, while the dtype is ${a}.`);return t.T2.backend.createTensorFromGPUData(r,e||n,a)}if(!(0,s.isTypedArray)(r)&&!Array.isArray(r)&&"number"!==typeof r&&"boolean"!==typeof r&&"string"!==typeof r)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=e){(0,u.SA)(e);const r=(0,u.Ze)(e),t=(0,u.Ze)(n);(0,u.vA)(r===t,(()=>`Based on the provided shape, [${e}], the tensor should have ${r} values but has ${t}`));for(let o=0;o<n.length;++o){const r=n[o],t=o!==n.length-1||r!==(0,u.Ze)(e.slice(o));(0,u.vA)(n[o]===e[o]||!t,(()=>`Error creating a new Tensor. Inferred shape (${n}) does not match the provided shape (${e}). `))}}return(0,s.isTypedArray)(r)||Array.isArray(r)||(r=[r]),e=e||n,r="string"!==a?(0,s.toTypedArray)(r,a):(0,s.flatten)(r,[],!0),t.T2.makeTensor(r,e,a)}},21190:function(r,e,n){n.d(e,{r:function(){return s}});var t=n(67897),o=n(15441),u=n(28189);const s=(0,n(70929).op)({topk_:function(r,e=1,n=!0){const s=(0,u.YT)(r,"x","topk");if(0===s.rank)throw new Error("topk() expects the input to be of rank 1 or higher");const a=s.shape[s.shape.length-1];if(e<0)throw new Error(`'k' passed to topk() must be >= 0 but got ${e}`);if(e>a)throw new Error(`'k' passed to topk() must be <= the last dimension (${a}) but got ${e}`);const i={x:s},l={k:e,sorted:n},[f,c]=t.T2.runKernel(o.TBb,i,l);return{values:f,indices:c}}})},25107:function(r,e,n){n.d(e,{g:function(){return s}});var t=n(28189),o=n(45119),u=n(19171);function s(r,e,n){if((0,o.HO)(r),null!=e&&4!==e.length)throw new Error("tensor4d() requires shape to have four numbers");const s=(0,t.MZ)(r,n);if(4!==s.length&&1!==s.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return(0,u.Q)(r,e,s,n)}},35590:function(r,e,n){n.d(e,{L:function(){return s}});var t=n(28189),o=n(45119),u=n(19171);function s(r,e,n){if((0,o.HO)(r),null!=e&&5!==e.length)throw new Error("tensor5d() requires shape to have five numbers");const s=(0,t.MZ)(r,n);if(5!==s.length&&1!==s.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return(0,u.Q)(r,e,s,n)}},42768:function(r,e,n){n.d(e,{$:function(){return s}});var t=n(28189),o=n(45119),u=n(19171);function s(r,e,n){if((0,o.HO)(r),null!=e&&3!==e.length)throw new Error("tensor3d() requires shape to have three numbers");const s=(0,t.MZ)(r,n);if(3!==s.length&&1!==s.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===s.length&&null==e)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return(0,u.Q)(r,e,s,n)}},57311:function(r,e,n){n.d(e,{y:function(){return s}});var t=n(67897),o=n(15441),u=n(28189);const s=(0,n(70929).op)({tanh_:function(r){const e={x:(0,u.YT)(r,"x","tanh","float32")};return t.T2.runKernel(o.iuW,e)}})},62018:function(r,e,n){n.d(e,{t:function(){return s}});var t=n(28189),o=n(45119),u=n(19171);function s(r,e){(0,o.HO)(r);const n=(0,t.MZ)(r,e);if(1!==n.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return(0,u.Q)(r,null,n,e)}},64826:function(r,e,n){n.d(e,{V:function(){return a}});var t=n(67897),o=n(15441),u=n(28189),s=n(45119);const a=(0,n(70929).op)({tile_:function(r,e){const n=(0,u.YT)(r,"x","tile","string_or_numeric");s.vA(n.rank===e.length,(()=>`Error in transpose: rank of input ${n.rank} must match length of reps ${e}.`));const a={x:n},i={reps:e};return t.T2.runKernel(o.FAs,a,i)}})},67964:function(r,e,n){n.d(e,{N:function(){return i}});var t=n(67897),o=n(15441),u=n(28189),s=n(70929),a=n(26170);const i=(0,s.op)({tensorScatterUpdate_:function(r,e,n){const s=(0,u.YT)(r,"tensor","tensorScatterupdate"),i=(0,u.YT)(e,"indices","tensorScatterupdate","int32"),l=(0,u.YT)(n,"updates","tensorScatterupdate");if(a.validateInput(l,i,s.shape),s.dtype!==l.dtype)throw new Error(`tensor and updates must have the same dtype, instead they are ${s.dtype} and ${l.dtype}.`);const f={tensor:s,indices:i,updates:l};return t.T2.runKernel(o.X4r,f,{})}})},74027:function(r,e,n){n.d(e,{O:function(){return u}});var t=n(28189),o=n(19171);function u(r,e,n){const u=(0,t.MZ)(r,n);return(0,o.Q)(r,e,u,n)}},77126:function(r,e,n){n.d(e,{j:function(){return a}});var t=n(67897),o=n(15441),u=n(30565),s=n(28189);const a=(0,n(70929).op)({sub_:function(r,e){let n=(0,s.YT)(r,"a","sub"),a=(0,s.YT)(e,"b","sub");[n,a]=(0,u.makeTypesMatch)(n,a);const i={a:n,b:a};return t.T2.runKernel(o.PbM,i)}})},77823:function(r,e,n){n.d(e,{M:function(){return s}});var t=n(67897),o=n(15441),u=n(28189);const s=(0,n(70929).op)({tan_:function(r){const e={x:(0,u.YT)(r,"x","tan","float32")};return t.T2.runKernel(o.oFs,e)}})},83791:function(r,e,n){n.d(e,{c:function(){return a}});var t=n(67897),o=n(15441),u=n(28189),s=n(29809);const a=(0,n(70929).op)({sum_:function(r,e=null,n=!1){let a=(0,u.YT)(r,"x","sum");"bool"===a.dtype&&(a=(0,s.w)(a,"int32"));const i={x:a},l={axis:e,keepDims:n};return t.T2.runKernel(o.WuN,i,l)}})},97858:function(r,e,n){n.d(e,{e:function(){return a}});var t=n(45119),o=n(448),u=n(70929),s=n(89748);const a=(0,u.op)({truncatedNormal_:function(r,e=0,n=1,u,a){if((0,t.SA)(r),null!=u&&"bool"===u)throw new Error("Unsupported data type $ { dtype }");const i=new s.ai(e,n,u,!0,a),l=(0,o.r)(r,u);for(let t=0;t<l.values.length;t++)l.values[t]=i.nextValue();return l.toTensor()}})}}]);
//# sourceMappingURL=stylist-vendors-00868dd1.b95c39ff9315bf840603.js.map