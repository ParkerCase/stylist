"use strict";(self.webpackChunkStylistWidget=self.webpackChunkStylistWidget||[]).push([[5837],{63330:function(e,a,t){t.d(a,{t:function(){return s}});var n=t(9495);const s={kernelName:n.ComplexAbs,backendName:"cpu",kernelFunc:e=>{const{x:a}=e.inputs,t=e.backend,s=new Float32Array(n.util.sizeFromShape(a.shape)),r=t.data.get(a.dataId),o=r.complexTensorInfos.real,i=r.complexTensorInfos.imag,u=t.data.get(o.dataId).values,p=t.data.get(i.dataId).values;for(let n=0;n<u.length;n++){const e=u[n],a=p[n];s[n]=Math.hypot(e,a)}return t.makeOutput(s,a.shape,"float32")}}},66404:function(e,a,t){t.d(a,{F:function(){return r}});var n=t(9495);const s=(0,t(21694).v)(n.ClipByValue,((e,a)=>{const t=a;return e>t.clipValueMax?t.clipValueMax:e<t.clipValueMin?t.clipValueMin:e})),r={kernelName:n.ClipByValue,backendName:"cpu",kernelFunc:s}},89436:function(e,a,t){function n(e){const{inputs:a,backend:t}=e,{real:n,imag:s}=a,r=t.data.get(n.dataId).values,o=t.data.get(s.dataId).values,i=t.makeTensorInfo(n.shape,"complex64");return t.data.get(i.dataId).complexTensorInfos={real:t.makeTensorInfo(n.shape,"float32",r),imag:t.makeTensorInfo(s.shape,"float32",o)},i}t.d(a,{f:function(){return n},v:function(){return s}});const s={kernelName:t(9495).Complex,backendName:"cpu",kernelFunc:n}},97763:function(e,a,t){t.d(a,{h:function(){return s}});var n=t(9495);function s(e,a,t,s){const r=n.util.getArrayFromDType(t,n.util.sizeFromShape(a));if(s&&"string"!==t){let a=0;e.forEach((e=>{const t=n.util.sizeFromShape(e.shape);r.set(e.vals,a),a+=t}))}else{let s=0;e.forEach((e=>{const o="string"===t?n.backend_util.fromUint8ToStringArray(e.vals):e.vals;let i=0;for(let t=0;t<e.shape[0];++t){const n=t*a[1]+s;for(let a=0;a<e.shape[1];++a)r[n+a]=o[i++]}s+=e.shape[1]}))}return r}},98342:function(e,a,t){t.d(a,{V:function(){return l},x:function(){return c}});var n=t(9495),s=t(89436),r=t(97763),o=t(46936),i=t(18944),u=t(85806),p=t(14590);function c(e){const{inputs:a,backend:t,attrs:l}=e,{axis:d}=l,m=n.util.parseAxisParam(d,a[0].shape)[0],f=a.map((e=>e.shape));n.backend_util.assertParamsConsistent(f,m);let h=n.backend_util.computeOutShape(a.map((e=>e.shape)),m);if(0===n.util.sizeFromShape(h))return t.makeTensorInfo(h,a[0].dtype,[]);const k=a.filter((e=>n.util.sizeFromShape(e.shape)>0));if(1===k.length)return(0,o.D)({inputs:{x:k[0]},backend:t});if("complex64"===k[0].dtype){const e=k.map((e=>(0,u.x)({inputs:{input:e},backend:t}))),a=k.map((e=>(0,i.n)({inputs:{input:e},backend:t}))),n=c({inputs:e,backend:t,attrs:{axis:m}}),r=c({inputs:a,backend:t,attrs:{axis:m}}),o=(0,s.f)({inputs:{real:n,imag:r},backend:t});return e.forEach((e=>t.disposeIntermediateTensorInfo(e))),a.forEach((e=>t.disposeIntermediateTensorInfo(e))),t.disposeIntermediateTensorInfo(n),t.disposeIntermediateTensorInfo(r),o}const I=k.map((e=>{const a=[-1,n.util.sizeFromShape(e.shape.slice(m))];return(0,p.t)({inputs:{x:e},backend:t,attrs:{shape:a}})})),b=I.map((e=>({vals:t.data.get(e.dataId).values,shape:e.shape})));h=n.backend_util.computeOutShape(I.map((e=>e.shape)),1);const g=1===I[0].shape[0],x=(0,r.h)(b,h,a[0].dtype,g),v=n.backend_util.computeOutShape(k.map((e=>e.shape)),m),T=t.makeTensorInfo(v,a[0].dtype,x);return I.forEach((e=>t.disposeIntermediateTensorInfo(e))),T}const l={kernelName:n.Concat,backendName:"cpu",kernelFunc:c}}}]);
//# sourceMappingURL=stylist-vendors-522403e3.097d7afeab249dc43f56.js.map