{"version":3,"file":"stylist-vendors-01581d6f.8665252835039fbc7297.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/sources/file_data_source.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/sources/url_data_source.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/util/ring_buffer.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/version.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/util/deep_clone.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/util/growing_ring_buffer.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/util/source_util.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-data/dist/util/deep_map.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { env } from '@tensorflow/tfjs-core';\nimport { DataSource } from '../datasource';\nimport { FileChunkIterator } from '../iterators/file_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\n/**\n * Represents a file, blob, or Uint8Array readable as a stream of binary data\n * chunks.\n */\nexport class FileDataSource extends DataSource {\n    /**\n     * Create a `FileDataSource`.\n     *\n     * @param input Local file path, or `File`/`Blob`/`Uint8Array` object to\n     *     read. Local file only works in node environment.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(input, options = {}) {\n        super();\n        this.input = input;\n        this.options = options;\n    }\n    async iterator() {\n        if (isLocalPath(this.input) && env().get('IS_NODE')) {\n            // tslint:disable-next-line:no-require-imports\n            const fs = require('fs');\n            this.input = fs.readFileSync(this.input.slice(7));\n        }\n        // TODO(kangyizhang): Add LocalFileChunkIterator to split local streaming\n        // with file in browser.\n        return new FileChunkIterator(this.input, this.options);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsZV9kYXRhX3NvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtZGF0YS9zcmMvc291cmNlcy9maWxlX2RhdGFfc291cmNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQzFDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFekMsT0FBTyxFQUFDLGlCQUFpQixFQUEyQixNQUFNLGtDQUFrQyxDQUFDO0FBRTdGLE9BQU8sRUFBQyxXQUFXLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUVoRDs7O0dBR0c7QUFDSCxNQUFNLE9BQU8sY0FBZSxTQUFRLFVBQVU7SUFDNUM7Ozs7Ozs7T0FPRztJQUNILFlBQ2MsS0FBeUIsRUFDaEIsVUFBb0MsRUFBRTtRQUMzRCxLQUFLLEVBQUUsQ0FBQztRQUZJLFVBQUssR0FBTCxLQUFLLENBQW9CO1FBQ2hCLFlBQU8sR0FBUCxPQUFPLENBQStCO0lBRTdELENBQUM7SUFFRCxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbkQsOENBQThDO1lBQzlDLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUN6QixJQUFJLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQyxZQUFZLENBQUUsSUFBSSxDQUFDLEtBQWdCLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0Q7UUFDRCx5RUFBeUU7UUFDekUsd0JBQXdCO1FBQ3hCLE9BQU8sSUFBSSxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsS0FBb0IsRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDeEUsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtlbnZ9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5pbXBvcnQge0RhdGFTb3VyY2V9IGZyb20gJy4uL2RhdGFzb3VyY2UnO1xuaW1wb3J0IHtCeXRlQ2h1bmtJdGVyYXRvcn0gZnJvbSAnLi4vaXRlcmF0b3JzL2J5dGVfY2h1bmtfaXRlcmF0b3InO1xuaW1wb3J0IHtGaWxlQ2h1bmtJdGVyYXRvciwgRmlsZUNodW5rSXRlcmF0b3JPcHRpb25zfSBmcm9tICcuLi9pdGVyYXRvcnMvZmlsZV9jaHVua19pdGVyYXRvcic7XG5pbXBvcnQge0ZpbGVFbGVtZW50fSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQge2lzTG9jYWxQYXRofSBmcm9tICcuLi91dGlsL3NvdXJjZV91dGlsJztcblxuLyoqXG4gKiBSZXByZXNlbnRzIGEgZmlsZSwgYmxvYiwgb3IgVWludDhBcnJheSByZWFkYWJsZSBhcyBhIHN0cmVhbSBvZiBiaW5hcnkgZGF0YVxuICogY2h1bmtzLlxuICovXG5leHBvcnQgY2xhc3MgRmlsZURhdGFTb3VyY2UgZXh0ZW5kcyBEYXRhU291cmNlIHtcbiAgLyoqXG4gICAqIENyZWF0ZSBhIGBGaWxlRGF0YVNvdXJjZWAuXG4gICAqXG4gICAqIEBwYXJhbSBpbnB1dCBMb2NhbCBmaWxlIHBhdGgsIG9yIGBGaWxlYC9gQmxvYmAvYFVpbnQ4QXJyYXlgIG9iamVjdCB0b1xuICAgKiAgICAgcmVhZC4gTG9jYWwgZmlsZSBvbmx5IHdvcmtzIGluIG5vZGUgZW52aXJvbm1lbnQuXG4gICAqIEBwYXJhbSBvcHRpb25zIE9wdGlvbnMgcGFzc2VkIHRvIHRoZSB1bmRlcmx5aW5nIGBGaWxlQ2h1bmtJdGVyYXRvcmBzLFxuICAgKiAgIHN1Y2ggYXMge2NodW5rc2l6ZTogMTAyNH0uXG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICAgIHByb3RlY3RlZCBpbnB1dDogRmlsZUVsZW1lbnR8c3RyaW5nLFxuICAgICAgcHJvdGVjdGVkIHJlYWRvbmx5IG9wdGlvbnM6IEZpbGVDaHVua0l0ZXJhdG9yT3B0aW9ucyA9IHt9KSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIGFzeW5jIGl0ZXJhdG9yKCk6IFByb21pc2U8Qnl0ZUNodW5rSXRlcmF0b3I+IHtcbiAgICBpZiAoaXNMb2NhbFBhdGgodGhpcy5pbnB1dCkgJiYgZW52KCkuZ2V0KCdJU19OT0RFJykpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1yZXF1aXJlLWltcG9ydHNcbiAgICAgIGNvbnN0IGZzID0gcmVxdWlyZSgnZnMnKTtcbiAgICAgIHRoaXMuaW5wdXQgPSBmcy5yZWFkRmlsZVN5bmMoKHRoaXMuaW5wdXQgYXMgc3RyaW5nKS5zbGljZSg3KSk7XG4gICAgfVxuICAgIC8vIFRPRE8oa2FuZ3lpemhhbmcpOiBBZGQgTG9jYWxGaWxlQ2h1bmtJdGVyYXRvciB0byBzcGxpdCBsb2NhbCBzdHJlYW1pbmdcbiAgICAvLyB3aXRoIGZpbGUgaW4gYnJvd3Nlci5cbiAgICByZXR1cm4gbmV3IEZpbGVDaHVua0l0ZXJhdG9yKHRoaXMuaW5wdXQgYXMgRmlsZUVsZW1lbnQsIHRoaXMub3B0aW9ucyk7XG4gIH1cbn1cbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { DataSource } from '../datasource';\nimport { urlChunkIterator } from '../iterators/url_chunk_iterator';\nimport { isLocalPath } from '../util/source_util';\nimport { FileDataSource } from './file_data_source';\n/*\n * Represents a URL readable as a stream of binary data chunks.\n */\nexport class URLDataSource extends DataSource {\n    /**\n     * Create a `URLDataSource`.\n     *\n     * @param url A source URL string, or a `Request` object.\n     * @param options Options passed to the underlying `FileChunkIterator`s,\n     *   such as {chunksize: 1024}.\n     */\n    constructor(url, fileOptions = {}) {\n        super();\n        this.url = url;\n        this.fileOptions = fileOptions;\n    }\n    // TODO(soergel): provide appropriate caching options.  Currently this\n    // will download the URL anew for each call to iterator().  Since we have\n    // to treat the downloaded file as a blob/buffer anyway, we may as well retain\n    // it-- but that raises GC issues.  Also we may want a persistent disk cache.\n    async iterator() {\n        if (isLocalPath(this.url)) {\n            return (new FileDataSource(this.url, this.fileOptions))\n                .iterator();\n        }\n        else {\n            return urlChunkIterator(this.url, this.fileOptions);\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXJsX2RhdGFfc291cmNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1kYXRhL3NyYy9zb3VyY2VzL3VybF9kYXRhX3NvdXJjZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7Ozs7Ozs7OztHQWdCRztBQUVILE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHekMsT0FBTyxFQUFDLGdCQUFnQixFQUFDLE1BQU0saUNBQWlDLENBQUM7QUFDakUsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxvQkFBb0IsQ0FBQztBQUVsRDs7R0FFRztBQUNILE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBVTtJQUMzQzs7Ozs7O09BTUc7SUFDSCxZQUN1QixHQUFnQixFQUNoQixjQUF3QyxFQUFFO1FBQy9ELEtBQUssRUFBRSxDQUFDO1FBRmEsUUFBRyxHQUFILEdBQUcsQ0FBYTtRQUNoQixnQkFBVyxHQUFYLFdBQVcsQ0FBK0I7SUFFakUsQ0FBQztJQUVELHNFQUFzRTtJQUN0RSx5RUFBeUU7SUFDekUsOEVBQThFO0lBQzlFLDZFQUE2RTtJQUM3RSxLQUFLLENBQUMsUUFBUTtRQUNaLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUN6QixPQUFPLENBQUMsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLEdBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7aUJBQzVELFFBQVEsRUFBRSxDQUFDO1NBQ2pCO2FBQU07WUFDTCxPQUFPLGdCQUFnQixDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQ3JEO0lBQ0gsQ0FBQztDQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtEYXRhU291cmNlfSBmcm9tICcuLi9kYXRhc291cmNlJztcbmltcG9ydCB7Qnl0ZUNodW5rSXRlcmF0b3J9IGZyb20gJy4uL2l0ZXJhdG9ycy9ieXRlX2NodW5rX2l0ZXJhdG9yJztcbmltcG9ydCB7RmlsZUNodW5rSXRlcmF0b3JPcHRpb25zfSBmcm9tICcuLi9pdGVyYXRvcnMvZmlsZV9jaHVua19pdGVyYXRvcic7XG5pbXBvcnQge3VybENodW5rSXRlcmF0b3J9IGZyb20gJy4uL2l0ZXJhdG9ycy91cmxfY2h1bmtfaXRlcmF0b3InO1xuaW1wb3J0IHtpc0xvY2FsUGF0aH0gZnJvbSAnLi4vdXRpbC9zb3VyY2VfdXRpbCc7XG5pbXBvcnQge0ZpbGVEYXRhU291cmNlfSBmcm9tICcuL2ZpbGVfZGF0YV9zb3VyY2UnO1xuXG4vKlxuICogUmVwcmVzZW50cyBhIFVSTCByZWFkYWJsZSBhcyBhIHN0cmVhbSBvZiBiaW5hcnkgZGF0YSBjaHVua3MuXG4gKi9cbmV4cG9ydCBjbGFzcyBVUkxEYXRhU291cmNlIGV4dGVuZHMgRGF0YVNvdXJjZSB7XG4gIC8qKlxuICAgKiBDcmVhdGUgYSBgVVJMRGF0YVNvdXJjZWAuXG4gICAqXG4gICAqIEBwYXJhbSB1cmwgQSBzb3VyY2UgVVJMIHN0cmluZywgb3IgYSBgUmVxdWVzdGAgb2JqZWN0LlxuICAgKiBAcGFyYW0gb3B0aW9ucyBPcHRpb25zIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBgRmlsZUNodW5rSXRlcmF0b3JgcyxcbiAgICogICBzdWNoIGFzIHtjaHVua3NpemU6IDEwMjR9LlxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAgICBwcm90ZWN0ZWQgcmVhZG9ubHkgdXJsOiBSZXF1ZXN0SW5mbyxcbiAgICAgIHByb3RlY3RlZCByZWFkb25seSBmaWxlT3B0aW9uczogRmlsZUNodW5rSXRlcmF0b3JPcHRpb25zID0ge30pIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLy8gVE9ETyhzb2VyZ2VsKTogcHJvdmlkZSBhcHByb3ByaWF0ZSBjYWNoaW5nIG9wdGlvbnMuICBDdXJyZW50bHkgdGhpc1xuICAvLyB3aWxsIGRvd25sb2FkIHRoZSBVUkwgYW5ldyBmb3IgZWFjaCBjYWxsIHRvIGl0ZXJhdG9yKCkuICBTaW5jZSB3ZSBoYXZlXG4gIC8vIHRvIHRyZWF0IHRoZSBkb3dubG9hZGVkIGZpbGUgYXMgYSBibG9iL2J1ZmZlciBhbnl3YXksIHdlIG1heSBhcyB3ZWxsIHJldGFpblxuICAvLyBpdC0tIGJ1dCB0aGF0IHJhaXNlcyBHQyBpc3N1ZXMuICBBbHNvIHdlIG1heSB3YW50IGEgcGVyc2lzdGVudCBkaXNrIGNhY2hlLlxuICBhc3luYyBpdGVyYXRvcigpOiBQcm9taXNlPEJ5dGVDaHVua0l0ZXJhdG9yPiB7XG4gICAgaWYgKGlzTG9jYWxQYXRoKHRoaXMudXJsKSkge1xuICAgICAgcmV0dXJuIChuZXcgRmlsZURhdGFTb3VyY2UodGhpcy51cmwgYXMgc3RyaW5nLCB0aGlzLmZpbGVPcHRpb25zKSlcbiAgICAgICAgICAuaXRlcmF0b3IoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHVybENodW5rSXRlcmF0b3IodGhpcy51cmwsIHRoaXMuZmlsZU9wdGlvbnMpO1xuICAgIH1cbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n/**\n * A ring buffer, providing O(1) FIFO, LIFO, and related operations.\n */\nexport class RingBuffer {\n    /**\n     * Constructs a `RingBuffer`.\n     * @param capacity The number of items that the buffer can accomodate.\n     */\n    constructor(capacity) {\n        this.capacity = capacity;\n        // Note we store the indices in the range 0 <= index < 2*capacity.\n        // This allows us to distinguish the full from the empty case.\n        // See https://www.snellman.net/blog/archive/2016-12-13-ring-buffers/\n        this.begin = 0; // inclusive\n        this.end = 0; // exclusive\n        if (capacity == null) {\n            throw new RangeError('Can\\'t create a ring buffer of unknown capacity.');\n        }\n        if (capacity < 1) {\n            throw new RangeError('Can\\'t create ring buffer of capacity < 1.');\n        }\n        this.data = new Array(capacity);\n        this.doubledCapacity = 2 * capacity;\n    }\n    /**\n     * Map any index into the range 0 <= index < 2*capacity.\n     */\n    wrap(index) {\n        // don't trust % on negative numbers\n        while (index < 0) {\n            index += this.doubledCapacity;\n        }\n        return index % this.doubledCapacity;\n    }\n    get(index) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t get item at a negative index.');\n        }\n        return this.data[index % this.capacity];\n    }\n    set(index, value) {\n        if (index < 0) {\n            throw new RangeError('Can\\'t set item at a negative index.');\n        }\n        this.data[index % this.capacity] = value;\n    }\n    /**\n     * Returns the current number of items in the buffer.\n     */\n    length() {\n        let length = this.end - this.begin;\n        if (length < 0) {\n            length = this.doubledCapacity + length;\n        }\n        return length;\n    }\n    /**\n     * Reports whether the buffer is full.\n     * @returns true if the number of items in the buffer equals its capacity, and\n     *   false otherwise.\n     */\n    isFull() {\n        return this.length() === this.capacity;\n    }\n    /**\n     * Reports whether the buffer is empty.\n     * @returns true if the number of items in the buffer equals zero, and\n     *   false otherwise.\n     */\n    isEmpty() {\n        return this.length() === 0;\n    }\n    /**\n     * Adds an item to the end of the buffer.\n     */\n    push(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.set(this.end, value);\n        this.end = this.wrap(this.end + 1);\n    }\n    /**\n     * Adds many items to the end of the buffer, in order.\n     */\n    pushAll(values) {\n        for (const value of values) {\n            this.push(value);\n        }\n    }\n    /**\n     * Removes and returns the last item in the buffer.\n     */\n    pop() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        this.end = this.wrap(this.end - 1);\n        const result = this.get(this.end);\n        this.set(this.end, undefined);\n        return result;\n    }\n    /**\n     * Adds an item to the beginning of the buffer.\n     */\n    unshift(value) {\n        if (this.isFull()) {\n            throw new RangeError('Ring buffer is full.');\n        }\n        this.begin = this.wrap(this.begin - 1);\n        this.set(this.begin, value);\n    }\n    /**\n     * Removes and returns the first item in the buffer.\n     */\n    shift() {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const result = this.get(this.begin);\n        this.set(this.begin, undefined);\n        this.begin = this.wrap(this.begin + 1);\n        return result;\n    }\n    /**\n     * Removes and returns a specific item in the buffer, and moves the last item\n     * to the vacated slot.  This is useful for implementing a shuffling stream.\n     * Note that this operation necessarily scrambles the original order.\n     *\n     * @param relativeIndex: the index of the item to remove, relative to the\n     *   first item in the buffer (e.g., hiding the ring nature of the underlying\n     *   storage).\n     */\n    shuffleExcise(relativeIndex) {\n        if (this.isEmpty()) {\n            throw new RangeError('Ring buffer is empty.');\n        }\n        const index = this.wrap(this.begin + relativeIndex);\n        const result = this.get(index);\n        this.set(index, this.pop());\n        return result;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/** @license See the LICENSE file. */\n// This code is auto-generated, do not modify this file!\nconst version = '4.22.0';\nexport { version };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVyc2lvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtZGF0YS9zcmMvdmVyc2lvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxxQ0FBcUM7QUFFckMsd0RBQXdEO0FBQ3hELE1BQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQztBQUN6QixPQUFPLEVBQUMsT0FBTyxFQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiogQGxpY2Vuc2UgU2VlIHRoZSBMSUNFTlNFIGZpbGUuICovXG5cbi8vIFRoaXMgY29kZSBpcyBhdXRvLWdlbmVyYXRlZCwgZG8gbm90IG1vZGlmeSB0aGlzIGZpbGUhXG5jb25zdCB2ZXJzaW9uID0gJzQuMjIuMCc7XG5leHBvcnQge3ZlcnNpb259O1xuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\nimport { deepMap, isIterable } from './deep_map';\nexport function deepClone(container) {\n    return deepMap(container, cloneIfTensor);\n}\n// tslint:disable-next-line: no-any\nfunction cloneIfTensor(item) {\n    if (item instanceof tf.Tensor) {\n        return ({ value: item.clone(), recurse: false });\n    }\n    else if (isIterable(item)) {\n        return { value: null, recurse: true };\n    }\n    else {\n        return { value: item, recurse: false };\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVlcF9jbG9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtZGF0YS9zcmMvdXRpbC9kZWVwX2Nsb25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxLQUFLLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM1QyxPQUFPLEVBQUMsT0FBTyxFQUFpQixVQUFVLEVBQUMsTUFBTSxZQUFZLENBQUM7QUFFOUQsTUFBTSxVQUFVLFNBQVMsQ0FBSSxTQUFZO0lBQ3ZDLE9BQU8sT0FBTyxDQUFDLFNBQVMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUMzQyxDQUFDO0FBRUQsbUNBQW1DO0FBQ25DLFNBQVMsYUFBYSxDQUFDLElBQVM7SUFDOUIsSUFBSSxJQUFJLFlBQVksRUFBRSxDQUFDLE1BQU0sRUFBRTtRQUM3QixPQUFPLENBQUMsRUFBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUMsQ0FBQyxDQUFDO0tBQ2hEO1NBQU0sSUFBSSxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDM0IsT0FBTyxFQUFDLEtBQUssRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksRUFBQyxDQUFDO0tBQ3JDO1NBQU07UUFDTCxPQUFPLEVBQUMsS0FBSyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFDLENBQUM7S0FDdEM7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0ICogYXMgdGYgZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbmltcG9ydCB7ZGVlcE1hcCwgRGVlcE1hcFJlc3VsdCwgaXNJdGVyYWJsZX0gZnJvbSAnLi9kZWVwX21hcCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwQ2xvbmU8VD4oY29udGFpbmVyOiBUKTogVCB7XG4gIHJldHVybiBkZWVwTWFwKGNvbnRhaW5lciwgY2xvbmVJZlRlbnNvcik7XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTogbm8tYW55XG5mdW5jdGlvbiBjbG9uZUlmVGVuc29yKGl0ZW06IGFueSk6IERlZXBNYXBSZXN1bHQge1xuICBpZiAoaXRlbSBpbnN0YW5jZW9mIHRmLlRlbnNvcikge1xuICAgIHJldHVybiAoe3ZhbHVlOiBpdGVtLmNsb25lKCksIHJlY3Vyc2U6IGZhbHNlfSk7XG4gIH0gZWxzZSBpZiAoaXNJdGVyYWJsZShpdGVtKSkge1xuICAgIHJldHVybiB7dmFsdWU6IG51bGwsIHJlY3Vyc2U6IHRydWV9O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB7dmFsdWU6IGl0ZW0sIHJlY3Vyc2U6IGZhbHNlfTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport { RingBuffer } from './ring_buffer';\nclass GrowingRingBuffer extends RingBuffer {\n    /**\n     * Constructs a `GrowingRingBuffer`.\n     */\n    constructor() {\n        super(GrowingRingBuffer.INITIAL_CAPACITY);\n    }\n    isFull() {\n        return false;\n    }\n    push(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.push(value);\n    }\n    unshift(value) {\n        if (super.isFull()) {\n            this.expand();\n        }\n        super.unshift(value);\n    }\n    /**\n     * Doubles the capacity of the buffer.\n     */\n    expand() {\n        const newCapacity = this.capacity * 2;\n        const newData = new Array(newCapacity);\n        const len = this.length();\n        // Rotate the buffer to start at index 0 again, since we can't just\n        // allocate more space at the end.\n        for (let i = 0; i < len; i++) {\n            newData[i] = this.get(this.wrap(this.begin + i));\n        }\n        this.data = newData;\n        this.capacity = newCapacity;\n        this.doubledCapacity = 2 * this.capacity;\n        this.begin = 0;\n        this.end = len;\n    }\n}\nGrowingRingBuffer.INITIAL_CAPACITY = 32;\nexport { GrowingRingBuffer };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3Jvd2luZ19yaW5nX2J1ZmZlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtZGF0YS9zcmMvdXRpbC9ncm93aW5nX3JpbmdfYnVmZmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7O0dBZ0JHO0FBRUgsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV6QyxNQUFhLGlCQUFxQixTQUFRLFVBQWE7SUFHckQ7O09BRUc7SUFDSDtRQUNFLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzVDLENBQUM7SUFFUSxNQUFNO1FBQ2IsT0FBTyxLQUFLLENBQUM7SUFDZixDQUFDO0lBRVEsSUFBSSxDQUFDLEtBQVE7UUFDcEIsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDbEIsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1NBQ2Y7UUFDRCxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3BCLENBQUM7SUFFUSxPQUFPLENBQUMsS0FBUTtRQUN2QixJQUFJLEtBQUssQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUNsQixJQUFJLENBQUMsTUFBTSxFQUFFLENBQUM7U0FDZjtRQUNELEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVEOztPQUVHO0lBQ0ssTUFBTTtRQUNaLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sT0FBTyxHQUFHLElBQUksS0FBSyxDQUFJLFdBQVcsQ0FBQyxDQUFDO1FBQzFDLE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUUxQixtRUFBbUU7UUFDbkUsa0NBQWtDO1FBQ2xDLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLEVBQUUsQ0FBQyxFQUFFLEVBQUU7WUFDNUIsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7UUFFRCxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQztRQUNwQixJQUFJLENBQUMsUUFBUSxHQUFHLFdBQVcsQ0FBQztRQUM1QixJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO1FBQ3pDLElBQUksQ0FBQyxLQUFLLEdBQUcsQ0FBQyxDQUFDO1FBQ2YsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7SUFDakIsQ0FBQzs7QUE5Q2Msa0NBQWdCLEdBQUcsRUFBRSxDQUFDO1NBRDFCLGlCQUFpQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7UmluZ0J1ZmZlcn0gZnJvbSAnLi9yaW5nX2J1ZmZlcic7XG5cbmV4cG9ydCBjbGFzcyBHcm93aW5nUmluZ0J1ZmZlcjxUPiBleHRlbmRzIFJpbmdCdWZmZXI8VD4ge1xuICBwcml2YXRlIHN0YXRpYyBJTklUSUFMX0NBUEFDSVRZID0gMzI7XG5cbiAgLyoqXG4gICAqIENvbnN0cnVjdHMgYSBgR3Jvd2luZ1JpbmdCdWZmZXJgLlxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoR3Jvd2luZ1JpbmdCdWZmZXIuSU5JVElBTF9DQVBBQ0lUWSk7XG4gIH1cblxuICBvdmVycmlkZSBpc0Z1bGwoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgb3ZlcnJpZGUgcHVzaCh2YWx1ZTogVCkge1xuICAgIGlmIChzdXBlci5pc0Z1bGwoKSkge1xuICAgICAgdGhpcy5leHBhbmQoKTtcbiAgICB9XG4gICAgc3VwZXIucHVzaCh2YWx1ZSk7XG4gIH1cblxuICBvdmVycmlkZSB1bnNoaWZ0KHZhbHVlOiBUKSB7XG4gICAgaWYgKHN1cGVyLmlzRnVsbCgpKSB7XG4gICAgICB0aGlzLmV4cGFuZCgpO1xuICAgIH1cbiAgICBzdXBlci51bnNoaWZ0KHZhbHVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEb3VibGVzIHRoZSBjYXBhY2l0eSBvZiB0aGUgYnVmZmVyLlxuICAgKi9cbiAgcHJpdmF0ZSBleHBhbmQoKSB7XG4gICAgY29uc3QgbmV3Q2FwYWNpdHkgPSB0aGlzLmNhcGFjaXR5ICogMjtcbiAgICBjb25zdCBuZXdEYXRhID0gbmV3IEFycmF5PFQ+KG5ld0NhcGFjaXR5KTtcbiAgICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aCgpO1xuXG4gICAgLy8gUm90YXRlIHRoZSBidWZmZXIgdG8gc3RhcnQgYXQgaW5kZXggMCBhZ2Fpbiwgc2luY2Ugd2UgY2FuJ3QganVzdFxuICAgIC8vIGFsbG9jYXRlIG1vcmUgc3BhY2UgYXQgdGhlIGVuZC5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBuZXdEYXRhW2ldID0gdGhpcy5nZXQodGhpcy53cmFwKHRoaXMuYmVnaW4gKyBpKSk7XG4gICAgfVxuXG4gICAgdGhpcy5kYXRhID0gbmV3RGF0YTtcbiAgICB0aGlzLmNhcGFjaXR5ID0gbmV3Q2FwYWNpdHk7XG4gICAgdGhpcy5kb3VibGVkQ2FwYWNpdHkgPSAyICogdGhpcy5jYXBhY2l0eTtcbiAgICB0aGlzLmJlZ2luID0gMDtcbiAgICB0aGlzLmVuZCA9IGxlbjtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\n// Skip tslint any type check cause this method is aiming to check type of\n// input.\n// tslint:disable-next-line:no-any\nexport function isLocalPath(source) {\n    return (typeof source === 'string') && source.slice(0, 7) === 'file://';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic291cmNlX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWRhdGEvc3JjL3V0aWwvc291cmNlX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7R0FnQkc7QUFFSCwwRUFBMEU7QUFDMUUsU0FBUztBQUNULGtDQUFrQztBQUNsQyxNQUFNLFVBQVUsV0FBVyxDQUFDLE1BQVc7SUFDckMsT0FBTyxDQUFDLE9BQU8sTUFBTSxLQUFLLFFBQVEsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxLQUFLLFNBQVMsQ0FBQztBQUMxRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICpcbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLy8gU2tpcCB0c2xpbnQgYW55IHR5cGUgY2hlY2sgY2F1c2UgdGhpcyBtZXRob2QgaXMgYWltaW5nIHRvIGNoZWNrIHR5cGUgb2Zcbi8vIGlucHV0LlxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZXhwb3J0IGZ1bmN0aW9uIGlzTG9jYWxQYXRoKHNvdXJjZTogYW55KTogYm9vbGVhbiB7XG4gIHJldHVybiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpICYmIHNvdXJjZS5zbGljZSgwLCA3KSA9PT0gJ2ZpbGU6Ly8nO1xufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * =============================================================================\n */\nimport * as tf from '@tensorflow/tfjs-core';\n/**\n * Apply a mapping function to a nested structure in a recursive manner.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapResult`.  The `DeepMapResult` either provides a\n *   replacement value for that node (i.e., replacing the subtree), or indicates\n *   that the node should be processed recursively.\n */\nexport function deepMap(input, mapFn) {\n    return deepMapInternal(input, mapFn);\n}\n/**\n * @param seen: A Map of known object mappings (i.e., memoized results of\n *   `mapFn()`)\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepMapInternal(input, mapFn, seen = new Map(), containedIn = new Set()) {\n    if (input == null) {\n        return null;\n    }\n    if (typeof Blob === 'function' && input instanceof Blob) {\n        return input.slice();\n    }\n    if (containedIn.has(input)) {\n        throw new Error('Circular references are not supported.');\n    }\n    if (seen.has(input)) {\n        return seen.get(input);\n    }\n    const result = mapFn(input);\n    if (result.recurse && result.value !== null) {\n        throw new Error('A deep map function may not return both a value and recurse=true.');\n    }\n    if (!result.recurse) {\n        seen.set(input, result.value);\n        return result.value;\n    }\n    else if (isIterable(input)) {\n        // tslint:disable-next-line:no-any\n        const mappedIterable = Array.isArray(input) ? [] : {};\n        containedIn.add(input);\n        for (const k in input) {\n            const child = input[k];\n            const childResult = deepMapInternal(child, mapFn, seen, containedIn);\n            mappedIterable[k] = childResult;\n        }\n        containedIn.delete(input);\n        if (input.__proto__) {\n            mappedIterable.__proto__ = input.__proto__;\n        }\n        return mappedIterable;\n    }\n    else {\n        throw new Error(`Can't recurse into non-iterable type: ${input}`);\n    }\n}\n// TODO(soergel, kangyizhang) Reconsider naming of deepZip() to avoid confusion\n// with zip()\n/**\n * Zip nested structures together in a recursive manner.\n *\n * This has the effect of transposing or pivoting data, e.g. converting it from\n * a row-major representation to a column-major representation.\n *\n * For example, `deepZip([{a: 1, b: 2}, {a: 3, b: 4}])` returns\n * `{a: [1, 3], b: [2, 4]}`.\n *\n * The inputs should all have the same nested structure (i.e., of arrays and\n * dicts).  The result is a single object with the same nested structure, where\n * the leaves are arrays collecting the values of the inputs at that location\n * (or, optionally, the result of a custom function applied to those arrays).\n *\n * @param inputs: An array of the objects to zip together.\n * @param zipFn: (optional) A function that expects an array of elements at a\n *   single node of the object tree, and returns a `DeepMapResult`.  The\n *   `DeepMapResult` either provides a result value for that node (i.e.,\n *   representing the subtree), or indicates that the node should be processed\n *   recursively.  The default zipFn recurses as far as possible and places\n *   arrays at the leaves.\n */\nexport function deepZip(inputs, zipFn = zipToList) {\n    return deepZipInternal(inputs, zipFn);\n}\n/**\n * @param containedIn: An set containing objects on the reference path currently\n *   being processed (used to detect cycles).\n */\nfunction deepZipInternal(inputs, zipFn, containedIn = new Set()) {\n    // The recursion follows the structure of input 0; it's assumed that all the\n    // other inputs have the same structure.\n    const input = inputs[0];\n    if (containedIn.has(input)) {\n        throw new Error('Circular references are not supported.');\n    }\n    const result = zipFn(inputs);\n    if (result.recurse && result.value !== null) {\n        throw new Error('A deep zip function may not return both a value and recurse=true.');\n    }\n    if (!result.recurse) {\n        return result.value;\n    }\n    else if (isIterable(input)) {\n        // tslint:disable-next-line:no-any\n        const mappedIterable = Array.isArray(input) ? [] : {};\n        containedIn.add(input);\n        for (const k in input) {\n            const children = inputs.map(x => x[k]);\n            const childResult = deepZipInternal(children, zipFn, containedIn);\n            mappedIterable[k] = childResult;\n        }\n        containedIn.delete(input);\n        return mappedIterable;\n    }\n    else {\n        throw new Error(`Can't recurse into non-iterable type: ${input}`);\n    }\n}\n// tslint:disable-next-line:no-any\nexport function zipToList(x) {\n    if (x === null) {\n        return null;\n    }\n    // TODO(soergel): validate array type?\n    if (isIterable(x[0])) {\n        return { value: null, recurse: true };\n    }\n    else {\n        return { value: x, recurse: false };\n    }\n}\n/**\n * Apply an async mapping function to a nested structure in a recursive manner.\n *\n * This first creates a nested structure of Promises, and then awaits all of\n * those, resulting in a single Promise for a resolved nested structure.\n *\n * The result of the mapping is an object with the same nested structure (i.e.,\n * of arrays and dicts) as the input, except that some subtrees are replaced,\n * according to the results of the mapping function.\n *\n * Mappings are memoized.  Thus, if the nested structure contains the same\n * object in multiple positions, the output will contain the same mapped object\n * in those positions.  Cycles are not supported, however.\n *\n * @param input: The object to which to apply the mapping function.\n * @param mapFn: A function that expects a single node of the object tree, and\n *   returns a `DeepMapAsyncResult`.  The `DeepMapAsyncResult` either provides\n *   a `Promise` for a replacement value for that node (i.e., replacing the\n *   subtree), or indicates that the node should be processed recursively.  Note\n *   that the decision whether or not to recurse must be made immediately; only\n *   the mapped value may be promised.\n */\nexport async function deepMapAndAwaitAll(input, mapFn) {\n    const seen = new Map();\n    // First do a normal deepMap, collecting Promises in 'seen' as a side effect.\n    deepMapInternal(input, mapFn, seen);\n    // Replace the Promises in 'seen' in place.\n    // Note TypeScript provides no async map iteration, and regular map iteration\n    // is broken too, so sadly we have to do Array.from() to make it work.\n    // (There's no advantage to Promise.all(), and that would be tricky anyway.)\n    for (const key of Array.from(seen.keys())) {\n        const value = seen.get(key);\n        if (tf.util.isPromise(value)) {\n            const mappedValue = await value;\n            seen.set(key, mappedValue);\n        }\n    }\n    // Normal deepMap again, this time filling in the resolved values.\n    // It's unfortunate that we have to do two passes.\n    // TODO(soergel): test performance and think harder about a fast solution.\n    const result = deepMapInternal(input, mapFn, seen);\n    return result;\n}\n/**\n * Determine whether the argument is iterable.\n *\n * @returns true if the argument is an array or any non-Tensor object.\n */\n// tslint:disable-next-line:no-any\nexport function isIterable(obj) {\n    let isTextDecoder = false;\n    if (tf.env().get('IS_BROWSER')) {\n        isTextDecoder = obj instanceof TextDecoder;\n    }\n    else {\n        // tslint:disable-next-line:no-require-imports\n        const { StringDecoder } = require('string_decoder');\n        isTextDecoder = obj instanceof StringDecoder;\n    }\n    return obj != null && (!ArrayBuffer.isView(obj)) &&\n        (Array.isArray(obj) ||\n            (typeof obj === 'object' && !(obj instanceof tf.Tensor) &&\n                !(obj instanceof Promise) && !isTextDecoder));\n}\n/**\n * Determine whether the argument can be converted to Tensor.\n *\n * Tensors, primitives, arrays, and TypedArrays all qualify; anything else does\n * not.\n *\n * @returns true if the argument can be converted to Tensor.\n */\n// tslint:disable-next-line:no-any\nexport function canTensorify(obj) {\n    return obj == null || isPrimitive(obj) || Array.isArray(obj) ||\n        (typeof obj === 'object' && (obj instanceof tf.Tensor)) ||\n        tf.util.isTypedArray(obj);\n}\n/**\n * Returns true if the given `value` is a primitive type. Otherwise returns\n * false. This is equivalant to node util.isPrimitive\n */\nfunction isPrimitive(value) {\n    return (value === null ||\n        (typeof value !== 'object' && typeof value !== 'function'));\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["FileDataSource","constructor","input","options","super","this","iterator","env","get","fs","readFileSync","slice","RingBuffer","capacity","begin","end","RangeError","data","Array","doubledCapacity","wrap","index","set","value","length","isFull","isEmpty","push","pushAll","values","pop","result","undefined","unshift","shift","shuffleExcise","relativeIndex","version","deepClone","container","cloneIfTensor","item","clone","recurse","GrowingRingBuffer","INITIAL_CAPACITY","expand","newCapacity","newData","len","i","isLocalPath","source","deepMap","mapFn","deepMapInternal","seen","Map","containedIn","Set","Blob","has","Error","isIterable","mappedIterable","isArray","add","k","childResult","delete","__proto__","deepZip","inputs","zipFn","zipToList","deepZipInternal","map","x","async","deepMapAndAwaitAll","key","from","keys","mappedValue","obj","isTextDecoder","TextDecoder","StringDecoder","ArrayBuffer","isView","Promise","canTensorify"],"sourceRoot":""}