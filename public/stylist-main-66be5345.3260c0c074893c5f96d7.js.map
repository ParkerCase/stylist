{"version":3,"file":"stylist-main-66be5345.3260c0c074893c5f96d7.js","mappings":"kMASO,SAASA,EAA2BC,EAAS,CAAC,GAEjD,MAAMC,GAAY,OAAgB,CAC9BC,QAASF,EAAOE,SAAW,KAC3BC,OAAQH,EAAOG,OACfC,QAASJ,EAAOI,SAAW,KAC3BC,QAASL,EAAOK,QAChBC,cAAeN,EAAOM,cAEtBC,WAAY,IAWhB,OAR0B,OAAyBN,EASvD,CAEoCF,G,gFC/BhCS,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAQ,KAIjBO,KAAKR,EAAWK,EAAW,CAC7GH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,OAClE,GACJ,EAGA,MAAMO,EAAuB,CACzBC,MAAO,CACH,CACIC,GAAI,QACJC,KAAM,wBACNC,MAAO,aACPC,SAAU,OACVC,MAAO,MACPC,WAAY,gBACZC,OAAQ,CAAC,SACTC,MAAO,CAAC,IAAK,IAAK,IAAK,MACvBC,UAAW,CAAC,sDACZC,IAAK,IACLC,WAAY,IACZC,aAAc,CAAC,mBAAoB,8BACnCC,SAAS,GAEb,CACIZ,GAAI,QACJC,KAAM,iBACNC,MAAO,UACPC,SAAU,UACVC,MAAO,MACPC,WAAY,gBACZC,OAAQ,CAAC,QACTC,MAAO,CAAC,KAAM,KAAM,KAAM,MAC1BC,UAAW,CAAC,mDACZC,IAAK,IACLC,WAAY,IACZC,aAAc,CAAC,mBAAoB,6BACnCC,SAAS,GAEb,CACIZ,GAAI,QACJC,KAAM,kBACNC,MAAO,YACPC,SAAU,QACVC,MAAO,MACPC,WAAY,gBACZC,OAAQ,CAAC,QAAS,SAClBC,MAAO,CAAC,IAAK,IAAK,KAAM,MACxBC,UAAW,CAAC,iDACZC,IAAK,IACLC,WAAY,IACZC,aAAc,CAAC,cAAe,sBAC9BC,SAAS,GAEb,CACIZ,GAAI,QACJC,KAAM,mBACNC,MAAO,WACPC,SAAU,OACVC,MAAO,MACPC,WAAY,gBACZC,OAAQ,CAAC,OAAQ,QAAS,QAC1BC,MAAO,CAAC,IAAK,IAAK,IAAK,MACvBC,UAAW,CAAC,+CACZC,IAAK,IACLC,WAAY,IACZC,aAAc,CAAC,iBAAkB,kBACjCC,SAAS,IAGjBC,QAAS,CACL,CACIb,GAAI,UACJC,KAAM,sBACNa,SAAU,SACVJ,WAAY,IACZC,aAAc,CAAC,uBAAwB,iBACvCZ,MAAO,CACH,CACIC,GAAI,QACJC,KAAM,wBACNC,MAAO,aACPC,SAAU,OACVC,MAAO,MACPC,WAAY,gBACZC,OAAQ,CAAC,SACTC,MAAO,CAAC,IAAK,IAAK,IAAK,MACvBC,UAAW,CAAC,sDACZC,IAAK,IACLC,WAAY,IACZC,aAAc,CAAC,oBACfC,SAAS,GAEb,CACIZ,GAAI,QACJC,KAAM,iBACNC,MAAO,UACPC,SAAU,UACVC,MAAO,MACPC,WAAY,gBACZC,OAAQ,CAAC,QACTC,MAAO,CAAC,KAAM,KAAM,KAAM,MAC1BC,UAAW,CAAC,mDACZC,IAAK,IACLC,WAAY,IACZC,aAAc,CAAC,oBACfC,SAAS,GAEb,CACIZ,GAAI,QACJC,KAAM,kBACNC,MAAO,YACPC,SAAU,QACVC,MAAO,MACPC,WAAY,gBACZC,OAAQ,CAAC,QAAS,SAClBC,MAAO,CAAC,IAAK,IAAK,KAAM,MACxBC,UAAW,CAAC,iDACZC,IAAK,IACLC,WAAY,IACZC,aAAc,CAAC,eACfC,SAAS,OAOvBG,EAA8BC,OAAOC,OAAOD,OAAOC,OAAO,CAAC,EAAGnB,GAAuB,CAAEoB,OAAQ,YAAaC,UAAW,IAAIC,KAAQrB,MAAOD,EAAqBC,OAAS,GAAIc,QAASf,EAAqBe,SAAW,KACpN,MAAMQ,EACT,WAAAC,CAAYjD,GACRkD,KAAKlD,UAAYA,CACrB,CAEA,kBAAAmD,CAAmBC,GACf,OAAO7C,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,IAGI,MAAMG,QAAiBH,KAAKlD,UAAUsD,KAAK,0BAA2B,CAClET,OAAQO,EAAQP,OAChBU,QAASH,EAAQG,QACjBC,kBAAmBJ,EAAQI,kBAC3B1B,SAAUsB,EAAQtB,SAClB2B,MAAOL,EAAQK,MACfC,eAAgBN,EAAQM,eACxBC,SAAUP,EAAQO,SAClBC,WAAYR,EAAQQ,WACpBC,WAAYT,EAAQS,WACpBC,QAASV,EAAQU,UAGrB,GAAIT,GAAYU,MAAMC,QAAQX,EAAS3B,OACnC,OAAO2B,EAEX,MAAMY,EAAcZ,EACpB,GAAIY,GAAeF,MAAMC,QAAQC,EAAYC,mBACzC,MAAO,CACHrB,OAAQO,EAAQP,OAChBC,UAAW,IAAIC,KACfrB,MAAOuC,EAAYC,kBAAkBC,KAAKC,IAAS,CAC/CzC,GAAIyC,EAAKC,QACTzC,KAAMwC,EAAKxC,MAAQ,GACnBC,MAAOuC,EAAKvC,OAAS,GACrBC,SAAUsC,EAAKtC,UAAY,GAC3BC,MAAOqC,EAAKrC,OAAS,EACrBC,WAAYoC,EAAKE,YAAcF,EAAKE,YAAYC,MAAM,KAAK,GAAK,GAChEtC,OAAQmC,EAAKnC,QAAU,GACvBC,MAAOkC,EAAKlC,OAAS,GACrBC,UAAWiC,EAAKI,YAAc,GAC9BpC,IAAKgC,EAAKhC,KAAO,IACjBC,WAAY+B,EAAKK,OAAS,EAC1BnC,aAAc8B,EAAKM,eAAiB,GACpCnC,SAA2B,IAAlB6B,EAAKO,aAElBnC,SAAUyB,EAAYW,qBAAuB,IAAIT,KAAKU,IAAW,CAC7DlD,GAAIkD,EAAOC,UACXlD,KAAMiD,EAAOjD,MAAQ,cAAciD,EAAOpC,UAAY,iBACtDA,SAAUoC,EAAOpC,UAAY,GAC7BJ,WAAYwC,EAAOJ,OAAS,EAC5BnC,aAAcuC,EAAOH,eAAiB,GACtChD,MAAOmD,EAAOnD,MAAMyC,KAAKxC,IACrB,IAAIoD,EAEJ,MAAMX,EAAgD,QAAxCW,EAAKd,EAAYC,yBAAsC,IAAPa,OAAgB,EAASA,EAAGC,MAAMC,GAAMA,EAAEZ,UAAY1C,IACpH,OAAKyC,EAgBE,CACHzC,GAAIyC,EAAKC,QACTzC,KAAMwC,EAAKxC,MAAQ,GACnBC,MAAOuC,EAAKvC,OAAS,GACrBC,SAAUsC,EAAKtC,UAAY,GAC3BC,MAAOqC,EAAKrC,OAAS,EACrBC,WAAYoC,EAAKE,YAAcF,EAAKE,YAAYC,MAAM,KAAK,GAAK,GAChEtC,OAAQmC,EAAKnC,QAAU,GACvBC,MAAOkC,EAAKlC,OAAS,GACrBC,UAAWiC,EAAKI,YAAc,GAC9BpC,IAAKgC,EAAKhC,KAAO,IACjBC,WAAY+B,EAAKK,OAAS,EAC1BnC,aAAc8B,EAAKM,eAAiB,GACpCnC,SAA2B,IAAlB6B,EAAKO,UA5BP,CACHhD,KACAC,KAAM,GACNC,MAAO,GACPC,SAAU,GACVC,MAAO,EACPI,UAAW,CAAC,IACZH,WAAY,GACZC,OAAQ,GACRC,MAAO,GACPE,IAAK,GACLC,WAAY,EACZC,aAAc,GACdC,SAAS,EAgBhB,SAKjB,MAAM,IAAI2C,MAAM,mCACpB,CACA,MAAOC,GAOH,OAJI,iBAAmBA,IAAUA,EAAM9B,SAIhCX,CACX,CACJ,GACJ,CAEA,wBAAA0C,CAAyBvC,EAAQJ,EAAUgB,GACvC,OAAOlD,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,IACI,MAAMmC,EAAS,CAAC,EAKhB,OAJI5C,IACA4C,EAAO5C,SAAWA,GAClBgB,IACA4B,EAAO5B,MAAQA,EAAM6B,kBACZpC,KAAKlD,UAAUuF,IAAI,iBAAiB1C,4BAAkC,CAC/EwC,UAER,CACA,MAAOF,GAGH,OAAOzC,EAA4BF,OACvC,CACJ,GACJ,CAEA,eAAAgD,CAAgBC,GACZ,OAAOlF,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,IACI,aAAaA,KAAKlD,UAAUsD,KAAK,iBAAiBmC,EAAS5C,yBAAyB4C,EAASC,SAAU,CACnGC,MAAOF,EAASE,MAChBpC,QAASkC,EAASlC,SAE1B,CACA,MAAO4B,GAGP,CACJ,GACJ,CAEA,iBAAAS,CAAkBH,GACd,OAAOlF,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,IACI,aAAaA,KAAKlD,UAAUsD,KAAK,iBAAiBmC,EAAS5C,2BAA2B4C,EAASI,WAAY,CACvGF,MAAOF,EAASE,MAChBpC,QAASkC,EAASlC,SAE1B,CACA,MAAO4B,GAGP,CACJ,GACJ,CAEA,UAAAW,CAAWjB,GACP,OAAOtE,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,OAAOA,KAAKlD,UAAUsD,KAAK,iBAAiBuB,EAAOhC,iBAAkB,CACjEgD,SAAUhB,EAAOgB,SACjBnE,MAAOmD,EAAOnD,MACdE,KAAMiD,EAAOjD,KACbmE,MAAOlB,EAAOkB,OAEtB,GACJ,CAEA,eAAAC,CAAgBnD,GACZ,OAAOtC,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,OAAOA,KAAKlD,UAAUuF,IAAI,iBAAiB1C,YAC/C,GACJ,CAEA,iBAAAoD,CAAkBpD,EAAQgD,GACtB,OAAOtF,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,OAAOA,KAAKlD,UAAUkG,OAAO,iBAAiBrD,aAAkBgD,IACpE,GACJ,CAEA,eAAAM,CAAgB/C,GACZ,OAAO7C,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,OAAOA,KAAKlD,UAAUsD,KAAK,wBAAyBF,EACxD,GACJ,CAEA,cAAAgD,CAAehD,GACX,OAAO7C,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,OAAOA,KAAKlD,UAAUsD,KAAK,0BAA2BF,EAC1D,GACJ,CAEA,WAAAiD,CAAYxD,EAAQ6C,GAChB,OAAOnF,EAAU2C,UAAM,OAAQ,GAAQ,YACnC,OAAOA,KAAKlD,UAAUsD,KAAK,iBAAiBT,eAAoB6C,IAAU,CAAC,EAC/E,GACJ,E","sources":["webpack://StylistWidget/./src/api/intelligentApiClient.ts","webpack://StylistWidget/./src/api/recommendationApi.ts"],"sourcesContent":["// Intelligent API client with automatic fallback to mock data\nimport { createApiClient } from './apiClient';\nimport { setupMockApiInterceptors } from '../services/mockApiMiddleware';\nimport { USE_MOCK_RETAILER, FORCE_DEMO_MODE, API_URL, API_TIMEOUT } from '../utils/environment';\nimport { shouldUseMockData } from '../mock-data';\n/**\n * Create an API client with intelligent fallback to mock data\n * This is the main client that should be used throughout the application\n */\nexport function createIntelligentApiClient(config = {}) {\n    // Create base API client\n    const apiClient = createApiClient({\n        baseURL: config.baseURL || API_URL,\n        apiKey: config.apiKey,\n        timeout: config.timeout || API_TIMEOUT,\n        headers: config.headers,\n        getAuthHeader: config.getAuthHeader,\n        // Always use at least 2 retries in case of network issues\n        maxRetries: 2\n    });\n    // Enable mock data capabilities\n    const enhancedApiClient = setupMockApiInterceptors(apiClient);\n    // Log configuration for debugging\n    console.debug('Intelligent API Client initialized:', {\n        useMockData: shouldUseMockData() || FORCE_DEMO_MODE,\n        useMockRetailer: USE_MOCK_RETAILER,\n        forceDemo: FORCE_DEMO_MODE,\n        baseURL: config.baseURL || API_URL\n    });\n    return enhancedApiClient;\n}\n// Export a singleton instance for general use\nexport const intelligentApiClient = createIntelligentApiClient();\n","// API client for recommendation-related endpoints\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport axios from 'axios';\n// Mock data for fallback when API is unavailable\nconst MOCK_RECOMMENDATIONS = {\n    items: [\n        {\n            id: 'mock1',\n            name: 'Classic White T-Shirt',\n            brand: 'Essentials',\n            category: 'Tops',\n            price: 24.99,\n            retailerId: 'demo_retailer',\n            colors: ['white'],\n            sizes: ['S', 'M', 'L', 'XL'],\n            imageUrls: ['https://via.placeholder.com/300?text=White+T-Shirt'],\n            url: '#',\n            matchScore: 0.95,\n            matchReasons: ['Versatile staple', 'Matches your style profile'],\n            inStock: true\n        },\n        {\n            id: 'mock2',\n            name: 'Slim Fit Jeans',\n            brand: 'DenimCo',\n            category: 'Bottoms',\n            price: 59.99,\n            retailerId: 'demo_retailer',\n            colors: ['blue'],\n            sizes: ['28', '30', '32', '34'],\n            imageUrls: ['https://via.placeholder.com/300?text=Slim+Jeans'],\n            url: '#',\n            matchScore: 0.92,\n            matchReasons: ['Versatile staple', 'Complements your wardrobe'],\n            inStock: true\n        },\n        {\n            id: 'mock3',\n            name: 'Casual Sneakers',\n            brand: 'UrbanStep',\n            category: 'Shoes',\n            price: 79.99,\n            retailerId: 'demo_retailer',\n            colors: ['white', 'black'],\n            sizes: ['8', '9', '10', '11'],\n            imageUrls: ['https://via.placeholder.com/300?text=Sneakers'],\n            url: '#',\n            matchScore: 0.89,\n            matchReasons: ['Comfortable', 'Versatile footwear'],\n            inStock: true\n        },\n        {\n            id: 'mock4',\n            name: 'Oversized Hoodie',\n            brand: 'Comfort+',\n            category: 'Tops',\n            price: 49.99,\n            retailerId: 'demo_retailer',\n            colors: ['gray', 'black', 'blue'],\n            sizes: ['S', 'M', 'L', 'XL'],\n            imageUrls: ['https://via.placeholder.com/300?text=Hoodie'],\n            url: '#',\n            matchScore: 0.87,\n            matchReasons: ['Casual comfort', 'Trending style'],\n            inStock: true\n        }\n    ],\n    outfits: [\n        {\n            id: 'outfit1',\n            name: 'Casual Weekend Look',\n            occasion: 'Casual',\n            matchScore: 0.93,\n            matchReasons: ['Perfect for weekends', 'Easy to style'],\n            items: [\n                {\n                    id: 'mock1',\n                    name: 'Classic White T-Shirt',\n                    brand: 'Essentials',\n                    category: 'Tops',\n                    price: 24.99,\n                    retailerId: 'demo_retailer',\n                    colors: ['white'],\n                    sizes: ['S', 'M', 'L', 'XL'],\n                    imageUrls: ['https://via.placeholder.com/300?text=White+T-Shirt'],\n                    url: '#',\n                    matchScore: 0.95,\n                    matchReasons: ['Versatile staple'],\n                    inStock: true\n                },\n                {\n                    id: 'mock2',\n                    name: 'Slim Fit Jeans',\n                    brand: 'DenimCo',\n                    category: 'Bottoms',\n                    price: 59.99,\n                    retailerId: 'demo_retailer',\n                    colors: ['blue'],\n                    sizes: ['28', '30', '32', '34'],\n                    imageUrls: ['https://via.placeholder.com/300?text=Slim+Jeans'],\n                    url: '#',\n                    matchScore: 0.92,\n                    matchReasons: ['Versatile staple'],\n                    inStock: true\n                },\n                {\n                    id: 'mock3',\n                    name: 'Casual Sneakers',\n                    brand: 'UrbanStep',\n                    category: 'Shoes',\n                    price: 79.99,\n                    retailerId: 'demo_retailer',\n                    colors: ['white', 'black'],\n                    sizes: ['8', '9', '10', '11'],\n                    imageUrls: ['https://via.placeholder.com/300?text=Sneakers'],\n                    url: '#',\n                    matchScore: 0.89,\n                    matchReasons: ['Comfortable'],\n                    inStock: true\n                }\n            ]\n        }\n    ]\n};\n// Add missing required fields for mock data\nconst completeMockRecommendations = Object.assign(Object.assign({}, MOCK_RECOMMENDATIONS), { userId: 'mock_user', timestamp: new Date(), items: MOCK_RECOMMENDATIONS.items || [], outfits: MOCK_RECOMMENDATIONS.outfits || [] });\nexport class RecommendationApi {\n    constructor(apiClient) {\n        this.apiClient = apiClient;\n    }\n    // Get personalized recommendations\n    getRecommendations(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Add timeouts and retries for production reliability\n                // Use the correct endpoint format to match backend structure - converting GET to POST\n                const response = yield this.apiClient.post(`/api/v1/recommendations`, {\n                    userId: request.userId,\n                    context: request.context,\n                    filterByRetailers: request.filterByRetailers,\n                    category: request.category,\n                    limit: request.limit,\n                    includeOutfits: request.includeOutfits,\n                    trending: request.trending,\n                    deepSearch: request.deepSearch,\n                    priceRange: request.priceRange,\n                    filters: request.filters\n                });\n                // If the response is valid, return it\n                if (response && Array.isArray(response.items)) {\n                    return response;\n                }\n                const apiResponse = response;\n                if (apiResponse && Array.isArray(apiResponse.recommended_items)) {\n                    return {\n                        userId: request.userId,\n                        timestamp: new Date(),\n                        items: apiResponse.recommended_items.map((item) => ({\n                            id: item.item_id,\n                            name: item.name || '',\n                            brand: item.brand || '',\n                            category: item.category || '',\n                            price: item.price || 0,\n                            retailerId: item.retailer_id ? item.retailer_id.split('_')[0] : '',\n                            colors: item.colors || [],\n                            sizes: item.sizes || [],\n                            imageUrls: item.image_urls || [],\n                            url: item.url || '#',\n                            matchScore: item.score || 0,\n                            matchReasons: item.match_reasons || [],\n                            inStock: item.in_stock !== false\n                        })),\n                        outfits: (apiResponse.recommended_outfits || []).map((outfit) => ({\n                            id: outfit.outfit_id,\n                            name: outfit.name || `Outfit for ${outfit.occasion || 'any occasion'}`,\n                            occasion: outfit.occasion || '',\n                            matchScore: outfit.score || 0,\n                            matchReasons: outfit.match_reasons || [],\n                            items: outfit.items.map((id) => {\n                                var _a;\n                                // Find the full item in the items array\n                                const item = (_a = apiResponse.recommended_items) === null || _a === void 0 ? void 0 : _a.find((i) => i.item_id === id);\n                                if (!item)\n                                    return {\n                                        id,\n                                        name: '',\n                                        brand: '',\n                                        category: '',\n                                        price: 0,\n                                        imageUrls: [''],\n                                        retailerId: '',\n                                        colors: [],\n                                        sizes: [],\n                                        url: '',\n                                        matchScore: 0,\n                                        matchReasons: [],\n                                        inStock: true\n                                    };\n                                return {\n                                    id: item.item_id,\n                                    name: item.name || '',\n                                    brand: item.brand || '',\n                                    category: item.category || '',\n                                    price: item.price || 0,\n                                    retailerId: item.retailer_id ? item.retailer_id.split('_')[0] : '',\n                                    colors: item.colors || [],\n                                    sizes: item.sizes || [],\n                                    imageUrls: item.image_urls || [],\n                                    url: item.url || '#',\n                                    matchScore: item.score || 0,\n                                    matchReasons: item.match_reasons || [],\n                                    inStock: item.in_stock !== false\n                                };\n                            })\n                        }))\n                    };\n                }\n                throw new Error('Invalid response format from API');\n            }\n            catch (error) {\n                console.warn('Failed to fetch recommendations from API, using mock data:', error);\n                // Add log for clean error message\n                if (axios.isAxiosError(error) && error.response) {\n                    console.error(`Recommendation API error: ${error.response.status} - ${error.response.statusText}`);\n                }\n                // Return mock data as fallback\n                return completeMockRecommendations;\n            }\n        });\n    }\n    // Get outfit recommendations\n    getOutfitRecommendations(userId, occasion, limit) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const params = {};\n                if (occasion)\n                    params.occasion = occasion;\n                if (limit)\n                    params.limit = limit.toString();\n                return yield this.apiClient.get(`/api/v1/users/${userId}/outfits/recommendations`, {\n                    params\n                });\n            }\n            catch (error) {\n                console.warn('Failed to fetch outfit recommendations, using mock data:', error);\n                // Return mock outfit data as fallback\n                return completeMockRecommendations.outfits;\n            }\n        });\n    }\n    // Add item feedback (like/dislike)\n    addItemFeedback(feedback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield this.apiClient.post(`/api/v1/users/${feedback.userId}/feedback/items/${feedback.itemId}`, {\n                    liked: feedback.liked,\n                    context: feedback.context\n                });\n            }\n            catch (error) {\n                console.warn('Failed to add item feedback, ignoring:', error);\n                // Silently fail - UI will still update but backend won't persist\n            }\n        });\n    }\n    // Add outfit feedback (like/dislike)\n    addOutfitFeedback(feedback) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield this.apiClient.post(`/api/v1/users/${feedback.userId}/feedback/outfits/${feedback.outfitId}`, {\n                    liked: feedback.liked,\n                    context: feedback.context\n                });\n            }\n            catch (error) {\n                console.warn('Failed to add outfit feedback, ignoring:', error);\n                // Silently fail - UI will still update but backend won't persist\n            }\n        });\n    }\n    // Save outfit to user's favorites\n    saveOutfit(outfit) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.apiClient.post(`/api/v1/users/${outfit.userId}/outfits`, {\n                outfitId: outfit.outfitId,\n                items: outfit.items,\n                name: outfit.name,\n                notes: outfit.notes\n            });\n        });\n    }\n    // Get saved outfits\n    getSavedOutfits(userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.apiClient.get(`/api/v1/users/${userId}/outfits`);\n        });\n    }\n    // Delete saved outfit\n    deleteSavedOutfit(userId, outfitId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.apiClient.delete(`/api/v1/users/${userId}/outfits/${outfitId}`);\n        });\n    }\n    // Get similar items\n    getSimilarItems(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.apiClient.post('/api/v1/similar-items', request);\n        });\n    }\n    // Complete an outfit based on selected items\n    completeOutfit(request) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.apiClient.post('/api/v1/complete-outfit', request);\n        });\n    }\n    // Log item view\n    logItemView(userId, itemId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return this.apiClient.post(`/api/v1/users/${userId}/view-item/${itemId}`, {});\n        });\n    }\n}\n"],"names":["createIntelligentApiClient","config","apiClient","baseURL","apiKey","timeout","headers","getAuthHeader","maxRetries","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","MOCK_RECOMMENDATIONS","items","id","name","brand","category","price","retailerId","colors","sizes","imageUrls","url","matchScore","matchReasons","inStock","outfits","occasion","completeMockRecommendations","Object","assign","userId","timestamp","Date","RecommendationApi","constructor","this","getRecommendations","request","response","post","context","filterByRetailers","limit","includeOutfits","trending","deepSearch","priceRange","filters","Array","isArray","apiResponse","recommended_items","map","item","item_id","retailer_id","split","image_urls","score","match_reasons","in_stock","recommended_outfits","outfit","outfit_id","_a","find","i","Error","error","getOutfitRecommendations","params","toString","get","addItemFeedback","feedback","itemId","liked","addOutfitFeedback","outfitId","saveOutfit","notes","getSavedOutfits","deleteSavedOutfit","delete","getSimilarItems","completeOutfit","logItemView"],"sourceRoot":""}