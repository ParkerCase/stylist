{"version":3,"file":"stylist-vendors-e1d614cc.0a87a5c0c10450912228.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/engine/executor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Executor: Evaluates SymbolicTensor based on feeds.\n */\nimport { cast, dispose, memory, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../errors';\nimport { LruCache } from '../utils/executor_utils';\nimport { toList } from '../utils/generic_utils';\nimport { InputLayer } from './input_layer';\nimport { SymbolicTensor } from './topology';\n/**\n * Helper function to check the dtype and shape compatibility of a feed value.\n */\nfunction assertFeedCompatibility(key, val) {\n    // Check dtype compatibility.\n    if (key.dtype == null || key.dtype === val.dtype) {\n        //  a.  If types match, return val tensor as is.\n        return val;\n    }\n    try {\n        //  b. Attempt to convert to expected type.\n        return cast(val, key.dtype);\n    }\n    catch (err) {\n        //  c. If conversion fails, return helpful error.\n        throw new ValueError(`The dtype of the feed (${val.dtype}) can not be cast to the dtype ` +\n            `of the key '${key.name}' (${key.dtype}).`);\n    }\n}\n/**\n * FeedDict: A mapping from unique SymbolicTensors to feed values for them.\n * A feed value is a concrete value represented as an `Tensor`.\n */\nexport class FeedDict {\n    /**\n     * Constructor, optionally does copy-construction.\n     * @param feeds An Array of `Feed`s, or another `FeedDict`, in which case\n     *   copy-construction will be performed.\n     */\n    constructor(feeds) {\n        this.id2Value = {};\n        this.id2Mask = {};\n        this.name2Id = {};\n        if (feeds instanceof FeedDict) {\n            for (const id in feeds.id2Value) {\n                this.id2Value[id] = feeds.id2Value[id];\n                if (id in feeds.id2Mask) {\n                    this.id2Mask[id] = feeds.id2Mask[id];\n                }\n            }\n        }\n        else {\n            if (feeds == null) {\n                return;\n            }\n            for (const feed of feeds) {\n                this.add(feed.key, feed.value);\n            }\n        }\n    }\n    /**\n     * Add a key-value pair to the FeedDict.\n     *\n     * @param key The key of the feed.\n     * @param value The value of the tensor feed.\n     * @param mask The value of the mask feed (optional).\n     * @returns This `FeedDict`.\n     * @throws ValueError: If the key `SymbolicTensor` already exists in the\n     *   `FeedDict`.\n     */\n    add(key, value, mask) {\n        if (this.id2Value[key.id] == null) {\n            this.id2Value[key.id] = assertFeedCompatibility(key, value);\n            this.name2Id[key.name] = key.id;\n            if (mask != null) {\n                this.id2Mask[key.id] = mask;\n            }\n        }\n        else {\n            throw new ValueError(`Duplicate key: name=${key.name}, id=${key.id}`);\n        }\n        return this;\n    }\n    /**\n     * Add a Feed to the FeedDict.\n     * @param feed The new `Feed` to add.\n     * @returns This `FeedDict`.\n     */\n    addFeed(feed) {\n        this.add(feed.key, feed.value);\n    }\n    /**\n     * Probe whether a key already exists in the FeedDict.\n     * @param key\n     */\n    hasKey(key) {\n        return this.id2Value[key.id] != null;\n    }\n    /**\n     * Get all the SymbolicTensor available in this FeedDict.\n     */\n    names() {\n        return Object.keys(this.name2Id);\n    }\n    /**\n     * Get the feed value for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed value.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getValue(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Value[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Value[id];\n        }\n    }\n    /**\n     * Get the feed mask for given key.\n     * @param key The SymbolicTensor, or its name (as a string), of which the\n     *     value is sought.\n     * @returns If `key` exists, the corresponding feed mask.\n     * @throws ValueError: If `key` does not exist in this `FeedDict`.\n     */\n    getMask(key) {\n        if (key instanceof SymbolicTensor) {\n            if (this.id2Value[key.id] == null) {\n                throw new ValueError(`Nonexistent key: ${key.name}`);\n            }\n            else {\n                return this.id2Mask[key.id];\n            }\n        }\n        else {\n            const id = this.name2Id[key];\n            if (id == null) {\n                throw new ValueError(`Feed dict has no SymbolicTensor name: ${key}`);\n            }\n            return this.id2Mask[id];\n        }\n    }\n    /** Dispose all mask Tensors held by this object. */\n    disposeMasks() {\n        if (this.id2Mask != null) {\n            dispose(this.id2Mask);\n        }\n    }\n}\n// Cache for topologically sorted SymbolicTensors for given execution\n// targets (i.e., fetches).\nexport const cachedSorted = new LruCache();\n// Cache for recipient count maps for given execution targets (i.e., fetches).\nexport const cachedRecipientCounts = new LruCache();\nexport function updateCacheMaxEntries(maxEntries) {\n    if (cachedSorted != null) {\n        cachedSorted.setMaxEntries(maxEntries);\n    }\n    if (cachedRecipientCounts != null) {\n        cachedRecipientCounts.setMaxEntries(maxEntries);\n    }\n}\n/**\n * Execute a SymbolicTensor by using concrete feed values.\n *\n * A `SymbolicTensor` object is a node in a computation graph of TF.js\n * Layers. The object is backed by a source layer and input\n * `SymbolicTensor`s to the source layer. This method evaluates\n * the `call()` method of the source layer, using concrete values of the\n * inputs obtained from either\n * * `feedDict`, if the input key exists in `feedDict`, or else,\n * * a recursive call to `execute()` itself.\n *\n * @param x: The `SymbolicTensor` to execute.\n * @param feedDict: The feed values, as base condition of the recursion.\n *   execution.\n * @param kwargs: Optional keyword arguments.\n * @param probe: A probe object (of interface `ExecutionProbe`) used for\n *   testing memory footprint of `execute` calls.\n * @returns Result of the execution.\n * @throws ValueError: If any `SymbolicTensor`s from `InputLayer`s\n *   encountered during the execution lacks a feed value in `feedDict`.\n */\nexport function execute(fetches, feedDict, kwargs, probe) {\n    const training = kwargs == null ? false : kwargs['training'];\n    const arrayFetches = Array.isArray(fetches);\n    const fetchArray = arrayFetches ? fetches : [fetches];\n    const outputNames = fetchArray.map(t => t.name);\n    const finalOutputs = [];\n    const feedNames = feedDict.names();\n    for (const outputName of outputNames) {\n        if (feedNames.indexOf(outputName) !== -1) {\n            finalOutputs.push(feedDict.getValue(outputName));\n        }\n        else {\n            finalOutputs.push(null);\n        }\n    }\n    if (probe != null) {\n        // For optional probing of memory footprint during execution.\n        probe.maxNumTensors = -Infinity;\n        probe.minNumTensors = Infinity;\n    }\n    // Check cache.\n    const fetchAndFeedKey = outputNames.join(',') + '|' + feedDict.names().sort().join(',');\n    let sorted = cachedSorted.get(fetchAndFeedKey);\n    let recipientCounts;\n    if (sorted == null) {\n        // Cache doesn't contain the desired combination of fetches. Compute\n        // topological sort for the combination for the first time.\n        const out = getTopologicalSortAndRecipientCounts(fetchArray, feedDict);\n        sorted = out.sorted;\n        recipientCounts = out.recipientCounts;\n        // Store results in cache for future use.\n        cachedSorted.put(fetchAndFeedKey, sorted);\n        cachedRecipientCounts.put(fetchAndFeedKey, recipientCounts);\n    }\n    recipientCounts = {};\n    if (!training) {\n        Object.assign(recipientCounts, cachedRecipientCounts.get(fetchAndFeedKey));\n    }\n    const internalFeedDict = new FeedDict(feedDict);\n    // Start iterative execution on the topologically-sorted SymbolicTensors.\n    for (let i = 0; i < sorted.length; ++i) {\n        if (probe != null) {\n            // For optional probing of memory usage during execution.\n            const numTensors = memory().numTensors;\n            if (numTensors > probe.maxNumTensors) {\n                probe.maxNumTensors = numTensors;\n            }\n            if (numTensors < probe.minNumTensors) {\n                probe.minNumTensors = numTensors;\n            }\n        }\n        const symbolic = sorted[i];\n        const srcLayer = symbolic.sourceLayer;\n        if (srcLayer instanceof InputLayer) {\n            continue;\n        }\n        const inputValues = [];\n        const inputMasks = [];\n        const tensorsToDispose = [];\n        let maskExists = false;\n        for (const input of symbolic.inputs) {\n            const value = internalFeedDict.getValue(input);\n            const mask = internalFeedDict.getMask(input);\n            inputValues.push(value);\n            inputMasks.push(mask);\n            if (mask != null) {\n                maskExists = true;\n            }\n            if (!training) {\n                recipientCounts[input.name]--;\n                if (recipientCounts[input.name] === 0 && !feedDict.hasKey(input) &&\n                    outputNames.indexOf(input.name) === -1 && !value.isDisposed &&\n                    input.sourceLayer.stateful !== true) {\n                    tensorsToDispose.push(value);\n                }\n            }\n        }\n        if (maskExists) {\n            kwargs = kwargs || {};\n            kwargs['mask'] = inputMasks[0];\n        }\n        const outputTensors = toList(srcLayer.apply(inputValues, kwargs));\n        let outputMask = null;\n        if (srcLayer.supportsMasking) {\n            outputMask = srcLayer.computeMask(inputValues, inputMasks);\n        }\n        const layerOutputs = getNodeOutputs(symbolic);\n        const outputSymbolicTensors = Array.isArray(layerOutputs) ? layerOutputs : [layerOutputs];\n        for (let i = 0; i < outputSymbolicTensors.length; ++i) {\n            if (!internalFeedDict.hasKey(outputSymbolicTensors[i])) {\n                internalFeedDict.add(outputSymbolicTensors[i], outputTensors[i], Array.isArray(outputMask) ? outputMask[0] : outputMask);\n            }\n            const index = outputNames.indexOf(outputSymbolicTensors[i].name);\n            if (index !== -1) {\n                finalOutputs[index] = outputTensors[i];\n            }\n        }\n        if (!training) {\n            // Clean up Tensors that are no longer needed.\n            dispose(tensorsToDispose);\n        }\n    }\n    // NOTE(cais): Unlike intermediate tensors, we don't discard mask\n    // tensors as we go, because these tensors are sometimes passed over a\n    // series of mutliple layers, i.e., not obeying the immediate input\n    // relations in the graph. If this becomes a memory-usage concern,\n    // we can improve this in the future.\n    internalFeedDict.disposeMasks();\n    return arrayFetches ? finalOutputs : finalOutputs[0];\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for an array of fetches.\n *\n * This function calls getTopologicalSortAndRecipientCountsForOneFetch and\n * merges their results.\n *\n * @param fetch The array of fetches requested. Must be a non-empty array.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientCounts: Recipient counts for all SymbolicTensors in `sorted`.\n */\nfunction getTopologicalSortAndRecipientCounts(fetches, feedDict) {\n    util.assert(fetches != null && fetches.length > 0, () => `Expected at least one fetch, got none`);\n    let finalSorted = [];\n    let finalRecipientMap = {};\n    if (fetches.length === 1) {\n        // Special-casing 1 fetch for efficiency.\n        const out = getTopologicalSortAndRecipientCountsForOneFetch(fetches[0], feedDict);\n        finalSorted = out.sorted;\n        finalRecipientMap = out.recipientMap;\n    }\n    else {\n        const visited = new Set();\n        for (const fetch of fetches) {\n            const { sorted, recipientMap } = getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict);\n            // Merge sorted SymbolicTensor Arrays.\n            for (const symbolicTensor of sorted) {\n                if (!visited.has(symbolicTensor.name)) {\n                    finalSorted.push(symbolicTensor);\n                    visited.add(symbolicTensor.name);\n                }\n            }\n            // Merge recipient maps.\n            for (const name in recipientMap) {\n                if (finalRecipientMap[name] == null) {\n                    finalRecipientMap[name] = new Set();\n                }\n                recipientMap[name].forEach(recipient => finalRecipientMap[name].add(recipient));\n            }\n        }\n    }\n    return {\n        sorted: finalSorted,\n        recipientCounts: recipientMap2Counts(finalRecipientMap)\n    };\n}\nfunction recipientMap2Counts(recipientMap) {\n    const recipientCounts = {};\n    for (const name in recipientMap) {\n        recipientCounts[name] = recipientMap[name].size;\n    }\n    return recipientCounts;\n}\n/**\n * Sort the `SymbolicTensor`s topologically, for a single fetch.\n *\n * This helper function processes the upstream SymbolicTensors of a single\n * fetch.\n *\n * @param fetch The single fetch requested.\n * @param feedDict The dictionary of fed values.\n * @returns sorted: Topologically-sorted array of SymbolicTensors.\n *   recipientMap: Recipient names for all SymbolicTensors in `sorted`.\n */\nexport function getTopologicalSortAndRecipientCountsForOneFetch(fetch, feedDict) {\n    const visited = new Set();\n    const sorted = [];\n    const recipientMap = {};\n    // Put keys of the feedDict into visited first, so they don't have to be\n    // walked. This is needed in case where there are feeds for intermediate\n    // SymbolicTensors of the graph.\n    for (const key of feedDict.names()) {\n        visited.add(key);\n    }\n    const stack = [];\n    const marks = [];\n    // Initial population of stack and marks.\n    stack.push(fetch);\n    while (stack.length > 0) {\n        const top = stack[stack.length - 1];\n        if (visited.has(top.name)) {\n            stack.pop();\n            continue;\n        }\n        const topIsMarked = marks[marks.length - 1] === stack.length - 1;\n        if (top.inputs.length === 0 || topIsMarked) {\n            // Input SymbolicTensor or all children have been visited.\n            stack.pop();\n            sorted.push(top);\n            visited.add(top.name);\n            if (topIsMarked) {\n                marks.pop();\n            }\n        }\n        else {\n            // A non-input SymbolicTensor whose upstream SymbolicTensors haven't\n            // been visited yet. Push them onto the stack.\n            marks.push(stack.length - 1);\n            for (const input of top.inputs) {\n                // Increment the recipient count. Note that this needs to happen\n                // regardless of whether the SymbolicTensor has been visited before.\n                if (recipientMap[input.name] == null) {\n                    recipientMap[input.name] = new Set();\n                }\n                recipientMap[input.name].add(top.name);\n                if (visited.has(input.name)) {\n                    continue; // Avoid repeated visits to the same SymbolicTensor.\n                }\n                stack.push(input);\n            }\n        }\n    }\n    return { sorted, recipientMap };\n}\n/**\n * Get the symbolic output tensors of the node to which a given fetch belongs.\n * @param fetch The fetched symbolic tensor.\n * @returns The Array of symbolic tensors output by the node to which `fetch`\n *   belongs.\n */\nfunction getNodeOutputs(fetch) {\n    let layerOutputs;\n    if (fetch.sourceLayer.inboundNodes.length === 1) {\n        layerOutputs = fetch.sourceLayer.output;\n    }\n    else {\n        let nodeIndex = null;\n        for (let i = 0; i < fetch.sourceLayer.inboundNodes.length; ++i) {\n            for (const outputTensor of fetch.sourceLayer.inboundNodes[i]\n                .outputTensors) {\n                if (outputTensor.id === fetch.id) {\n                    nodeIndex = i;\n                    break;\n                }\n            }\n        }\n        layerOutputs = fetch.sourceLayer.getOutputAt(nodeIndex);\n    }\n    return layerOutputs;\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["FeedDict","constructor","feeds","this","id2Value","id2Mask","name2Id","id","feed","add","key","value","mask","name","val","dtype","cast","err","assertFeedCompatibility","addFeed","hasKey","names","Object","keys","getValue","getMask","disposeMasks","dispose","cachedSorted","cachedRecipientCounts","updateCacheMaxEntries","maxEntries","setMaxEntries","execute","fetches","feedDict","kwargs","probe","training","arrayFetches","Array","isArray","fetchArray","outputNames","map","t","finalOutputs","feedNames","outputName","indexOf","push","maxNumTensors","Infinity","minNumTensors","fetchAndFeedKey","join","sort","recipientCounts","sorted","get","out","util","length","finalSorted","finalRecipientMap","getTopologicalSortAndRecipientCountsForOneFetch","recipientMap","visited","Set","fetch","symbolicTensor","has","forEach","recipient","recipientMap2Counts","getTopologicalSortAndRecipientCounts","put","assign","internalFeedDict","i","numTensors","memory","symbolic","srcLayer","sourceLayer","inputValues","inputMasks","tensorsToDispose","maskExists","input","inputs","isDisposed","stateful","outputTensors","apply","outputMask","supportsMasking","computeMask","layerOutputs","getNodeOutputs","outputSymbolicTensors","index","size","stack","marks","top","pop","topIsMarked","inboundNodes","output","nodeIndex","outputTensor","getOutputAt"],"sourceRoot":""}