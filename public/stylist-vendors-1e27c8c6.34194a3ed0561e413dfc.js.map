{"version":3,"file":"stylist-vendors-1e27c8c6.34194a3ed0561e413dfc.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/category_encoding.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/preprocessing_utils.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/pooling.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/serialization.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/random_width.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/center_crop.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/image_preprocessing.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/padding.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/preprocessing/image_resizing.js"],"sourcesContent":["/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from '../../engine/topology';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { greater, greaterEqual, max, min } from '@tensorflow/tfjs-core';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\nimport * as utils from './preprocessing_utils';\nclass CategoryEncoding extends Layer {\n    constructor(args) {\n        super(args);\n        this.numTokens = args.numTokens;\n        if (args.outputMode) {\n            this.outputMode = args.outputMode;\n        }\n        else {\n            this.outputMode = 'multiHot';\n        }\n    }\n    getConfig() {\n        const config = {\n            'numTokens': this.numTokens,\n            'outputMode': this.outputMode,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (inputShape == null) {\n            return [this.numTokens];\n        }\n        if (this.outputMode === 'oneHot' && inputShape[inputShape.length - 1] !== 1) {\n            inputShape.push(this.numTokens);\n            return inputShape;\n        }\n        inputShape[inputShape.length - 1] = this.numTokens;\n        return inputShape;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            if (inputs.dtype !== 'int32') {\n                inputs = K.cast(inputs, 'int32');\n            }\n            let countWeights;\n            if ((typeof kwargs['countWeights']) !== 'undefined') {\n                if (this.outputMode !== 'count') {\n                    throw new ValueError(`countWeights is not used when outputMode !== count.\n              Received countWeights=${kwargs['countWeights']}`);\n                }\n                countWeights\n                    = getExactlyOneTensor(kwargs['countWeights']);\n            }\n            const maxValue = max(inputs);\n            const minValue = min(inputs);\n            const greaterEqualMax = greater(this.numTokens, maxValue)\n                .bufferSync().get(0);\n            const greaterMin = greaterEqual(minValue, 0).bufferSync().get(0);\n            if (!(greaterEqualMax && greaterMin)) {\n                throw new ValueError('Input values must be between 0 < values <='\n                    + ` numTokens with numTokens=${this.numTokens}`);\n            }\n            return utils.encodeCategoricalInputs(inputs, this.outputMode, this.numTokens, countWeights);\n        });\n    }\n}\n/** @nocollapse */\nCategoryEncoding.className = 'CategoryEncoding';\nexport { CategoryEncoding };\nserialization.registerClass(CategoryEncoding);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { denseBincount, mul } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport { expandDims } from '@tensorflow/tfjs-core';\nimport { ValueError } from '../../errors';\nimport * as K from '../../backend/tfjs_backend';\nexport function encodeCategoricalInputs(inputs, outputMode, depth, weights) {\n    let input = getExactlyOneTensor(inputs);\n    if (input.dtype !== 'int32') {\n        input = K.cast(input, 'int32');\n    }\n    if (outputMode === 'int') {\n        return input;\n    }\n    const originalShape = input.shape;\n    if (input.rank === 0) {\n        input = expandDims(input, -1);\n    }\n    if (outputMode === 'oneHot') {\n        if (input.shape[input.shape.length - 1] !== 1) {\n            input = expandDims(input, -1);\n        }\n    }\n    if (input.rank > 2) {\n        throw new ValueError(`When outputMode is not int, maximum output rank is 2`\n            + ` Received outputMode ${outputMode} and input shape ${originalShape}`\n            + ` which would result in output rank ${input.rank}.`);\n    }\n    const binaryOutput = ['multiHot', 'oneHot'].includes(outputMode);\n    const denseBincountInput = input;\n    let binCounts;\n    if ((typeof weights) !== 'undefined' && outputMode === 'count') {\n        binCounts = denseBincount(denseBincountInput, weights, depth, binaryOutput);\n    }\n    else {\n        binCounts = denseBincount(denseBincountInput, [], depth, binaryOutput);\n    }\n    if (outputMode !== 'tfIdf') {\n        return binCounts;\n    }\n    if (weights) {\n        return mul(binCounts, weights);\n    }\n    else {\n        throw new ValueError(`When outputMode is 'tfIdf', weights must be provided.`);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJlcHJvY2Vzc2luZ191dGlscy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9sYXllcnMvcHJlcHJvY2Vzc2luZy9wcmVwcm9jZXNzaW5nX3V0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFVLGFBQWEsRUFBa0MsR0FBRyxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDbEcsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDOUQsT0FBTyxFQUFFLFVBQVUsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ2xELE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxjQUFjLENBQUM7QUFDMUMsT0FBTyxLQUFLLENBQUMsTUFBTSw0QkFBNEIsQ0FBQztBQUloRCxNQUFNLFVBQVUsdUJBQXVCLENBQUMsTUFBdUIsRUFDdkIsVUFBc0IsRUFDdEIsS0FBYSxFQUNiLE9BQXNDO0lBRzVFLElBQUksS0FBSyxHQUFHLG1CQUFtQixDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBRXhDLElBQUcsS0FBSyxDQUFDLEtBQUssS0FBSyxPQUFPLEVBQUU7UUFDMUIsS0FBSyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQzlCO0lBRUgsSUFBRyxVQUFVLEtBQUssS0FBSyxFQUFFO1FBQ3ZCLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCxNQUFNLGFBQWEsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDO0lBRWxDLElBQUcsS0FBSyxDQUFDLElBQUksS0FBSyxDQUFDLEVBQUU7UUFDbkIsS0FBSyxHQUFHLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUMvQjtJQUVELElBQUcsVUFBVSxLQUFLLFFBQVEsRUFBRTtRQUMxQixJQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzVDLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDL0I7S0FDRjtJQUVELElBQUcsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUU7UUFDakIsTUFBTSxJQUFJLFVBQVUsQ0FBQyxzREFBc0Q7Y0FDekUsd0JBQXdCLFVBQVUsb0JBQW9CLGFBQWEsRUFBRTtjQUNyRSxzQ0FBc0MsS0FBSyxDQUFDLElBQUksR0FBRyxDQUFDLENBQUM7S0FDeEQ7SUFFRCxNQUFNLFlBQVksR0FBRyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFakUsTUFBTSxrQkFBa0IsR0FBRyxLQUE0QixDQUFDO0lBRXhELElBQUksU0FBOEIsQ0FBQztJQUVuQyxJQUFJLENBQUMsT0FBTyxPQUFPLENBQUMsS0FBSyxXQUFXLElBQUksVUFBVSxLQUFLLE9BQU8sRUFBRTtRQUM5RCxTQUFTLEdBQUcsYUFBYSxDQUFDLGtCQUFrQixFQUFFLE9BQU8sRUFBRSxLQUFLLEVBQUUsWUFBWSxDQUFDLENBQUM7S0FDNUU7U0FBTTtRQUNOLFNBQVMsR0FBRyxhQUFhLENBQUMsa0JBQWtCLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxZQUFZLENBQUMsQ0FBQztLQUN2RTtJQUVGLElBQUcsVUFBVSxLQUFLLE9BQU8sRUFBRTtRQUN6QixPQUFPLFNBQVMsQ0FBQztLQUNsQjtJQUVELElBQUksT0FBTyxFQUFFO1FBQ1gsT0FBTyxHQUFHLENBQUMsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0tBQ2hDO1NBQU07UUFDSCxNQUFNLElBQUksVUFBVSxDQUNsQix1REFBdUQsQ0FDeEQsQ0FBQztLQUNMO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIENvZGVTbWl0aCBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7IFRlbnNvciwgZGVuc2VCaW5jb3VudCwgVGVuc29yMUQsIFRlbnNvcjJELCBUZW5zb3JMaWtlLCBtdWx9IGZyb20gJ0B0ZW5zb3JmbG93L3RmanMtY29yZSc7XG5pbXBvcnQgeyBnZXRFeGFjdGx5T25lVGVuc29yIH0gZnJvbSAnLi4vLi4vdXRpbHMvdHlwZXNfdXRpbHMnO1xuaW1wb3J0IHsgZXhwYW5kRGltc30gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcbmltcG9ydCB7IFZhbHVlRXJyb3IgfSBmcm9tICcuLi8uLi9lcnJvcnMnO1xuaW1wb3J0ICogYXMgSyBmcm9tICcuLi8uLi9iYWNrZW5kL3RmanNfYmFja2VuZCc7XG5cbmV4cG9ydCB0eXBlIE91dHB1dE1vZGUgPSAnaW50JyB8ICdvbmVIb3QnIHwgJ211bHRpSG90JyB8ICdjb3VudCcgfCAndGZJZGYnO1xuXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlQ2F0ZWdvcmljYWxJbnB1dHMoaW5wdXRzOiBUZW5zb3J8VGVuc29yW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3V0cHV0TW9kZTogT3V0cHV0TW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXB0aDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodHM/OiBUZW5zb3IxRHxUZW5zb3IyRHxUZW5zb3JMaWtlKTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZW5zb3J8VGVuc29yW10ge1xuXG4gIGxldCBpbnB1dCA9IGdldEV4YWN0bHlPbmVUZW5zb3IoaW5wdXRzKTtcblxuICBpZihpbnB1dC5kdHlwZSAhPT0gJ2ludDMyJykge1xuICAgIGlucHV0ID0gSy5jYXN0KGlucHV0LCAnaW50MzInKTtcbiAgICB9XG5cbiAgaWYob3V0cHV0TW9kZSA9PT0gJ2ludCcpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cblxuICBjb25zdCBvcmlnaW5hbFNoYXBlID0gaW5wdXQuc2hhcGU7XG5cbiAgaWYoaW5wdXQucmFuayA9PT0gMCkge1xuICAgIGlucHV0ID0gZXhwYW5kRGltcyhpbnB1dCwgLTEpO1xuICB9XG5cbiAgaWYob3V0cHV0TW9kZSA9PT0gJ29uZUhvdCcpIHtcbiAgICBpZihpbnB1dC5zaGFwZVtpbnB1dC5zaGFwZS5sZW5ndGggLSAxXSAhPT0gMSkge1xuICAgICAgaW5wdXQgPSBleHBhbmREaW1zKGlucHV0LCAtMSk7XG4gICAgfVxuICB9XG5cbiAgaWYoaW5wdXQucmFuayA+IDIpIHtcbiAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihgV2hlbiBvdXRwdXRNb2RlIGlzIG5vdCBpbnQsIG1heGltdW0gb3V0cHV0IHJhbmsgaXMgMmBcbiAgICArIGAgUmVjZWl2ZWQgb3V0cHV0TW9kZSAke291dHB1dE1vZGV9IGFuZCBpbnB1dCBzaGFwZSAke29yaWdpbmFsU2hhcGV9YFxuICAgICsgYCB3aGljaCB3b3VsZCByZXN1bHQgaW4gb3V0cHV0IHJhbmsgJHtpbnB1dC5yYW5rfS5gKTtcbiAgfVxuXG4gIGNvbnN0IGJpbmFyeU91dHB1dCA9IFsnbXVsdGlIb3QnLCAnb25lSG90J10uaW5jbHVkZXMob3V0cHV0TW9kZSk7XG5cbiAgY29uc3QgZGVuc2VCaW5jb3VudElucHV0ID0gaW5wdXQgYXMgVGVuc29yMUQgfCBUZW5zb3IyRDtcblxuICBsZXQgYmluQ291bnRzOiBUZW5zb3IxRCB8IFRlbnNvcjJEO1xuXG4gIGlmICgodHlwZW9mIHdlaWdodHMpICE9PSAndW5kZWZpbmVkJyAmJiBvdXRwdXRNb2RlID09PSAnY291bnQnKSB7XG4gICAgYmluQ291bnRzID0gZGVuc2VCaW5jb3VudChkZW5zZUJpbmNvdW50SW5wdXQsIHdlaWdodHMsIGRlcHRoLCBiaW5hcnlPdXRwdXQpO1xuICAgfSBlbHNlIHtcbiAgICBiaW5Db3VudHMgPSBkZW5zZUJpbmNvdW50KGRlbnNlQmluY291bnRJbnB1dCwgW10sIGRlcHRoLCBiaW5hcnlPdXRwdXQpO1xuICAgfVxuXG4gIGlmKG91dHB1dE1vZGUgIT09ICd0ZklkZicpIHtcbiAgICByZXR1cm4gYmluQ291bnRzO1xuICB9XG5cbiAgaWYgKHdlaWdodHMpIHtcbiAgICByZXR1cm4gbXVsKGJpbkNvdW50cywgd2VpZ2h0cyk7XG4gIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihcbiAgICAgICAgYFdoZW4gb3V0cHV0TW9kZSBpcyAndGZJZGYnLCB3ZWlnaHRzIG11c3QgYmUgcHJvdmlkZWQuYFxuICAgICAgKTtcbiAgfVxufVxuIl19","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Pooling Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport * as K from '../backend/tfjs_backend';\nimport { checkDataFormat, checkPaddingMode, checkPoolMode } from '../common';\nimport { InputSpec } from '../engine/topology';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { convOutputLength } from '../utils/conv_utils';\nimport { assertPositiveInteger } from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nimport { preprocessConv2DInput, preprocessConv3DInput } from './convolutional';\n/**\n * 2D pooling.\n * @param x\n * @param poolSize\n * @param strides strides. Defaults to [1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 2D pooling.\n */\nexport function pool2d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // TODO(cais): Remove the preprocessing step once deeplearn.js supports\n        // dataFormat as an input argument.\n        x = preprocessConv2DInput(x, dataFormat); // x is NHWC after preprocessing.\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            // TODO(cais): Rank check?\n            y = tfc.maxPool(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            // TODO(cais): Check the dtype and rank of x and give clear error message\n            //   if those are incorrect.\n            y = tfc.avgPool(\n            // TODO(cais): Rank check?\n            x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 3, 1, 2]); // NHWC -> NCHW.\n        }\n        return y;\n    });\n}\n/**\n * 3D pooling.\n * @param x\n * @param poolSize. Default to [1, 1, 1].\n * @param strides strides. Defaults to [1, 1, 1].\n * @param padding padding. Defaults to 'valid'.\n * @param dataFormat data format. Defaults to 'channelsLast'.\n * @param poolMode Mode of pooling. Defaults to 'max'.\n * @returns Result of the 3D pooling.\n */\nexport function pool3d(x, poolSize, strides, padding, dataFormat, poolMode) {\n    return tidy(() => {\n        checkDataFormat(dataFormat);\n        checkPoolMode(poolMode);\n        checkPaddingMode(padding);\n        if (strides == null) {\n            strides = [1, 1, 1];\n        }\n        if (padding == null) {\n            padding = 'valid';\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (poolMode == null) {\n            poolMode = 'max';\n        }\n        // x is NDHWC after preprocessing.\n        x = preprocessConv3DInput(x, dataFormat);\n        let y;\n        const paddingString = (padding === 'same') ? 'same' : 'valid';\n        if (poolMode === 'max') {\n            y = tfc.maxPool3d(x, poolSize, strides, paddingString);\n        }\n        else { // 'avg'\n            y = tfc.avgPool3d(x, poolSize, strides, paddingString);\n        }\n        if (dataFormat === 'channelsFirst') {\n            y = tfc.transpose(y, [0, 4, 1, 2, 3]); // NDHWC -> NCDHW.\n        }\n        return y;\n    });\n}\n/**\n * Abstract class for different pooling 1D layers.\n */\nexport class Pooling1D extends Layer {\n    /**\n     *\n     * @param args Parameters for the Pooling layer.\n     *\n     * config.poolSize defaults to 2.\n     */\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = 2;\n        }\n        super(args);\n        if (typeof args.poolSize === 'number') {\n            this.poolSize = [args.poolSize];\n        }\n        else if (Array.isArray(args.poolSize) &&\n            args.poolSize.length === 1 &&\n            typeof args.poolSize[0] === 'number') {\n            this.poolSize = args.poolSize;\n        }\n        else {\n            throw new ValueError(`poolSize for 1D convolutional layer must be a number or an ` +\n                `Array of a single number, but received ` +\n                `${JSON.stringify(args.poolSize)}`);\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else {\n            if (typeof args.strides === 'number') {\n                this.strides = [args.strides];\n            }\n            else if (Array.isArray(args.strides) &&\n                args.strides.length === 1 &&\n                typeof args.strides[0] === 'number') {\n                this.strides = args.strides;\n            }\n            else {\n                throw new ValueError(`strides for 1D convolutional layer must be a number or an ` +\n                    `Array of a single number, but received ` +\n                    `${JSON.stringify(args.strides)}`);\n            }\n        }\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const length = convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n        return [inputShape[0], length, inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Add dummy last dimension.\n            inputs = K.expandDims(getExactlyOneTensor(inputs), 2);\n            const output = this.poolingFunction(getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');\n            // Remove dummy last dimension.\n            return tfc.squeeze(output, [2]);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nclass MaxPooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling1D.className = 'MaxPooling1D';\nexport { MaxPooling1D };\nserialization.registerClass(MaxPooling1D);\nclass AveragePooling1D extends Pooling1D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling1D.className = 'AveragePooling1D';\nexport { AveragePooling1D };\nserialization.registerClass(AveragePooling1D);\n/**\n * Abstract class for different pooling 2D layers.\n */\nexport class Pooling2D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 2) {\n                throw new ValueError(`If the strides property of a 2D pooling layer is an Array, ` +\n                    `it is expected to have a length of 2, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        rows =\n            convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n        cols =\n            convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nclass MaxPooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling2D.className = 'MaxPooling2D';\nexport { MaxPooling2D };\nserialization.registerClass(MaxPooling2D);\nclass AveragePooling2D extends Pooling2D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling2D.className = 'AveragePooling2D';\nexport { AveragePooling2D };\nserialization.registerClass(AveragePooling2D);\n/**\n * Abstract class for different pooling 3D layers.\n */\nexport class Pooling3D extends Layer {\n    constructor(args) {\n        if (args.poolSize == null) {\n            args.poolSize = [2, 2, 2];\n        }\n        super(args);\n        this.poolSize = Array.isArray(args.poolSize) ?\n            args.poolSize :\n            [args.poolSize, args.poolSize, args.poolSize];\n        if (args.strides == null) {\n            this.strides = this.poolSize;\n        }\n        else if (Array.isArray(args.strides)) {\n            if (args.strides.length !== 3) {\n                throw new ValueError(`If the strides property of a 3D pooling layer is an Array, ` +\n                    `it is expected to have a length of 3, but received length ` +\n                    `${args.strides.length}.`);\n            }\n            this.strides = args.strides;\n        }\n        else {\n            // `config.strides` is a number.\n            this.strides = [args.strides, args.strides, args.strides];\n        }\n        assertPositiveInteger(this.poolSize, 'poolSize');\n        assertPositiveInteger(this.strides, 'strides');\n        this.padding = args.padding == null ? 'valid' : args.padding;\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        checkPaddingMode(this.padding);\n        this.inputSpec = [new InputSpec({ ndim: 5 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let depths = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n        let rows = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n        let cols = this.dataFormat === 'channelsFirst' ? inputShape[4] : inputShape[3];\n        depths = convOutputLength(depths, this.poolSize[0], this.padding, this.strides[0]);\n        rows =\n            convOutputLength(rows, this.poolSize[1], this.padding, this.strides[1]);\n        cols =\n            convOutputLength(cols, this.poolSize[2], this.padding, this.strides[2]);\n        if (this.dataFormat === 'channelsFirst') {\n            return [inputShape[0], inputShape[1], depths, rows, cols];\n        }\n        else {\n            return [inputShape[0], depths, rows, cols, inputShape[4]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            return this.poolingFunction(getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n        });\n    }\n    getConfig() {\n        const config = {\n            poolSize: this.poolSize,\n            padding: this.padding,\n            strides: this.strides,\n            dataFormat: this.dataFormat\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nclass MaxPooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'max');\n    }\n}\n/** @nocollapse */\nMaxPooling3D.className = 'MaxPooling3D';\nexport { MaxPooling3D };\nserialization.registerClass(MaxPooling3D);\nclass AveragePooling3D extends Pooling3D {\n    constructor(args) {\n        super(args);\n    }\n    poolingFunction(inputs, poolSize, strides, padding, dataFormat) {\n        checkDataFormat(dataFormat);\n        checkPaddingMode(padding);\n        return pool3d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n    }\n}\n/** @nocollapse */\nAveragePooling3D.className = 'AveragePooling3D';\nexport { AveragePooling3D };\nserialization.registerClass(AveragePooling3D);\n/**\n * Abstract class for different global pooling 1D layers.\n */\nexport class GlobalPooling1D extends Layer {\n    constructor(args) {\n        super(args);\n        this.inputSpec = [new InputSpec({ ndim: 3 })];\n    }\n    computeOutputShape(inputShape) {\n        return [inputShape[0], inputShape[2]];\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n}\nclass GlobalAveragePooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.mean(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling1D.className = 'GlobalAveragePooling1D';\nexport { GlobalAveragePooling1D };\nserialization.registerClass(GlobalAveragePooling1D);\nclass GlobalMaxPooling1D extends GlobalPooling1D {\n    constructor(args) {\n        super(args || {});\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            return tfc.max(input, 1);\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling1D.className = 'GlobalMaxPooling1D';\nexport { GlobalMaxPooling1D };\nserialization.registerClass(GlobalMaxPooling1D);\n/**\n * Abstract class for different global pooling 2D layers.\n */\nexport class GlobalPooling2D extends Layer {\n    constructor(args) {\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? 'channelsLast' : args.dataFormat;\n        checkDataFormat(this.dataFormat);\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        if (this.dataFormat === 'channelsLast') {\n            return [inputShape[0], inputShape[3]];\n        }\n        else {\n            return [inputShape[0], inputShape[1]];\n        }\n    }\n    call(inputs, kwargs) {\n        throw new NotImplementedError();\n    }\n    getConfig() {\n        const config = { dataFormat: this.dataFormat };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\nclass GlobalAveragePooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.mean(input, [1, 2]);\n            }\n            else {\n                return tfc.mean(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalAveragePooling2D.className = 'GlobalAveragePooling2D';\nexport { GlobalAveragePooling2D };\nserialization.registerClass(GlobalAveragePooling2D);\nclass GlobalMaxPooling2D extends GlobalPooling2D {\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            if (this.dataFormat === 'channelsLast') {\n                return tfc.max(input, [1, 2]);\n            }\n            else {\n                return tfc.max(input, [2, 3]);\n            }\n        });\n    }\n}\n/** @nocollapse */\nGlobalMaxPooling2D.className = 'GlobalMaxPooling2D';\nexport { GlobalMaxPooling2D };\nserialization.registerClass(GlobalMaxPooling2D);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source layers/__init__.py */\nimport { serialization } from '@tensorflow/tfjs-core';\nimport { deserializeKerasObject } from '../utils/generic_utils';\n/**\n * Instantiate a layer from a config dictionary.\n * @param config dict of the form {class_name: str, config: dict}\n * @param customObjects dict mapping class names (or function names)\n *   of custom (non-Keras) objects to class/functions\n * @param fastWeightInit Optional flag to use fast weight initialization\n *   during deserialization. This is applicable to cases in which\n *   the initialization will be immediately overwritten by loaded weight\n *   values. Default: `false`.\n * @returns Layer instance (may be LayersModel, Sequential, Layer...)\n */\nexport function deserialize(config, customObjects = {}, fastWeightInit = false) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'layer', fastWeightInit);\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VyaWFsaXphdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9sYXllcnMvc2VyaWFsaXphdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVILHdDQUF3QztBQUN4QyxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFFcEQsT0FBTyxFQUFDLHNCQUFzQixFQUFDLE1BQU0sd0JBQXdCLENBQUM7QUFFOUQ7Ozs7Ozs7Ozs7R0FVRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQ3ZCLE1BQWdDLEVBQ2hDLGdCQUFnQixFQUE4QixFQUM5QyxjQUFjLEdBQUcsS0FBSztJQUN4QixPQUFPLHNCQUFzQixDQUN6QixNQUFNLEVBQUUsYUFBYSxDQUFDLGdCQUFnQixDQUFDLE1BQU0sRUFBRSxDQUFDLFlBQVksRUFDNUQsYUFBYSxFQUFFLE9BQU8sRUFBRSxjQUFjLENBQUMsQ0FBQztBQUM5QyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLyogT3JpZ2luYWwgU291cmNlIGxheWVycy9fX2luaXRfXy5weSAqL1xuaW1wb3J0IHtzZXJpYWxpemF0aW9ufSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG5pbXBvcnQge2Rlc2VyaWFsaXplS2VyYXNPYmplY3R9IGZyb20gJy4uL3V0aWxzL2dlbmVyaWNfdXRpbHMnO1xuXG4vKipcbiAqIEluc3RhbnRpYXRlIGEgbGF5ZXIgZnJvbSBhIGNvbmZpZyBkaWN0aW9uYXJ5LlxuICogQHBhcmFtIGNvbmZpZyBkaWN0IG9mIHRoZSBmb3JtIHtjbGFzc19uYW1lOiBzdHIsIGNvbmZpZzogZGljdH1cbiAqIEBwYXJhbSBjdXN0b21PYmplY3RzIGRpY3QgbWFwcGluZyBjbGFzcyBuYW1lcyAob3IgZnVuY3Rpb24gbmFtZXMpXG4gKiAgIG9mIGN1c3RvbSAobm9uLUtlcmFzKSBvYmplY3RzIHRvIGNsYXNzL2Z1bmN0aW9uc1xuICogQHBhcmFtIGZhc3RXZWlnaHRJbml0IE9wdGlvbmFsIGZsYWcgdG8gdXNlIGZhc3Qgd2VpZ2h0IGluaXRpYWxpemF0aW9uXG4gKiAgIGR1cmluZyBkZXNlcmlhbGl6YXRpb24uIFRoaXMgaXMgYXBwbGljYWJsZSB0byBjYXNlcyBpbiB3aGljaFxuICogICB0aGUgaW5pdGlhbGl6YXRpb24gd2lsbCBiZSBpbW1lZGlhdGVseSBvdmVyd3JpdHRlbiBieSBsb2FkZWQgd2VpZ2h0XG4gKiAgIHZhbHVlcy4gRGVmYXVsdDogYGZhbHNlYC5cbiAqIEByZXR1cm5zIExheWVyIGluc3RhbmNlIChtYXkgYmUgTGF5ZXJzTW9kZWwsIFNlcXVlbnRpYWwsIExheWVyLi4uKVxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVzZXJpYWxpemUoXG4gICAgY29uZmlnOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QsXG4gICAgY3VzdG9tT2JqZWN0cyA9IHt9IGFzIHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCxcbiAgICBmYXN0V2VpZ2h0SW5pdCA9IGZhbHNlKTogc2VyaWFsaXphdGlvbi5TZXJpYWxpemFibGUge1xuICByZXR1cm4gZGVzZXJpYWxpemVLZXJhc09iamVjdChcbiAgICAgIGNvbmZpZywgc2VyaWFsaXphdGlvbi5TZXJpYWxpemF0aW9uTWFwLmdldE1hcCgpLmNsYXNzTmFtZU1hcCxcbiAgICAgIGN1c3RvbU9iamVjdHMsICdsYXllcicsIGZhc3RXZWlnaHRJbml0KTtcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2023 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { image, serialization, tidy } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor, getExactlyOneShape } from '../../utils/types_utils';\nimport { ValueError } from '../../errors';\nimport { BaseRandomLayer } from '../../engine/base_random_layer';\nimport { randomUniform } from '@tensorflow/tfjs-core';\nconst INTERPOLATION_KEYS = ['bilinear', 'nearest'];\nexport const INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\n/**\n * Preprocessing Layer with randomly varies image during training\n *\n * This layer randomly adjusts the width of a batch of images of a\n * batch of images by a random factor.\n *\n * The input should be a 3D (unbatched) or\n * 4D (batched) tensor in the `\"channels_last\"` image data format. Input pixel\n * values can be of any range (e.g. `[0., 1.)` or `[0, 255]`) and of integer\n * or floating point dtype. By default, the layer will output floats.\n *\n * tf methods implemented in tfjs: 'bilinear', 'nearest',\n * tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n *                                   'gaussian', 'mitchellcubic'\n *\n */\nclass RandomWidth extends BaseRandomLayer {\n    constructor(args) {\n        super(args);\n        const { factor, interpolation = 'bilinear' } = args;\n        this.factor = factor;\n        if (Array.isArray(this.factor) && this.factor.length === 2) {\n            this.widthLower = this.factor[0];\n            this.widthUpper = this.factor[1];\n        }\n        else if (!Array.isArray(this.factor) && this.factor > 0) {\n            this.widthLower = -this.factor;\n            this.widthUpper = this.factor;\n        }\n        else {\n            throw new ValueError(`Invalid factor: ${this.factor}. Must be positive number or tuple of 2 numbers`);\n        }\n        if (this.widthLower < -1.0 || this.widthUpper < -1.0) {\n            throw new ValueError(`factor must have values larger than -1. Got: ${this.factor}`);\n        }\n        if (this.widthUpper < this.widthLower) {\n            throw new ValueError(`factor cannot have upper bound less than lower bound.\n        Got upper bound: ${this.widthUpper}.\n        Got lower bound: ${this.widthLower}\n      `);\n        }\n        if (interpolation) {\n            if (INTERPOLATION_METHODS.has(interpolation)) {\n                this.interpolation = interpolation;\n            }\n            else {\n                throw new ValueError(`Invalid interpolation parameter: ${interpolation} is not implemented`);\n            }\n        }\n    }\n    getConfig() {\n        const config = {\n            'factor': this.factor,\n            'interpolation': this.interpolation,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const numChannels = inputShape[2];\n        return [this.imgHeight, -1, numChannels];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const input = getExactlyOneTensor(inputs);\n            this.imgHeight = input.shape[input.shape.length - 3];\n            const imgWidth = input.shape[input.shape.length - 2];\n            this.widthFactor = randomUniform([1], (1.0 + this.widthLower), (1.0 + this.widthUpper), 'float32', this.randomGenerator.next());\n            let adjustedWidth = this.widthFactor.dataSync()[0] * imgWidth;\n            adjustedWidth = Math.round(adjustedWidth);\n            const size = [this.imgHeight, adjustedWidth];\n            switch (this.interpolation) {\n                case 'bilinear':\n                    return image.resizeBilinear(inputs, size);\n                case 'nearest':\n                    return image.resizeNearestNeighbor(inputs, size);\n                default:\n                    throw new Error(`Interpolation is ${this.interpolation}\n          but only ${[...INTERPOLATION_METHODS]} are supported`);\n            }\n        });\n    }\n}\n/** @nocollapse */\nRandomWidth.className = 'RandomWidth';\nexport { RandomWidth };\nserialization.registerClass(RandomWidth);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { serialization, unstack, stack, tensor, tidy, range, image } from '@tensorflow/tfjs-core';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../../utils/types_utils';\nimport { Layer } from '../../engine/topology';\nimport * as K from '../../backend/tfjs_backend';\nconst { resizeBilinear, cropAndResize } = image;\nclass CenterCrop extends Layer {\n    constructor(args) {\n        super(args);\n        this.height = args.height;\n        this.width = args.width;\n    }\n    centerCrop(inputs, hBuffer, wBuffer, height, width, inputHeight, inputWidth, dtype) {\n        return tidy(() => {\n            let input;\n            let isRank3 = false;\n            const top = hBuffer / inputHeight;\n            const left = wBuffer / inputWidth;\n            const bottom = ((height) + hBuffer) / inputHeight;\n            const right = ((width) + wBuffer) / inputWidth;\n            const bound = [top, left, bottom, right];\n            const boxesArr = [];\n            if (inputs.rank === 3) {\n                isRank3 = true;\n                input = stack([inputs]);\n            }\n            else {\n                input = inputs;\n            }\n            for (let i = 0; i < input.shape[0]; i++) {\n                boxesArr.push(bound);\n            }\n            const boxes = tensor(boxesArr, [boxesArr.length, 4]);\n            const boxInd = range(0, boxesArr.length, 1, 'int32');\n            const cropSize = [height, width];\n            const cropped = cropAndResize(input, boxes, boxInd, cropSize, 'nearest');\n            if (isRank3) {\n                return K.cast(getExactlyOneTensor(unstack(cropped)), dtype);\n            }\n            return K.cast(cropped, dtype);\n        });\n    }\n    upsize(inputs, height, width, dtype) {\n        return tidy(() => {\n            const outputs = resizeBilinear(inputs, [height, width]);\n            return K.cast(outputs, dtype);\n        });\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const rankedInputs = getExactlyOneTensor(inputs);\n            const dtype = rankedInputs.dtype;\n            const inputShape = rankedInputs.shape;\n            const inputHeight = inputShape[inputShape.length - 3];\n            const inputWidth = inputShape[inputShape.length - 2];\n            let hBuffer = 0;\n            if (inputHeight !== this.height) {\n                hBuffer = Math.floor((inputHeight - this.height) / 2);\n            }\n            let wBuffer = 0;\n            if (inputWidth !== this.width) {\n                wBuffer = Math.floor((inputWidth - this.width) / 2);\n                if (wBuffer === 0) {\n                    wBuffer = 1;\n                }\n            }\n            if (hBuffer >= 0 && wBuffer >= 0) {\n                return this.centerCrop(rankedInputs, hBuffer, wBuffer, this.height, this.width, inputHeight, inputWidth, dtype);\n            }\n            else {\n                return this.upsize(inputs, this.height, this.width, dtype);\n            }\n        });\n    }\n    getConfig() {\n        const config = {\n            'height': this.height,\n            'width': this.width\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const hAxis = inputShape.length - 3;\n        const wAxis = inputShape.length - 2;\n        inputShape[hAxis] = this.height;\n        inputShape[wAxis] = this.width;\n        return inputShape;\n    }\n}\n/** @nocollapse */\nCenterCrop.className = 'CenterCrop';\nexport { CenterCrop };\nserialization.registerClass(CenterCrop);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { Layer } from '../../engine/topology';\nimport { serialization, mul, add, tidy } from '@tensorflow/tfjs-core';\nimport { getExactlyOneTensor } from '../../utils/types_utils';\nimport * as K from '../../backend/tfjs_backend';\n/**\n * Preprocessing Rescaling Layer\n *\n * This rescales images by a scaling and offset factor\n */\nclass Rescaling extends Layer {\n    constructor(args) {\n        super(args);\n        this.scale = args.scale;\n        if (args.offset) {\n            this.offset = args.offset;\n        }\n        else {\n            this.offset = 0;\n        }\n    }\n    getConfig() {\n        const config = {\n            'scale': this.scale,\n            'offset': this.offset\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = getExactlyOneTensor(inputs);\n            if (inputs.dtype !== 'float32') {\n                inputs = K.cast(inputs, 'float32');\n            }\n            return add(mul(inputs, this.scale), this.offset);\n        });\n    }\n}\n/** @nocollapse */\nRescaling.className = 'Rescaling';\nexport { Rescaling };\nserialization.registerClass(Rescaling);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VfcHJlcHJvY2Vzc2luZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9sYXllcnMvcHJlcHJvY2Vzc2luZy9pbWFnZV9wcmVwcm9jZXNzaW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFZLEtBQUssRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBRSxhQUFhLEVBQVUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUM5RSxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUM5RCxPQUFPLEtBQUssQ0FBQyxNQUFNLDRCQUE0QixDQUFDO0FBUWhEOzs7O0dBSUc7QUFDSCxNQUFhLFNBQVUsU0FBUSxLQUFLO0lBS2xDLFlBQVksSUFBbUI7UUFDN0IsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRVosSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDO1FBRXhCLElBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNoQixJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDekI7YUFBTTtZQUNMLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0gsQ0FBQztJQUVRLFNBQVM7UUFDaEIsTUFBTSxNQUFNLEdBQTZCO1lBQ3ZDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSztZQUNuQixRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU07U0FDdEIsQ0FBQztRQUVGLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRVEsSUFBSSxDQUFDLE1BQXVCLEVBQUUsTUFBYztRQUNuRCxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDZixNQUFNLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDckMsSUFBRyxNQUFNLENBQUMsS0FBSyxLQUFLLFNBQVMsRUFBRTtnQkFDM0IsTUFBTSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO2FBQ3RDO1lBQ0QsT0FBTyxHQUFHLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ25ELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUFuQ0Qsa0JBQWtCO0FBQ1gsbUJBQVMsR0FBRyxXQUFXLENBQUM7U0FGcEIsU0FBUztBQXVDdEIsYUFBYSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIENvZGVTbWl0aCBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7TGF5ZXJBcmdzLCBMYXllcn0gZnJvbSAnLi4vLi4vZW5naW5lL3RvcG9sb2d5JztcbmltcG9ydCB7IHNlcmlhbGl6YXRpb24sIFRlbnNvciwgbXVsLCBhZGQsIHRpZHkgfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuaW1wb3J0IHsgZ2V0RXhhY3RseU9uZVRlbnNvciB9IGZyb20gJy4uLy4uL3V0aWxzL3R5cGVzX3V0aWxzJztcbmltcG9ydCAqIGFzIEsgZnJvbSAnLi4vLi4vYmFja2VuZC90ZmpzX2JhY2tlbmQnO1xuaW1wb3J0IHsgS3dhcmdzIH0gZnJvbSAnLi4vLi4vdHlwZXMnO1xuXG5leHBvcnQgZGVjbGFyZSBpbnRlcmZhY2UgUmVzY2FsaW5nQXJncyBleHRlbmRzIExheWVyQXJncyB7XG4gIHNjYWxlOiBudW1iZXI7XG4gIG9mZnNldD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBQcmVwcm9jZXNzaW5nIFJlc2NhbGluZyBMYXllclxuICpcbiAqIFRoaXMgcmVzY2FsZXMgaW1hZ2VzIGJ5IGEgc2NhbGluZyBhbmQgb2Zmc2V0IGZhY3RvclxuICovXG5leHBvcnQgY2xhc3MgUmVzY2FsaW5nIGV4dGVuZHMgTGF5ZXIge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIGNsYXNzTmFtZSA9ICdSZXNjYWxpbmcnO1xuICBwcml2YXRlIHJlYWRvbmx5IHNjYWxlOiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgb2Zmc2V0OiBudW1iZXI7XG4gIGNvbnN0cnVjdG9yKGFyZ3M6IFJlc2NhbGluZ0FyZ3MpIHtcbiAgICBzdXBlcihhcmdzKTtcblxuICAgIHRoaXMuc2NhbGUgPSBhcmdzLnNjYWxlO1xuXG4gICAgaWYoYXJncy5vZmZzZXQpIHtcbiAgICB0aGlzLm9mZnNldCA9IGFyZ3Mub2Zmc2V0O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgfVxuICB9XG5cbiAgb3ZlcnJpZGUgZ2V0Q29uZmlnKCk6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCB7XG4gICAgY29uc3QgY29uZmlnOiBzZXJpYWxpemF0aW9uLkNvbmZpZ0RpY3QgPSB7XG4gICAgICAnc2NhbGUnOiB0aGlzLnNjYWxlLFxuICAgICAgJ29mZnNldCc6IHRoaXMub2Zmc2V0XG4gICAgfTtcblxuICAgIGNvbnN0IGJhc2VDb25maWcgPSBzdXBlci5nZXRDb25maWcoKTtcbiAgICBPYmplY3QuYXNzaWduKGNvbmZpZywgYmFzZUNvbmZpZyk7XG4gICAgcmV0dXJuIGNvbmZpZztcbiAgfVxuXG4gIG92ZXJyaWRlIGNhbGwoaW5wdXRzOiBUZW5zb3J8VGVuc29yW10sIGt3YXJnczogS3dhcmdzKTogVGVuc29yW118VGVuc29yIHtcbiAgICByZXR1cm4gdGlkeSgoKSA9PiB7XG4gICAgICBpbnB1dHMgPSBnZXRFeGFjdGx5T25lVGVuc29yKGlucHV0cyk7XG4gICAgICBpZihpbnB1dHMuZHR5cGUgIT09ICdmbG9hdDMyJykge1xuICAgICAgICAgIGlucHV0cyA9IEsuY2FzdChpbnB1dHMsICdmbG9hdDMyJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gYWRkKG11bChpbnB1dHMsIHRoaXMuc2NhbGUpLCB0aGlzLm9mZnNldCk7XG4gICAgfSk7XG4gIH1cbn1cblxuc2VyaWFsaXphdGlvbi5yZWdpc3RlckNsYXNzKFJlc2NhbGluZyk7XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Padding Layers.\n */\n// Porting Note: In Python Keras, the padding layers are in convolutional.py,\n//   but we decided to put them in a separate file (padding.ts) for clarity.\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { imageDataFormat } from '../backend/common';\nimport { InputSpec, Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\n/**\n * Pads the middle dimension of a 3D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of 2 integers, how many zeros to add at the start and\n *   end of the middle dimension (i.e., dimension 1).\n * @return A padded 3D `tf.Tensor`.\n */\nexport function temporalPadding(x, padding) {\n    return tidy(() => {\n        if (x.rank !== 3) {\n            throw new ValueError(`temporalPadding expects input tensor to be 3-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [1, 1];\n        }\n        if (padding.length !== 2) {\n            throw new ValueError(`temporalPadding expects input padding pattern to be a length-2 ` +\n                `array, but received a length-${padding.length} array.`);\n        }\n        const pattern = [[0, 0], padding, [0, 0]];\n        return tfc.pad(x, pattern);\n    });\n}\n/**\n * Pads the 2nd and 3rd dimensions of a 4D tensor.\n *\n * @param x Input `tf.Tensor` to be padded.\n * @param padding `Array` of two `Array`s, each of which is an `Array` of two\n *   integers. The amount of padding at the beginning and end of the 2nd and 3rd\n *   dimensions, respectively.\n * @param dataFormat 'channelsLast' (default) or 'channelsFirst'.\n * @return Padded 4D `tf.Tensor`.\n */\nexport function spatial2dPadding(x, padding, dataFormat) {\n    return tidy(() => {\n        if (x.rank !== 4) {\n            throw new ValueError(`temporalPadding expects input tensor to be 4-D, but received a ` +\n                `${x.rank}-D tensor.`);\n        }\n        if (padding == null) {\n            padding = [[1, 1], [1, 1]];\n        }\n        if (padding.length !== 2 || padding[0].length !== 2 ||\n            padding[1].length !== 2) {\n            throw new ValueError('spatial2dPadding expects `padding` to be an Array of two Arrays, ' +\n                'each of which is an Array of two integers.');\n        }\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        if (dataFormat !== 'channelsLast' && dataFormat !== 'channelsFirst') {\n            throw new ValueError(`Unknown data format: ${dataFormat}. ` +\n                `Supported data formats are 'channelsLast' and 'channelsFirst.`);\n        }\n        let pattern;\n        if (dataFormat === 'channelsFirst') {\n            pattern = [[0, 0], [0, 0], padding[0], padding[1]];\n        }\n        else {\n            pattern = [[0, 0], padding[0], padding[1], [0, 0]];\n        }\n        return tfc.pad(x, pattern);\n    });\n}\nclass ZeroPadding2D extends Layer {\n    constructor(args) {\n        if (args == null) {\n            args = {};\n        }\n        super(args);\n        this.dataFormat =\n            args.dataFormat == null ? imageDataFormat() : args.dataFormat;\n        // TODO(cais): Maybe refactor the following logic surrounding `padding`\n        //   into a helper method.\n        if (args.padding == null) {\n            this.padding = [[1, 1], [1, 1]];\n        }\n        else if (typeof args.padding === 'number') {\n            this.padding =\n                [[args.padding, args.padding], [args.padding, args.padding]];\n        }\n        else {\n            args.padding = args.padding;\n            if (args.padding.length !== 2) {\n                throw new ValueError(`ZeroPadding2D expects padding to be a length-2 array, but ` +\n                    `received a length-${args.padding.length} array.`);\n            }\n            let heightPadding;\n            let widthPadding;\n            if (typeof args.padding[0] === 'number') {\n                heightPadding = [args.padding[0], args.padding[0]];\n                widthPadding = [args.padding[1], args.padding[1]];\n            }\n            else {\n                args.padding = args.padding;\n                if (args.padding[0].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects height padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[0].length} array.`);\n                }\n                heightPadding = args.padding[0];\n                if (args.padding[1].length !== 2) {\n                    throw new ValueError(`ZeroPadding2D expects width padding to be a length-2 array, ` +\n                        `but received a length-${args.padding[1].length} array.`);\n                }\n                widthPadding = args.padding[1];\n            }\n            this.padding = [heightPadding, widthPadding];\n        }\n        this.inputSpec = [new InputSpec({ ndim: 4 })];\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        let rows;\n        let cols;\n        if (this.dataFormat === 'channelsFirst') {\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                rows = inputShape[2] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[3] != null && inputShape[3] >= 0) {\n                cols = inputShape[3] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], inputShape[1], rows, cols];\n        }\n        else {\n            if (inputShape[1] != null && inputShape[1] >= 0) {\n                rows = inputShape[1] + this.padding[0][0] + this.padding[0][1];\n            }\n            else {\n                rows = null;\n            }\n            if (inputShape[2] != null && inputShape[2] >= 0) {\n                cols = inputShape[2] + this.padding[1][0] + this.padding[1][1];\n            }\n            else {\n                cols = null;\n            }\n            return [inputShape[0], rows, cols, inputShape[3]];\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => spatial2dPadding(getExactlyOneTensor(inputs), this.padding, this.dataFormat));\n    }\n    getConfig() {\n        const config = {\n            padding: this.padding,\n            dataFormat: this.dataFormat,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nZeroPadding2D.className = 'ZeroPadding2D';\nexport { ZeroPadding2D };\nserialization.registerClass(ZeroPadding2D);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2022 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { image, serialization, tidy } from '@tensorflow/tfjs-core'; // mul, add\nimport { Layer } from '../../engine/topology';\nimport { ValueError } from '../../errors';\nimport { getExactlyOneShape } from '../../utils/types_utils'; //, getExactlyOneTensor\n// tf methods unimplemented in tfjs: 'bicubic', 'area', 'lanczos3', 'lanczos5',\n//                                   'gaussian', 'mitchellcubic'\nconst INTERPOLATION_KEYS = ['bilinear', 'nearest'];\nconst INTERPOLATION_METHODS = new Set(INTERPOLATION_KEYS);\n/**\n * Preprocessing Resizing Layer\n *\n * This resizes images by a scaling and offset factor\n */\nclass Resizing extends Layer {\n    constructor(args) {\n        super(args);\n        this.height = args.height;\n        this.width = args.width;\n        if (args.interpolation) {\n            if (INTERPOLATION_METHODS.has(args.interpolation)) {\n                this.interpolation = args.interpolation;\n            }\n            else {\n                throw new ValueError(`Invalid interpolation parameter: ${args.interpolation} is not implemented`);\n            }\n        }\n        else {\n            this.interpolation = 'bilinear';\n        }\n        this.cropToAspectRatio = Boolean(args.cropToAspectRatio);\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        const numChannels = inputShape[2];\n        return [this.height, this.width, numChannels];\n    }\n    getConfig() {\n        const config = {\n            'height': this.height,\n            'width': this.width,\n            'interpolation': this.interpolation,\n            'cropToAspectRatio': this.cropToAspectRatio\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            const size = [this.height, this.width];\n            if (this.interpolation === 'bilinear') {\n                return image.resizeBilinear(inputs, size, !this.cropToAspectRatio);\n            }\n            else if (this.interpolation === 'nearest') {\n                return image.resizeNearestNeighbor(inputs, size, !this.cropToAspectRatio);\n            }\n            else {\n                throw new Error(`Interpolation is ${this.interpolation} but only ${[...INTERPOLATION_METHODS]} are supported`);\n            }\n        });\n    }\n}\n/** @nocollapse */\nResizing.className = 'Resizing';\nexport { Resizing };\nserialization.registerClass(Resizing);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW1hZ2VfcmVzaXppbmcuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvbGF5ZXJzL3ByZXByb2Nlc3NpbmcvaW1hZ2VfcmVzaXppbmcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0dBUUc7QUFFSCxPQUFPLEVBQUMsS0FBSyxFQUFRLGFBQWEsRUFBVSxJQUFJLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQyxDQUFFLFdBQVc7QUFFNUYsT0FBTyxFQUFDLEtBQUssRUFBWSxNQUFNLHVCQUF1QixDQUFDO0FBQ3ZELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxjQUFjLENBQUM7QUFHeEMsT0FBTyxFQUFDLGtCQUFrQixFQUFDLE1BQU0seUJBQXlCLENBQUMsQ0FBRSx1QkFBdUI7QUFFcEYsK0VBQStFO0FBQy9FLGdFQUFnRTtBQUNoRSxNQUFNLGtCQUFrQixHQUFHLENBQUMsVUFBVSxFQUFFLFNBQVMsQ0FBVSxDQUFDO0FBQzVELE1BQU0scUJBQXFCLEdBQUcsSUFBSSxHQUFHLENBQUMsa0JBQWtCLENBQUMsQ0FBQztBQVUxRDs7OztHQUlHO0FBRUgsTUFBYSxRQUFTLFNBQVEsS0FBSztJQVVqQyxZQUFZLElBQWtCO1FBQzVCLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUVaLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztRQUMxQixJQUFJLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUM7UUFFeEIsSUFBSSxJQUFJLENBQUMsYUFBYSxFQUFFO1lBQ3RCLElBQUkscUJBQXFCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsRUFBRTtnQkFDakQsSUFBSSxDQUFDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO2FBQ3pDO2lCQUFNO2dCQUNMLE1BQU0sSUFBSSxVQUFVLENBQUMsb0NBQ2pCLElBQUksQ0FBQyxhQUFhLHFCQUFxQixDQUFDLENBQUM7YUFDOUM7U0FDRjthQUFNO1lBQ0wsSUFBSSxDQUFDLGFBQWEsR0FBRyxVQUFVLENBQUM7U0FDakM7UUFDRCxJQUFJLENBQUMsaUJBQWlCLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQzNELENBQUM7SUFFUSxrQkFBa0IsQ0FBQyxVQUF5QjtRQUNuRCxVQUFVLEdBQUcsa0JBQWtCLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDNUMsTUFBTSxXQUFXLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDaEQsQ0FBQztJQUVRLFNBQVM7UUFDaEIsTUFBTSxNQUFNLEdBQTZCO1lBQ3ZDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTTtZQUNyQixPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUs7WUFDbkIsZUFBZSxFQUFFLElBQUksQ0FBQyxhQUFhO1lBQ25DLG1CQUFtQixFQUFFLElBQUksQ0FBQyxpQkFBaUI7U0FDNUMsQ0FBQztRQUVGLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUNyQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUNsQyxPQUFPLE1BQU0sQ0FBQztJQUNoQixDQUFDO0lBRVEsSUFBSSxDQUFDLE1BQXVDLEVBQUUsTUFBYztRQUVuRSxPQUFPLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDZixNQUFNLElBQUksR0FBcUIsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN6RCxJQUFJLElBQUksQ0FBQyxhQUFhLEtBQUssVUFBVSxFQUFFO2dCQUNyQyxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO2FBQ3BFO2lCQUFNLElBQUksSUFBSSxDQUFDLGFBQWEsS0FBSyxTQUFTLEVBQUU7Z0JBQzNDLE9BQU8sS0FBSyxDQUFDLHFCQUFxQixDQUM5QixNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLENBQUM7YUFDNUM7aUJBQU07Z0JBQ0wsTUFBTSxJQUFJLEtBQUssQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLGFBQWEsYUFBYSxDQUFDLEdBQUcscUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsQ0FBQzthQUNoSDtRQUNILENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQzs7QUE1REQsa0JBQWtCO0FBQ1gsa0JBQVMsR0FBRyxVQUFVLENBQUM7U0FGbkIsUUFBUTtBQWdFckIsYUFBYSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIyIENvZGVTbWl0aCBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7aW1hZ2UsIFJhbmssIHNlcmlhbGl6YXRpb24sIFRlbnNvciwgdGlkeX0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJzsgIC8vIG11bCwgYWRkXG5cbmltcG9ydCB7TGF5ZXIsIExheWVyQXJnc30gZnJvbSAnLi4vLi4vZW5naW5lL3RvcG9sb2d5JztcbmltcG9ydCB7VmFsdWVFcnJvcn0gZnJvbSAnLi4vLi4vZXJyb3JzJztcbmltcG9ydCB7U2hhcGV9IGZyb20gJy4uLy4uL2tlcmFzX2Zvcm1hdC9jb21tb24nO1xuaW1wb3J0IHtLd2FyZ3N9IGZyb20gJy4uLy4uL3R5cGVzJztcbmltcG9ydCB7Z2V0RXhhY3RseU9uZVNoYXBlfSBmcm9tICcuLi8uLi91dGlscy90eXBlc191dGlscyc7ICAvLywgZ2V0RXhhY3RseU9uZVRlbnNvclxuXG4vLyB0ZiBtZXRob2RzIHVuaW1wbGVtZW50ZWQgaW4gdGZqczogJ2JpY3ViaWMnLCAnYXJlYScsICdsYW5jem9zMycsICdsYW5jem9zNScsXG4vLyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ2dhdXNzaWFuJywgJ21pdGNoZWxsY3ViaWMnXG5jb25zdCBJTlRFUlBPTEFUSU9OX0tFWVMgPSBbJ2JpbGluZWFyJywgJ25lYXJlc3QnXSBhcyBjb25zdDtcbmNvbnN0IElOVEVSUE9MQVRJT05fTUVUSE9EUyA9IG5ldyBTZXQoSU5URVJQT0xBVElPTl9LRVlTKTtcbnR5cGUgSW50ZXJwb2xhdGlvblR5cGUgPSB0eXBlb2YgSU5URVJQT0xBVElPTl9LRVlTW251bWJlcl07XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBSZXNpemluZ0FyZ3MgZXh0ZW5kcyBMYXllckFyZ3Mge1xuICBoZWlnaHQ6IG51bWJlcjtcbiAgd2lkdGg6IG51bWJlcjtcbiAgaW50ZXJwb2xhdGlvbj86IEludGVycG9sYXRpb25UeXBlOyAvLyBkZWZhdWx0ID0gJ2JpbGluZWFyJztcbiAgY3JvcFRvQXNwZWN0UmF0aW8/OiBib29sZWFuOyAgICAgICAvLyBkZWZhdWx0ID0gZmFsc2U7XG59XG5cbi8qKlxuICogUHJlcHJvY2Vzc2luZyBSZXNpemluZyBMYXllclxuICpcbiAqIFRoaXMgcmVzaXplcyBpbWFnZXMgYnkgYSBzY2FsaW5nIGFuZCBvZmZzZXQgZmFjdG9yXG4gKi9cblxuZXhwb3J0IGNsYXNzIFJlc2l6aW5nIGV4dGVuZHMgTGF5ZXIge1xuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgc3RhdGljIGNsYXNzTmFtZSA9ICdSZXNpemluZyc7XG4gIHByaXZhdGUgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXI7XG4gIHByaXZhdGUgcmVhZG9ubHkgd2lkdGg6IG51bWJlcjtcbiAgLy8gbWV0aG9kIG9mIGludGVycG9sYXRpb24gdG8gYmUgdXNlZDsgZGVmYXVsdCA9IFwiYmlsaW5lYXJcIjtcbiAgcHJpdmF0ZSByZWFkb25seSBpbnRlcnBvbGF0aW9uOiBJbnRlcnBvbGF0aW9uVHlwZTtcbiAgLy8gdG9nZ2xlIHdoZXRoZXIgdGhlIGFzcGVjdCByYXRpbyBzaG91bGQgYmUgcHJlc2VydmVkOyBkZWZhdWx0ID0gZmFsc2U7XG4gIHByaXZhdGUgcmVhZG9ubHkgY3JvcFRvQXNwZWN0UmF0aW86IGJvb2xlYW47XG5cbiAgY29uc3RydWN0b3IoYXJnczogUmVzaXppbmdBcmdzKSB7XG4gICAgc3VwZXIoYXJncyk7XG5cbiAgICB0aGlzLmhlaWdodCA9IGFyZ3MuaGVpZ2h0O1xuICAgIHRoaXMud2lkdGggPSBhcmdzLndpZHRoO1xuXG4gICAgaWYgKGFyZ3MuaW50ZXJwb2xhdGlvbikge1xuICAgICAgaWYgKElOVEVSUE9MQVRJT05fTUVUSE9EUy5oYXMoYXJncy5pbnRlcnBvbGF0aW9uKSkge1xuICAgICAgICB0aGlzLmludGVycG9sYXRpb24gPSBhcmdzLmludGVycG9sYXRpb247XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVmFsdWVFcnJvcihgSW52YWxpZCBpbnRlcnBvbGF0aW9uIHBhcmFtZXRlcjogJHtcbiAgICAgICAgICAgIGFyZ3MuaW50ZXJwb2xhdGlvbn0gaXMgbm90IGltcGxlbWVudGVkYCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuaW50ZXJwb2xhdGlvbiA9ICdiaWxpbmVhcic7XG4gICAgfVxuICAgIHRoaXMuY3JvcFRvQXNwZWN0UmF0aW8gPSBCb29sZWFuKGFyZ3MuY3JvcFRvQXNwZWN0UmF0aW8pO1xuICB9XG5cbiAgb3ZlcnJpZGUgY29tcHV0ZU91dHB1dFNoYXBlKGlucHV0U2hhcGU6IFNoYXBlfFNoYXBlW10pOiBTaGFwZXxTaGFwZVtdIHtcbiAgICBpbnB1dFNoYXBlID0gZ2V0RXhhY3RseU9uZVNoYXBlKGlucHV0U2hhcGUpO1xuICAgIGNvbnN0IG51bUNoYW5uZWxzID0gaW5wdXRTaGFwZVsyXTtcbiAgICByZXR1cm4gW3RoaXMuaGVpZ2h0LCB0aGlzLndpZHRoLCBudW1DaGFubmVsc107XG4gIH1cblxuICBvdmVycmlkZSBnZXRDb25maWcoKTogc2VyaWFsaXphdGlvbi5Db25maWdEaWN0IHtcbiAgICBjb25zdCBjb25maWc6IHNlcmlhbGl6YXRpb24uQ29uZmlnRGljdCA9IHtcbiAgICAgICdoZWlnaHQnOiB0aGlzLmhlaWdodCxcbiAgICAgICd3aWR0aCc6IHRoaXMud2lkdGgsXG4gICAgICAnaW50ZXJwb2xhdGlvbic6IHRoaXMuaW50ZXJwb2xhdGlvbixcbiAgICAgICdjcm9wVG9Bc3BlY3RSYXRpbyc6IHRoaXMuY3JvcFRvQXNwZWN0UmF0aW9cbiAgICB9O1xuXG4gICAgY29uc3QgYmFzZUNvbmZpZyA9IHN1cGVyLmdldENvbmZpZygpO1xuICAgIE9iamVjdC5hc3NpZ24oY29uZmlnLCBiYXNlQ29uZmlnKTtcbiAgICByZXR1cm4gY29uZmlnO1xuICB9XG5cbiAgb3ZlcnJpZGUgY2FsbChpbnB1dHM6IFRlbnNvcjxSYW5rLlIzPnxUZW5zb3I8UmFuay5SND4sIGt3YXJnczogS3dhcmdzKTpcbiAgICAgIFRlbnNvcltdfFRlbnNvciB7XG4gICAgcmV0dXJuIHRpZHkoKCkgPT4ge1xuICAgICAgY29uc3Qgc2l6ZTogW251bWJlciwgbnVtYmVyXSA9IFt0aGlzLmhlaWdodCwgdGhpcy53aWR0aF07XG4gICAgICBpZiAodGhpcy5pbnRlcnBvbGF0aW9uID09PSAnYmlsaW5lYXInKSB7XG4gICAgICAgIHJldHVybiBpbWFnZS5yZXNpemVCaWxpbmVhcihpbnB1dHMsIHNpemUsICF0aGlzLmNyb3BUb0FzcGVjdFJhdGlvKTtcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5pbnRlcnBvbGF0aW9uID09PSAnbmVhcmVzdCcpIHtcbiAgICAgICAgcmV0dXJuIGltYWdlLnJlc2l6ZU5lYXJlc3ROZWlnaGJvcihcbiAgICAgICAgICAgIGlucHV0cywgc2l6ZSwgIXRoaXMuY3JvcFRvQXNwZWN0UmF0aW8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBJbnRlcnBvbGF0aW9uIGlzICR7dGhpcy5pbnRlcnBvbGF0aW9ufSBidXQgb25seSAke1suLi5JTlRFUlBPTEFUSU9OX01FVEhPRFNdfSBhcmUgc3VwcG9ydGVkYCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuc2VyaWFsaXphdGlvbi5yZWdpc3RlckNsYXNzKFJlc2l6aW5nKTtcbiJdfQ=="],"names":["CategoryEncoding","constructor","args","super","this","numTokens","outputMode","getConfig","config","baseConfig","Object","assign","computeOutputShape","inputShape","length","push","call","inputs","kwargs","tidy","countWeights","dtype","maxValue","max","minValue","min","greaterEqualMax","greater","bufferSync","get","greaterMin","greaterEqual","depth","weights","input","originalShape","shape","rank","expandDims","binaryOutput","includes","denseBincountInput","binCounts","denseBincount","mul","className","serialization","pool2d","x","poolSize","strides","padding","dataFormat","poolMode","y","paddingString","pool3d","Pooling1D","Array","isArray","JSON","stringify","inputSpec","ndim","invokeCallHook","output","poolingFunction","MaxPooling1D","AveragePooling1D","Pooling2D","rows","cols","MaxPooling2D","AveragePooling2D","Pooling3D","depths","MaxPooling3D","AveragePooling3D","GlobalPooling1D","GlobalAveragePooling1D","GlobalMaxPooling1D","GlobalPooling2D","GlobalAveragePooling2D","GlobalMaxPooling2D","deserialize","customObjects","fastWeightInit","getMap","classNameMap","INTERPOLATION_METHODS","Set","RandomWidth","factor","interpolation","widthLower","widthUpper","has","numChannels","imgHeight","imgWidth","widthFactor","randomUniform","randomGenerator","next","adjustedWidth","dataSync","Math","round","size","image","resizeBilinear","resizeNearestNeighbor","Error","cropAndResize","CenterCrop","height","width","centerCrop","hBuffer","wBuffer","inputHeight","inputWidth","isRank3","bound","boxesArr","stack","i","boxes","tensor","boxInd","range","cropped","unstack","upsize","outputs","rankedInputs","floor","hAxis","wAxis","Rescaling","scale","offset","add","ZeroPadding2D","heightPadding","widthPadding","spatial2dPadding","pattern","Resizing","cropToAspectRatio","Boolean"],"sourceRoot":""}