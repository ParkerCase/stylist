{"version":3,"file":"stylist-vendors-13e69d33.ecb4a3769f74a91c1fb2.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/backend/common.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/common.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/backend/tfjs_backend.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/callbacks.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/backend/random_seed.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/base_callbacks.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/constraints.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/backend/state.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { backend } from '@tensorflow/tfjs-core';\nlet _epsilon;\n/**\n * Returns the value of the fuzz factor used in numeric expressions.\n */\nexport function epsilon() {\n    if (_epsilon == null) {\n        _epsilon = backend().epsilon();\n    }\n    return _epsilon;\n}\n/**\n * Sets the value of the fuzz factor used in numeric expressions.\n * @param e New value of epsilon.\n */\nexport function setEpsilon(e) {\n    _epsilon = e;\n}\n/**\n * Returns the default image data format convention.\n */\nexport function imageDataFormat() {\n    return 'channelsLast';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1sYXllcnMvc3JjL2JhY2tlbmQvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFDLE9BQU8sRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRzlDLElBQUksUUFBZ0IsQ0FBQztBQUVyQjs7R0FFRztBQUNILE1BQU0sVUFBVSxPQUFPO0lBQ3JCLElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtRQUNwQixRQUFRLEdBQUcsT0FBTyxFQUFFLENBQUMsT0FBTyxFQUFFLENBQUM7S0FDaEM7SUFDRCxPQUFPLFFBQVEsQ0FBQztBQUNsQixDQUFDO0FBRUQ7OztHQUdHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFTO0lBQ2xDLFFBQVEsR0FBRyxDQUFDLENBQUM7QUFDZixDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsZUFBZTtJQUM3QixPQUFPLGNBQWMsQ0FBQztBQUN4QixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIExMQ1xuICpcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZVxuICogbGljZW5zZSB0aGF0IGNhbiBiZSBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIG9yIGF0XG4gKiBodHRwczovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL01JVC5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtiYWNrZW5kfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuaW1wb3J0IHtEYXRhRm9ybWF0fSBmcm9tICcuLi9rZXJhc19mb3JtYXQvY29tbW9uJztcblxubGV0IF9lcHNpbG9uOiBudW1iZXI7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgdmFsdWUgb2YgdGhlIGZ1enogZmFjdG9yIHVzZWQgaW4gbnVtZXJpYyBleHByZXNzaW9ucy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGVwc2lsb24oKSB7XG4gIGlmIChfZXBzaWxvbiA9PSBudWxsKSB7XG4gICAgX2Vwc2lsb24gPSBiYWNrZW5kKCkuZXBzaWxvbigpO1xuICB9XG4gIHJldHVybiBfZXBzaWxvbjtcbn1cblxuLyoqXG4gKiBTZXRzIHRoZSB2YWx1ZSBvZiB0aGUgZnV6eiBmYWN0b3IgdXNlZCBpbiBudW1lcmljIGV4cHJlc3Npb25zLlxuICogQHBhcmFtIGUgTmV3IHZhbHVlIG9mIGVwc2lsb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRFcHNpbG9uKGU6IG51bWJlcikge1xuICBfZXBzaWxvbiA9IGU7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZGVmYXVsdCBpbWFnZSBkYXRhIGZvcm1hdCBjb252ZW50aW9uLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW1hZ2VEYXRhRm9ybWF0KCk6IERhdGFGb3JtYXQge1xuICByZXR1cm4gJ2NoYW5uZWxzTGFzdCc7XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Common functions for TensorFlow.js Layers.\n */\nimport { VALID_DATA_FORMAT_VALUES, VALID_INTERPOLATION_FORMAT_VALUES, VALID_PADDING_MODE_VALUES, VALID_POOL_MODE_VALUES } from './keras_format/common';\nimport { checkStringTypeUnionValue } from './utils/generic_utils';\n// A map from the requested scoped name of a Tensor to the number of Tensors\n// wanting that name so far.  This allows enforcing name uniqueness by appending\n// an incrementing index, e.g. scope/name, scope/name_1, scope/name_2, etc.\nconst nameMap = new Map();\nexport function checkDataFormat(value) {\n    checkStringTypeUnionValue(VALID_DATA_FORMAT_VALUES, 'DataFormat', value);\n}\nexport function checkInterpolationFormat(value) {\n    checkStringTypeUnionValue(VALID_INTERPOLATION_FORMAT_VALUES, 'InterpolationFormat', value);\n}\nexport function checkPaddingMode(value) {\n    checkStringTypeUnionValue(VALID_PADDING_MODE_VALUES, 'PaddingMode', value);\n}\nexport function checkPoolMode(value) {\n    checkStringTypeUnionValue(VALID_POOL_MODE_VALUES, 'PoolMode', value);\n}\nconst _nameScopeStack = [];\nconst _nameScopeDivider = '/';\n/**\n * Enter namescope, which can be nested.\n */\nexport function nameScope(name, fn) {\n    _nameScopeStack.push(name);\n    try {\n        const val = fn();\n        _nameScopeStack.pop();\n        return val;\n    }\n    catch (e) {\n        _nameScopeStack.pop();\n        throw e;\n    }\n}\n/**\n * Get the current namescope as a flat, concatenated string.\n */\nfunction currentNameScopePrefix() {\n    if (_nameScopeStack.length === 0) {\n        return '';\n    }\n    else {\n        return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n    }\n}\n/**\n * Get the name a Tensor (or Variable) would have if not uniqueified.\n * @param tensorName\n * @return Scoped name string.\n */\nexport function getScopedTensorName(tensorName) {\n    if (!isValidTensorName(tensorName)) {\n        throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n    }\n    return currentNameScopePrefix() + tensorName;\n}\n/**\n * Get unique names for Tensors and Variables.\n * @param scopedName The fully-qualified name of the Tensor, i.e. as produced by\n *  `getScopedTensorName()`.\n * @return A unique version of the given fully scoped name.\n *   If this is the first time that the scoped name is seen in this session,\n *   then the given `scopedName` is returned unaltered.  If the same name is\n *   seen again (producing a collision), an incrementing suffix is added to the\n *   end of the name, so it takes the form 'scope/name_1', 'scope/name_2', etc.\n */\nexport function getUniqueTensorName(scopedName) {\n    if (!isValidTensorName(scopedName)) {\n        throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n    }\n    if (!nameMap.has(scopedName)) {\n        nameMap.set(scopedName, 0);\n    }\n    const index = nameMap.get(scopedName);\n    nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n    if (index > 0) {\n        const result = `${scopedName}_${index}`;\n        // Mark the composed name as used in case someone wants\n        // to call getUniqueTensorName(\"name_1\").\n        nameMap.set(result, 1);\n        return result;\n    }\n    else {\n        return scopedName;\n    }\n}\nconst tensorNameRegex = new RegExp(/^[A-Za-z0-9][-A-Za-z0-9\\._\\/]*$/);\n/**\n * Determine whether a string is a valid tensor name.\n * @param name\n * @returns A Boolean indicating whether `name` is a valid tensor name.\n */\nexport function isValidTensorName(name) {\n    return !!name.match(tensorNameRegex);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * deeplearn.js backend.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { onesLike as coreOnesLike, scalar, tensor1d, tidy, where, zerosLike as coreZerosLike } from '@tensorflow/tfjs-core';\nimport { checkDataFormat } from '../common';\nimport { NotImplementedError, ValueError } from '../errors';\nimport * as math_utils from '../utils/math_utils';\nimport { imageDataFormat } from './common';\n// tslint:enable\n/* Setting and getting backend from deeplearn.js. */\n// Default deeplearn.js backend is WebGL (GPU).\nlet backend = 'webgl';\nexport function setBackend(requestedBackend) {\n    tfc.setBackend(requestedBackend);\n    backend = requestedBackend;\n}\nexport function getBackend() {\n    return backend;\n}\n/**\n * Indicates whether the backend is operating symbolically.\n *\n * This function will be used to determine how to interpret user code. If\n * it returns true, calls to the backend construct a symbolic graph; if\n * it returns false, calls to the backend execute immediately.\n */\nexport function isBackendSymbolic() {\n    return false;\n}\n/**\n * Get the number of elements in a Tensor.\n * @param x The Tensor.\n * @return Number of elements in `x`.\n */\nexport function countParams(x) {\n    const shape = x.shape;\n    if (shape.length > 0) {\n        return shape.reduce((a, b) => a * b);\n    }\n    else {\n        // Scalar.\n        return 1;\n    }\n}\n/**\n * Casts a tensor to a different dtype and returns it.\n * @param x Input tensor.\n * @param dtype String: 'float32'|'int32'|'bool'.\n * @returns Tensor of the specified `dtype`.\n */\nexport function cast(x, dtype) {\n    return tfc.cast(x, dtype);\n}\n/**\n * Adds a 1-sized dimension at index \"axis\".\n * @param x Input tensor.\n * @param axis Position where to add the new axis.\n * @returns Result of the dimension expansion.\n */\nexport function expandDims(x, axis = -1) {\n    const outShape = x.shape.slice();\n    if (axis < 0) {\n        axis = outShape.length + axis + 1;\n    }\n    outShape.splice(axis, 0, 1);\n    return tfc.reshape(x, outShape);\n}\n/**\n * Repeats a 2D tensor.\n *\n * If `x` has shape `[samples, dim]` and `n` is 2, for example, the output\n * will have shape `[samples, 2, dim]`.\n *\n * @param x Input tensor.\n * @param n Integer, number of times to repeat.\n * @returns The result of the repeat operation.\n * @throws ValueError: If input tensor is not 2D.\n */\nexport function repeat(x, n) {\n    return tidy(() => {\n        if (x.shape.length !== 2) {\n            throw new ValueError(`repeat() expects a rank-2 tensor, but received a ` +\n                `rank-${x.shape.length} tensor.`);\n        }\n        const y = expandDims(x, 1);\n        return tile(y, [1, n, 1]);\n    });\n}\n/**\n * Flatten a Tensor into 1D.\n * @param x Input tensor.\n * @return The result of the flattening `x`.\n */\nexport function flatten(x) {\n    const newShape = [math_utils.arrayProd(x.shape)];\n    return tfc.reshape(x, newShape);\n}\n/**\n * Turn a nD tensor into a 2D tensor with same 0th dimension.\n * In other words, it flattens each data samples of a batch.\n *\n * @param x The tensor to flatten. The rank of this tensor is required to be 2\n *   or higher.\n * @return The result of the flattening.\n */\nexport function batchFlatten(x) {\n    if (x.rank <= 1) {\n        throw new ValueError(`batchFlatten requires a minimum rank of 2. Got rank: ${x.rank}.`);\n    }\n    const newShape = [x.shape[0], math_utils.arrayProd(x.shape, 1)];\n    return tfc.reshape(x, newShape);\n}\n/**\n * Do slicing along the first axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the first axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongFirstAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [start, 0], [size, array.shape[1]]);\n            case 3:\n                return tfc.slice3d(array, [start, 0, 0], [size, array.shape[1], array.shape[2]]);\n            case 4:\n                return tfc.slice4d(array, [start, 0, 0, 0], [size, array.shape[1], array.shape[2], array.shape[3]]);\n            case 5:\n                return tfc.slice(array, [start, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4]\n                ]);\n            case 6:\n                return tfc.slice(array, [start, 0, 0, 0, 0, 0], [\n                    size, array.shape[1], array.shape[2], array.shape[3], array.shape[4],\n                    array.shape[5]\n                ]);\n            default:\n                throw new ValueError(`sliceAlongFirstAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the last axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size size of the slice along the last axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongLastAxis(array, start, size) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                return tfc.slice2d(array, [0, start], [array.shape[0], size]);\n            case 3:\n                return tfc.slice3d(array, [0, 0, start], [array.shape[0], array.shape[1], size]);\n            case 4:\n                return tfc.slice4d(array, [0, 0, 0, start], [array.shape[0], array.shape[1], array.shape[2], size]);\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Do slicing along the sepcified axis.\n * @param array input `tf.Tensor`.\n * @param start starting index, inclusive.\n * @param size of the slice along the chosen axis.\n * @param choose an axis.\n * @returns result of the slicing.\n * @throws ValueError: If `array` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function sliceAlongAxis(array, start, size, axis) {\n    return tidy(() => {\n        switch (array.rank) {\n            case 1:\n                return tfc.slice1d(array, start, size);\n            case 2:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 3:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice3d(array, [0, start, 0], [array.shape[0], size, array.shape[2]]);\n                    case 3:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            case 4:\n                switch (axis) {\n                    case 1:\n                        return sliceAlongFirstAxis(array, start, size);\n                    case 2:\n                        return tfc.slice4d(array, [0, start, 0, 0], [array.shape[0], size, array.shape[2], array.shape[3]]);\n                    case 3:\n                        return tfc.slice4d(array, [0, 0, start, 0], [array.shape[0], array.shape[1], size, array.shape[3]]);\n                    case 4:\n                        return sliceAlongLastAxis(array, start, size);\n                    default:\n                        throw new ValueError(`The axis is not within the rank of the tensor ` +\n                            `${axis}`);\n                }\n            default:\n                throw new ValueError(`sliceAlongLastAxis() received an unsupported tensor rank: ` +\n                    `${array.rank}`);\n        }\n    });\n}\n/**\n * Concatenates a list of tensors alongside the specified axis.\n * @param tensors `Array` of tensors to concatenate.\n * @param axis Concatenation axis.\n * @returns The result of the concatenation.\n */\nexport function concatenate(tensors, axis = -1) {\n    let rank;\n    if (axis < 0) {\n        rank = tensors[0].rank;\n        if (rank !== 0) {\n            axis = rank;\n        }\n        else {\n            axis = 0;\n        }\n    }\n    if (axis === tensors[0].rank) {\n        // Porting Note: This is necessary because tfc.concat() requires axis to be\n        //   in the interval [-rank, rank).\n        axis = -1;\n    }\n    // Porting Note: Sparse concat is not supported yet.\n    return tfc.concat(tensors, axis);\n}\n/**\n * Concatenate two arrays along the first dimension.\n * @param a The 1st `tf.Tensor` to concatenate.\n * @param b The 2nd `tf.Tensor` to concatenate.\n * @returns Result of the concatenation.\n * @throws ValueError: If `a` is of an unsupported subtype of `tf.Tensor`.\n */\nexport function concatAlongFirstAxis(a, b) {\n    switch (a.rank) {\n        case 1:\n            return tfc.concat1d([a, b]);\n        case 2:\n            return tfc.concat2d([a, b], 0);\n        case 3:\n            return tfc.concat3d([a, b], 0);\n        case 4:\n            return tfc.concat4d([a, b], 0);\n        default:\n            throw new ValueError(`concatAlongFirstAxis() received an unsupported ` +\n                `tensor rank: ${a.rank}`);\n    }\n}\n/**\n * Creates a tensor by tiling `x` by `n`.\n * @param x A tensor.\n * @param n An Array of integers or a single integer. If an Array, the length\n *   must be the same as the number of dimensions in `x`. If a single integer,\n *   it will be treated as an Array of length 1.\n */\nexport function tile(x, n) {\n    if (!Array.isArray(n)) {\n        n = [n];\n    }\n    if (x.rank !== n.length) {\n        throw new ValueError(`The length of input n (${n.length}) does not match ` +\n            `the number of dimensions in input x (${x.rank})`);\n    }\n    return tfc.tile(x, n);\n}\n/* Creation of random tensors. */\n/**\n * Get a tensor with normal distribution of values.\n *\n * @param shape Shape of the tensor.\n * @param mean mean value of the normal distribution.\n * @param stddev standard deviation of the normal distribution.\n * @param dtype\n * @param seed\n * @return The normal tensor.\n */\nexport function randomNormal(shape, mean = 0.0, stddev = 1.0, dtype, seed) {\n    return tfc.randomNormal(shape, mean, stddev, dtype, seed);\n}\n/* Linear Algebra */\n/**\n * Multiply two tensors and returns the result as a tensor.\n *\n * For 2D tensors, this is equivalent to matrix multiplication (matMul).\n * For tensors of higher ranks, it follows the Theano behavior,\n * (e.g. `(2, 3) * (4, 3, 5) -> (2, 4, 5)`).  From the Theano documentation:\n *\n * For N dimensions it is a sum product over the last axis of x and the\n * second-to-last of y:\n *\n * @param a A tensor of at least rank 2.\n * @param b A tensor of at least rank 2.\n * @param activation (optional) A string identifying the activation\n *   function.\n * @return Result of the dot operation.\n */\nexport function dot(a, b, activation, bias) {\n    if ((a.rank < 2) || (b.rank < 2)) {\n        throw new NotImplementedError(`dot requires both inputs to be rank >= 2` +\n            ` but got x shape = ${a.shape} and y shape = ${b.shape}`);\n    }\n    if (b.rank >= 3) {\n        const xLastDim = a.shape.slice(-1)[0];\n        const ySecondLastDim = b.shape.slice(-2)[0];\n        if (xLastDim !== ySecondLastDim) {\n            throw new NotImplementedError(`If rank y >= 3, then the second last dim` +\n                ` of y must equal the last dim of x but got x shape = ${a.shape} and ` +\n                ` y shape = ${b.shape}`);\n        }\n    }\n    // Handle basic 2D x 2D case.\n    if ((a.rank === 2) && (b.rank === 2)) {\n        const transposeA = false;\n        const transposeB = false;\n        // tfc.fused.matMul only fuses certain activation functions. Unsupported\n        // activation functions are treated as 'linear' activations, which is\n        // equivalent to a no-op.\n        return tfc.fused.matMul({\n            a,\n            b: b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        });\n    }\n    else {\n        // Reshape x into the analogous 2D Tensor.\n        const aFirstDims = a.shape.slice(); // Holds all but the last dim of x.\n        const aLastDim = aFirstDims.pop();\n        a = tfc.reshape(a, [-1, aLastDim]);\n        // Reshape y into the analogous 2D Tensor, and keep track of the\n        // required dimensions to reproduce the output shape.\n        const bShape = b.shape.slice();\n        const bLastDim = bShape.pop();\n        const ySecondLastDim = bShape.pop();\n        const yOtherDims = [...bShape, bLastDim];\n        // permutation should be like [r-2, 0, 1, 2, ... r-4, r-3, r-1]\n        // where r is the rank of y.\n        const perm = Array.from({ length: b.rank }, (_, i) => {\n            if (i === 0) {\n                return b.rank - 2;\n            }\n            else if (i <= b.rank - 2) {\n                return i - 1;\n            }\n            return i;\n        });\n        b = tfc.reshape(tfc.transpose(b, perm), [ySecondLastDim, -1]);\n        // Multiply x and y as 2D Tensors, and then reshape back to original.\n        const outputShape = [...aFirstDims, ...yOtherDims];\n        const transposeA = false;\n        const transposeB = false;\n        return tfc.reshape(tfc.fused.matMul({\n            a,\n            b,\n            transposeA,\n            transposeB,\n            bias: bias ? reshapeBias(a.rank, bias, imageDataFormat()) : null,\n            activation\n        }), outputShape);\n    }\n}\n/**\n * Compute the sign Tensor of an input Tensor.\n *\n * Elements of the input `tf.Tensor` that are === 0 are mapped to 0.\n * Elements of the input `tf.Tensor` that are > 0 are mapped to 1.\n * Elements of the input `tf.Tensor` that are < 0 are mapped to -1.\n *\n * @param x Input `tf.Tensor`.\n * @return The sign `tf.Tensor`.\n */\nexport function sign(x) {\n    // TODO(cais): Move to the core.\n    return tidy(() => {\n        const zerosLikeX = coreZerosLike(x);\n        const onesLikeX = coreOnesLike(x);\n        return where(tfc.equal(x, zerosLikeX), zerosLikeX, where(tfc.greater(x, coreZerosLike(x)), onesLikeX, tfc.mul(-1, onesLikeX)));\n    });\n}\n/**\n * Computes the one-hot representation of an integer tensor.\n * @param indices nD integer tensor of shape\n *   `(batch_size, dim1, dim2, ... dim(n-1))`\n * @param numClasses Integer, number of classes to consider.\n * @returns (n + 1)D one hot representation of the input\n *   with shape `(batch_size, dim1, dim2, ... dim(n-1), num_classes)`\n */\nexport function oneHot(indices, numClasses) {\n    return tidy(() => {\n        if (indices.rank !== 1) {\n            throw new Error('Only 1D one-hot tensors are supported in the ' +\n                'deeplearn backend, at present.');\n        }\n        indices = tfc.cast(indices, 'int32');\n        return tfc.cast(tfc.oneHot(indices, numClasses), 'float32');\n    });\n}\n/* Elementary math functions. */\n/**\n * Retrieves the elements of indices `indices` in the tensor `reference`.\n * @param reference A tensor.\n * @param indices An integer tensor of indices or an `Array` of integers.\n * @param axis Axis along which to perform the gather operation.\n * @returns The result of the gathering as a tensor.\n */\nexport function gather(reference, indices, axis) {\n    return tidy(() => {\n        if (Array.isArray(indices)) {\n            indices = tensor1d(indices, 'int32');\n        }\n        else {\n            indices = tfc.cast(indices, 'int32');\n        }\n        return tfc.gather(reference, indices, axis);\n    });\n}\n/**\n * Element-wise square.\n * @param x Input tensor.\n * @return element-wise x^2\n */\nexport function square(x) {\n    return tfc.mul(x, x);\n}\n/**\n * Element-wise exponentiation.\n *\n * Porting Note: In PyKeras, `a` (the exponent) is a Python integer, which\n *   takes advatnage of the backend's (e.g., TensorFlow's) automatic\n * conversion to tensor. Here we allow `a` to be either a number or a tensor.\n *\n * @param x The base tensor.\n * @param a The exponent, tensor or number. If a number, it is rounded to the\n *   nearest integer and converted to a tensor.\n * @returns A tensor of the same shape as `x`.\n */\nexport function pow(x, a) {\n    return tidy(() => {\n        if (typeof (a) === 'number') {\n            a = scalar(Math.round(a), 'int32');\n        }\n        if (a.dtype !== 'int32') {\n            throw new NotImplementedError(`Non-int32 dtype (${a.dtype}) is not supported by pow() yet`);\n        }\n        return tfc.pow(x, a);\n    });\n}\n/**\n * Reshapes bias tensor according to rank of x.\n */\nfunction reshapeBias(xRank, bias, dataFormat) {\n    const biasShape = bias.shape;\n    if (bias.rank !== 1 && bias.rank !== xRank) {\n        throw new ValueError(`Unexpected bias dimensions: ${bias.rank}` +\n            `; expected it to be 1 or ${xRank}`);\n    }\n    if (xRank === 5) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1, 1, 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[3], biasShape[0], biasShape[1], biasShape[2]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 4) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1, 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[2], biasShape[0], biasShape[1]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank === 3) {\n        if (dataFormat === 'channelsFirst') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, biasShape[0], 1]);\n            }\n            else {\n                return tfc.reshape(bias, [1, biasShape[1], biasShape[0]]);\n            }\n        }\n        else if (dataFormat === 'channelsLast') {\n            if (biasShape.length === 1) {\n                return tfc.reshape(bias, [1, 1, biasShape[0]]);\n            }\n            else {\n                return tfc.reshape(bias, [1].concat(biasShape));\n            }\n        }\n    }\n    else if (xRank < 3) {\n        return bias;\n    }\n    throw new ValueError(`Unsupported input rank by biasAdd: ${bias.rank}`);\n}\n/* Neural-network operations. */\n/**\n * Add a bias to a tensor.\n *\n * @param x The tensor to add the bias to.\n * @param bias The bias to add to `x`. Must be 1D or the same rank as `x`.\n * @return Result of the bias adding.\n * @throws ValueError: If the rank of `bias` is incorrect.\n */\nexport function biasAdd(x, bias, dataFormat) {\n    return tidy(() => {\n        if (dataFormat == null) {\n            dataFormat = imageDataFormat();\n        }\n        checkDataFormat(dataFormat);\n        return tfc.add(x, reshapeBias(x.rank, bias, dataFormat));\n    });\n}\n/**\n * Exponential linear unit (ELU).\n * @param x A tensor or variable to compute the activation function for.\n * @param alpha: A scalar, a scaling factor for the negative section.\n * @return Output of the ELU operation.\n */\nexport function elu(x, alpha = 1) {\n    // TODO(cais): Add support for alpha values other than 1.\n    if (alpha !== 1) {\n        throw new NotImplementedError(`Support for alpha values other than 1 (${alpha}) is not implemented ` +\n            `yet.`);\n    }\n    return tfc.elu(x);\n}\n/**\n * Softsign of a tensor.\n *\n * Defined as x / (abs(x) + 1), element-wise.\n *\n * @param x: Input.\n * @returns Output.\n */\nexport function softsign(x) {\n    return tidy(() => tfc.div(x, tfc.add(tfc.abs(x), 1)));\n}\n/**\n * Sets entries in `x` to zero at random, while scaling the entire tensor.\n *\n * @param x input tensor.\n * @param level fraction of the entries in the tensor that will be set to 0.\n * @param noiseShape shape of randomly generated keep/drop flags, must be\n *   broadcastable to the shape of `x`. Optional.\n * @param seed random seed to ensure determinism. Optional.\n * @returns Result of the dropout operation.\n */\nexport function dropout(x, level, noiseShape, seed) {\n    return tidy(() => tfc.dropout(x, level, noiseShape, seed));\n}\n/**\n * Element-wise, segment-wise linear approximation of sigmoid.\n *\n * Returns `0.` if `x < -2.5`, `1.` if `x > 2.5`.\n * In `-2.5 <= x <= 2.5`, returns `0.2 * x + 0.5`.\n *\n * @param x Input tensor.\n * @returns Output tensor.\n */\nexport function hardSigmoid(x) {\n    return tidy(() => {\n        const y = tfc.add(.5, tfc.mul(.2, x));\n        return tfc.clipByValue(y, 0, 1);\n    });\n}\n/**\n * Invoke `x` in the training phase, and `alt` otherwise.\n *\n * Porting Note: We do not create placeholder tensors for the `training`\n * boolean flag here, because there is no such thing in the TF.js imperative\n * backend.\n *\n * @param x The function to invoke iff `training` is `true`.\n * @param alt The function to invoke iff `training` is `false`.\n * @param training Boolean flag for whether training phase is active.\n * @returns The return value of `x()` if `training` is `true`, or the return\n *   value of `alt()` if `training` is `false`.\n */\nexport function inTrainPhase(x, alt, training = false) {\n    return training ? x() : alt();\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { BaseCallback } from './base_callbacks';\nimport { LayersModel } from './engine/training';\nimport { NotImplementedError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nexport class Callback extends BaseCallback {\n    constructor() {\n        super(...arguments);\n        /** Instance of `keras.models.Model`. Reference of the model being trained. */\n        this.model = null;\n    }\n    setModel(model) {\n        if (!(model instanceof LayersModel)) {\n            throw new Error('model must be a LayersModel, not some other Container');\n        }\n        this.model = model;\n    }\n}\nfunction less(currVal, prevVal) {\n    return currVal < prevVal;\n}\nfunction greater(currVal, prevVal) {\n    return currVal > prevVal;\n}\n/**\n * A Callback that stops training when a monitored quantity has stopped\n * improving.\n */\nexport class EarlyStopping extends Callback {\n    constructor(args) {\n        super();\n        if (args == null) {\n            args = {};\n        }\n        if (args.restoreBestWeights) {\n            throw new NotImplementedError('restoreBestWeights = True is not implemented in EarlyStopping yet.');\n        }\n        this.monitor = args.monitor || 'val_loss';\n        this.minDelta = Math.abs(args.minDelta || 0);\n        this.patience = args.patience || 0;\n        this.verbose = args.verbose || 0;\n        this.mode = args.mode || 'auto';\n        this.baseline = args.baseline;\n        if (['auto', 'min', 'max'].indexOf(this.mode) === -1) {\n            console.warn(`EarlyStopping mode '${this.mode}' is invalid. ` +\n                `Falling back to mode 'auto'.`);\n            this.mode = 'auto';\n        }\n        if (this.mode === 'min') {\n            this.monitorFunc = less;\n        }\n        else if (this.mode === 'max') {\n            this.monitorFunc = greater;\n        }\n        else {\n            // For mode === 'auto'.\n            if (this.monitor.indexOf('acc') !== -1) {\n                this.monitorFunc = greater;\n            }\n            else {\n                this.monitorFunc = less;\n            }\n        }\n        if (this.monitorFunc === less) {\n            this.minDelta *= -1;\n        }\n    }\n    async onTrainBegin(logs) {\n        this.wait = 0;\n        this.stoppedEpoch = 0;\n        if (this.baseline != null) {\n            this.best = this.baseline;\n        }\n        else {\n            this.best = this.monitorFunc === less ? Infinity : -Infinity;\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        await resolveScalarsInLogs(logs);\n        const current = this.getMonitorValue(logs);\n        if (current == null) {\n            return;\n        }\n        if (this.monitorFunc(current - this.minDelta, this.best)) {\n            this.best = current;\n            this.wait = 0;\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n        else {\n            this.wait++;\n            if (this.wait >= this.patience) {\n                this.stoppedEpoch = epoch;\n                this.model.stopTraining = true;\n            }\n            // TODO(cais): Logic for restoreBestWeights.\n        }\n    }\n    async onTrainEnd(logs) {\n        if (this.stoppedEpoch > 0 && this.verbose) {\n            console.log(`Epoch ${this.stoppedEpoch}: early stopping.`);\n        }\n    }\n    getMonitorValue(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        const monitorValue = logs[this.monitor];\n        if (monitorValue == null) {\n            console.warn(`Metric for EarlyStopping ${this.monitor} is not available. ` +\n                `Available metrics are: ${Object.keys(logs)}`);\n        }\n        return monitorValue;\n    }\n}\n/**\n * Factory function for a Callback that stops training when a monitored\n * quantity has stopped improving.\n *\n * Early stopping is a type of regularization, and protects model against\n * overfitting.\n *\n * The following example based on fake data illustrates how this callback\n * can be used during `tf.LayersModel.fit()`:\n *\n * ```js\n * const model = tf.sequential();\n * model.add(tf.layers.dense({\n *   units: 3,\n *   activation: 'softmax',\n *   kernelInitializer: 'ones',\n *   inputShape: [2]\n * }));\n * const xs = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const ys = tf.tensor2d([[1, 0, 0], [0, 1, 0]], [2, 3]);\n * const xsVal = tf.tensor2d([4, 3, 2, 1], [2, 2]);\n * const ysVal = tf.tensor2d([[0, 0, 1], [0, 1, 0]], [2, 3]);\n * model.compile(\n *     {loss: 'categoricalCrossentropy', optimizer: 'sgd', metrics: ['acc']});\n *\n * // Without the EarlyStopping callback, the val_acc value would be:\n * //   0.5, 0.5, 0.5, 0.5, ...\n * // With val_acc being monitored, training should stop after the 2nd epoch.\n * const history = await model.fit(xs, ys, {\n *   epochs: 10,\n *   validationData: [xsVal, ysVal],\n *   callbacks: tf.callbacks.earlyStopping({monitor: 'val_acc'})\n * });\n *\n * // Expect to see a length-2 array.\n * console.log(history.history.val_acc);\n * ```\n *\n * @doc {\n *   heading: 'Callbacks',\n *   namespace: 'callbacks'\n * }\n */\nexport function earlyStopping(args) {\n    return new EarlyStopping(args);\n}\nexport const callbacks = { earlyStopping };\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2023 CodeSmith LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Keeps track of seed and handles pseudorandomness\n * Instance created in BaseRandomLayer class\n * Utilized for random preprocessing layers\n */\nclass RandomSeed {\n    constructor(seed) {\n        this.seed = seed;\n    }\n    next() {\n        if (this.seed === undefined) {\n            return undefined;\n        }\n        return this.seed++;\n    }\n}\nRandomSeed.className = 'RandomSeed';\nexport { RandomSeed };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFuZG9tX3NlZWQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvYmFja2VuZC9yYW5kb21fc2VlZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVIOzs7O0dBSUc7QUFFSCxNQUFhLFVBQVU7SUFHckIsWUFBWSxJQUF3QjtRQUNsQyxJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQztJQUNuQixDQUFDO0lBQ0QsSUFBSTtRQUNGLElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLEVBQUU7WUFDM0IsT0FBTyxTQUFTLENBQUM7U0FDbEI7UUFDRCxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNyQixDQUFDOztBQVZNLG9CQUFTLEdBQUcsWUFBWSxDQUFDO1NBRHJCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMyBDb2RlU21pdGggTExDXG4gKlxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gTUlULXN0eWxlXG4gKiBsaWNlbnNlIHRoYXQgY2FuIGJlIGZvdW5kIGluIHRoZSBMSUNFTlNFIGZpbGUgb3IgYXRcbiAqIGh0dHBzOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlULlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vKipcbiAqIEtlZXBzIHRyYWNrIG9mIHNlZWQgYW5kIGhhbmRsZXMgcHNldWRvcmFuZG9tbmVzc1xuICogSW5zdGFuY2UgY3JlYXRlZCBpbiBCYXNlUmFuZG9tTGF5ZXIgY2xhc3NcbiAqIFV0aWxpemVkIGZvciByYW5kb20gcHJlcHJvY2Vzc2luZyBsYXllcnNcbiAqL1xuXG5leHBvcnQgY2xhc3MgUmFuZG9tU2VlZCB7XG4gIHN0YXRpYyBjbGFzc05hbWUgPSAnUmFuZG9tU2VlZCc7XG4gIHNlZWQ6IG51bWJlciB8IHVuZGVmaW5lZDtcbiAgY29uc3RydWN0b3Ioc2VlZDogbnVtYmVyIHwgdW5kZWZpbmVkKSB7IFxuICAgIHRoaXMuc2VlZCA9IHNlZWQ7IFxuICB9XG4gIG5leHQoKTogbnVtYmVyIHwgdW5kZWZpbmVkIHsgXG4gICAgaWYgKHRoaXMuc2VlZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5zZWVkKys7IFxuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/callbacks.py */\nimport { add, div, keep, mul, nextFrame, tidy, util } from '@tensorflow/tfjs-core';\nimport { ValueError } from './errors';\nimport { resolveScalarsInLogs } from './logs';\nimport * as generic_utils from './utils/generic_utils';\n/** Verbosity logging level when fitting a model. */\nexport var ModelLoggingVerbosity;\n(function (ModelLoggingVerbosity) {\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"SILENT\"] = 0] = \"SILENT\";\n    ModelLoggingVerbosity[ModelLoggingVerbosity[\"VERBOSE\"] = 1] = \"VERBOSE\";\n})(ModelLoggingVerbosity || (ModelLoggingVerbosity = {}));\n/** How often to yield to the main thread when training (in ms). */\nexport const DEFAULT_YIELD_EVERY_MS = 125;\n/**\n * Abstract base class used to build new callbacks.\n *\n * The `logs` dictionary that callback methods take as argument will contain\n * keys for quantities relevant to the current batch or epoch.\n *\n * Currently, the `.fit()` method of the `Sequential` model class\n * will include the following quantities in the `logs` that\n * it passes to its callbacks:\n *\n * onEpochEnd: Logs include `acc` and `loss`, and optionally include `valLoss`\n *   (if validation is enabled in `fit`), and `valAcc` (if validation and\n *   accuracy monitoring are enabled).\n * onBatchBegin: Logs include `size`, the number of samples in the current\n *   batch.\n * onBatchEnd: Logs include `loss`, and optionally `acc` (if accuracy monitoring\n *   is enabled).\n */\nexport class BaseCallback {\n    constructor() {\n        // TODO(michaelterry): This type is a best guess.\n        this.validationData = null;\n    }\n    setParams(params) {\n        this.params = params;\n    }\n    async onEpochBegin(epoch, logs) { }\n    async onEpochEnd(epoch, logs) { }\n    async onBatchBegin(batch, logs) { }\n    async onBatchEnd(batch, logs) { }\n    async onTrainBegin(logs) { }\n    async onTrainEnd(logs) { }\n    // LayersModel needs to call Callback.setModel(), but cannot actually depend\n    // on Callback because that creates a cyclic dependency.  Providing this no-op\n    // method on BaseCallback breaks the cycle: this way LayersModel can depend on\n    // BaseCallback but not on Callback.  The argument is typed as `Container`\n    // (the superclass of LayersModel) to avoid recapitulating the cycle. Callback\n    // overrides this method and enforces that the argument is really a\n    // LayersModel.\n    setModel(model) {\n        // Do nothing. Use Callback instead of BaseCallback to track the model.\n    }\n}\n/**\n * Container abstracting a list of callbacks.\n */\nexport class CallbackList {\n    // TODO(cais): When the need arises, uncomment the following lines and\n    // implement the queue for time values.\n    // private deltaTBatch: number;\n    // private deltaTsBatchBegin: Array<number>;\n    // private deltaTsBatchEnd: Array<number>;\n    /**\n     * Constructor of CallbackList.\n     * @param callbacks Array of `Callback` instances.\n     * @param queueLength Queue length for keeping running statistics over\n     *   callback execution time.\n     */\n    constructor(callbacks, queueLength = 10) {\n        // TODO(cais): Make use of queueLength when implementing the queue for time\n        // values.\n        if (callbacks == null) {\n            callbacks = [];\n        }\n        this.callbacks = callbacks;\n        this.queueLength = queueLength;\n    }\n    append(callback) {\n        this.callbacks.push(callback);\n    }\n    setParams(params) {\n        for (const callback of this.callbacks) {\n            callback.setParams(params);\n        }\n    }\n    setModel(model) {\n        for (const callback of this.callbacks) {\n            callback.setModel(model);\n        }\n    }\n    /**\n     * Called at the start of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onEpochBegin(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onEpochBegin(epoch, logs);\n        }\n    }\n    /**\n     * Called at the end of an epoch.\n     * @param epoch Index of epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onEpochEnd(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onEpochEnd(epoch, logs);\n        }\n    }\n    /**\n     * Called  right before processing a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onBatchBegin(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onBatchBegin(batch, logs);\n        }\n    }\n    /**\n     * Called at the end of a batch.\n     * @param batch Index of batch within the current epoch.\n     * @param logs Dictionary of logs.\n     */\n    async onBatchEnd(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onBatchEnd(batch, logs);\n        }\n    }\n    /**\n     * Called at the beginning of training.\n     * @param logs Dictionary of logs.\n     */\n    async onTrainBegin(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onTrainBegin(logs);\n        }\n    }\n    /**\n     * Called at the end of training.\n     * @param logs Dictionary of logs.\n     */\n    async onTrainEnd(logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        for (const callback of this.callbacks) {\n            await callback.onTrainEnd(logs);\n        }\n    }\n}\n/**\n * Callback that accumulates epoch averages of metrics.\n *\n * This callback is automatically applied to every LayersModel.\n */\nexport class BaseLogger extends BaseCallback {\n    constructor() {\n        super();\n    }\n    async onEpochBegin(epoch) {\n        this.seen = 0;\n        this.totals = {};\n    }\n    async onBatchEnd(batch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        const batchSize = logs['size'] == null ? 0 : logs['size'];\n        this.seen += batchSize;\n        for (const key in logs) {\n            const value = logs[key];\n            if (typeof value === 'number') {\n                if (!this.totals.hasOwnProperty(key)) {\n                    this.totals[key] = 0;\n                }\n                this.totals[key] = this.totals[key] + value * batchSize;\n            }\n            else {\n                let oldTotalsToDispose;\n                if (key in this.totals) {\n                    oldTotalsToDispose = this.totals[key];\n                }\n                else {\n                    this.totals[key] = 0;\n                }\n                const total = tidy(() => add((this.totals[key]), mul(value, batchSize)));\n                this.totals[key] = total;\n                if (oldTotalsToDispose != null) {\n                    oldTotalsToDispose.dispose();\n                }\n            }\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        if (logs != null) {\n            for (const key of this.params['metrics']) {\n                if (this.totals[key] == null) {\n                    continue;\n                }\n                if (typeof this.totals[key] === 'number') {\n                    logs[key] = this.totals[key] / this.seen;\n                }\n                else {\n                    tidy(() => {\n                        const log = mul(div(1, this.seen), this.totals[key]);\n                        logs[key] = log;\n                        this.totals[key].dispose();\n                        keep(logs[key]);\n                    });\n                }\n            }\n        }\n    }\n}\n/**\n * Callback that records events into a `History` object. This callback is\n * automatically applied to every TF.js Layers model. The `History` object\n * gets returned by the `fit` method of models.\n */\nexport class History extends BaseCallback {\n    async onTrainBegin(logs) {\n        this.epoch = [];\n        this.history = {};\n    }\n    async onEpochEnd(epoch, logs) {\n        if (logs == null) {\n            logs = {};\n        }\n        this.epoch.push(epoch);\n        for (const key in logs) {\n            if (this.history[key] == null) {\n                this.history[key] = [];\n            }\n            this.history[key].push(logs[key]);\n        }\n    }\n    /**\n     * Await the values of all losses and metrics.\n     */\n    async syncData() {\n        const promises = [];\n        const keys = [];\n        const indices = [];\n        for (const key in this.history) {\n            const valueArray = this.history[key];\n            for (let i = 0; i < valueArray.length; ++i) {\n                if (typeof valueArray[i] !== 'number') {\n                    const valueScalar = valueArray[i];\n                    promises.push(valueScalar.data());\n                    keys.push(key);\n                    indices.push(i);\n                }\n            }\n        }\n        const values = await Promise.all(promises);\n        for (let n = 0; n < values.length; ++n) {\n            const tensorToDispose = this.history[keys[n]][indices[n]];\n            tensorToDispose.dispose();\n            this.history[keys[n]][indices[n]] = values[n][0];\n        }\n    }\n}\n/**\n * Custom callback for training.\n */\nexport class CustomCallback extends BaseCallback {\n    constructor(args, yieldEvery) {\n        super();\n        this.currentEpoch = 0;\n        this.nowFunc = args.nowFunc;\n        this.nextFrameFunc = args.nextFrameFunc || nextFrame;\n        this.yieldEvery = yieldEvery || 'auto';\n        if (this.yieldEvery === 'auto') {\n            this.yieldEvery = DEFAULT_YIELD_EVERY_MS;\n        }\n        if (this.yieldEvery === 'never' && args.onYield != null) {\n            throw new Error('yieldEvery is `never` but you provided an `onYield` callback. ' +\n                'Either change `yieldEvery` or remove the callback');\n        }\n        if (util.isNumber(this.yieldEvery)) {\n            // Decorate `maybeWait` so it will be called at most once every\n            // `yieldEvery` ms.\n            this.maybeWait = generic_utils.debounce(this.maybeWait.bind(this), this.yieldEvery, this.nowFunc);\n        }\n        this.trainBegin = args.onTrainBegin;\n        this.trainEnd = args.onTrainEnd;\n        this.epochBegin = args.onEpochBegin;\n        this.epochEnd = args.onEpochEnd;\n        this.batchBegin = args.onBatchBegin;\n        this.batchEnd = args.onBatchEnd;\n        this.yield = args.onYield;\n    }\n    async maybeWait(epoch, batch, logs) {\n        const ps = [];\n        if (this.yield != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.yield(epoch, batch, logs));\n        }\n        ps.push(this.nextFrameFunc());\n        await Promise.all(ps);\n    }\n    async onEpochBegin(epoch, logs) {\n        this.currentEpoch = epoch;\n        if (this.epochBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.epochBegin(epoch, logs);\n        }\n    }\n    async onEpochEnd(epoch, logs) {\n        const ps = [];\n        if (this.epochEnd != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.epochEnd(epoch, logs));\n        }\n        if (this.yieldEvery === 'epoch') {\n            ps.push(this.nextFrameFunc());\n        }\n        await Promise.all(ps);\n    }\n    async onBatchBegin(batch, logs) {\n        if (this.batchBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.batchBegin(batch, logs);\n        }\n    }\n    async onBatchEnd(batch, logs) {\n        const ps = [];\n        if (this.batchEnd != null) {\n            await resolveScalarsInLogs(logs);\n            ps.push(this.batchEnd(batch, logs));\n        }\n        if (this.yieldEvery === 'batch') {\n            ps.push(this.nextFrameFunc());\n        }\n        else if (util.isNumber(this.yieldEvery)) {\n            ps.push(this.maybeWait(this.currentEpoch, batch, logs));\n        }\n        await Promise.all(ps);\n    }\n    async onTrainBegin(logs) {\n        if (this.trainBegin != null) {\n            await resolveScalarsInLogs(logs);\n            await this.trainBegin(logs);\n        }\n    }\n    async onTrainEnd(logs) {\n        if (this.trainEnd != null) {\n            await resolveScalarsInLogs(logs);\n            await this.trainEnd(logs);\n        }\n    }\n}\n/**\n * Standardize callbacks or configurations of them to an Array of callbacks.\n */\nexport function standardizeCallbacks(callbacks, yieldEvery) {\n    if (callbacks == null) {\n        callbacks = {};\n    }\n    if (callbacks instanceof BaseCallback) {\n        return [callbacks];\n    }\n    if (Array.isArray(callbacks) && callbacks[0] instanceof BaseCallback) {\n        return callbacks;\n    }\n    // Convert custom callback configs to custom callback objects.\n    const callbackConfigs = generic_utils.toList(callbacks);\n    return callbackConfigs.map(callbackConfig => new CustomCallback(callbackConfig, yieldEvery));\n}\n/**\n * A global registry for callback constructors to be used during\n * LayersModel.fit().\n */\nclass CallbackConstructorRegistry {\n    /**\n     * Blocks public access to constructor.\n     */\n    constructor() { }\n    /**\n     * Register a tf.LayersModel.fit() callback constructor.\n     *\n     * The registered callback constructor will be used to instantiate\n     * callbacks for every tf.LayersModel.fit() call afterwards.\n     *\n     * @param verbosityLevel Level of verbosity at which the `callbackConstructor`\n     *   is to be reigstered.\n     * @param callbackConstructor A no-arg constructor for `tf.Callback`.\n     * @throws Error, if the same callbackConstructor has been registered before,\n     *   either at the same or a different `verbosityLevel`.\n     */\n    static registerCallbackConstructor(verbosityLevel, callbackConstructor) {\n        util.assert(verbosityLevel >= 0 && Number.isInteger(verbosityLevel), () => `Verbosity level is expected to be an integer >= 0, ` +\n            `but got ${verbosityLevel}`);\n        CallbackConstructorRegistry.checkForDuplicate(callbackConstructor);\n        if (CallbackConstructorRegistry.constructors[verbosityLevel] == null) {\n            CallbackConstructorRegistry.constructors[verbosityLevel] = [];\n        }\n        CallbackConstructorRegistry.constructors[verbosityLevel].push(callbackConstructor);\n    }\n    static checkForDuplicate(callbackConstructor) {\n        for (const levelName in CallbackConstructorRegistry.constructors) {\n            const constructors = CallbackConstructorRegistry.constructors[+levelName];\n            constructors.forEach(ctor => {\n                if (ctor === callbackConstructor) {\n                    throw new ValueError('Duplicate callback constructor.');\n                }\n            });\n        }\n    }\n    /**\n     * Clear all registered callback constructors.\n     */\n    static clear() {\n        CallbackConstructorRegistry.constructors = {};\n    }\n    /**\n     * Create callbacks using the registered callback constructors.\n     *\n     * Given `verbosityLevel`, all constructors registered at that level or above\n     * will be called and the instantiated callbacks will be used.\n     *\n     * @param verbosityLevel: Level of verbosity.\n     */\n    static createCallbacks(verbosityLevel) {\n        const constructors = [];\n        for (const levelName in CallbackConstructorRegistry.constructors) {\n            const level = +levelName;\n            if (verbosityLevel >= level) {\n                constructors.push(...CallbackConstructorRegistry.constructors[level]);\n            }\n        }\n        return constructors.map(ctor => new ctor());\n    }\n}\nCallbackConstructorRegistry.constructors = {};\nexport { CallbackConstructorRegistry };\nexport function configureCallbacks(callbacks, verbose, epochs, initialEpoch, numTrainSamples, stepsPerEpoch, batchSize, doValidation, callbackMetrics) {\n    const history = new History();\n    const actualCallbacks = [\n        new BaseLogger(), ...CallbackConstructorRegistry.createCallbacks(verbose)\n    ];\n    if (callbacks != null) {\n        actualCallbacks.push(...callbacks);\n    }\n    actualCallbacks.push(history);\n    const callbackList = new CallbackList(actualCallbacks);\n    // TODO(cais): Figure out when this LayersModel instance can have a\n    // dynamically\n    //   set property called 'callback_model' as in PyKeras.\n    callbackList.setParams({\n        epochs,\n        initialEpoch,\n        samples: numTrainSamples,\n        steps: stepsPerEpoch,\n        batchSize,\n        verbose,\n        doValidation,\n        metrics: callbackMetrics,\n    });\n    return { callbackList, history };\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original source: keras/contraints.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport { deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\n/**\n * Helper function used by many of the Constraints to find the L2Norms.\n */\nfunction calcL2Norms(w, axis) {\n    return tidy(() => tfc.sqrt(tfc.sum(tfc.mul(w, w), axis, true)));\n}\n/**\n * Base class for functions that impose constraints on weight values\n *\n * @doc {\n *   heading: 'Constraints',\n *   subheading: 'Classes',\n *   namespace: 'constraints'\n * }\n */\nexport class Constraint extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\nclass MaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMaxValue = 2;\n        this.defaultAxis = 0;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.clipByValue(norms, 0, this.maxValue);\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return { maxValue: this.maxValue, axis: this.axis };\n    }\n}\n/** @nocollapse */\nMaxNorm.className = 'MaxNorm';\nexport { MaxNorm };\nserialization.registerClass(MaxNorm);\nclass UnitNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultAxis = 0;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => tfc.div(w, tfc.add(epsilon(), calcL2Norms(w, this.axis))));\n    }\n    getConfig() {\n        return { axis: this.axis };\n    }\n}\n/** @nocollapse */\nUnitNorm.className = 'UnitNorm';\nexport { UnitNorm };\nserialization.registerClass(UnitNorm);\nclass NonNeg extends Constraint {\n    apply(w) {\n        return tfc.relu(w);\n    }\n}\n/** @nocollapse */\nNonNeg.className = 'NonNeg';\nexport { NonNeg };\nserialization.registerClass(NonNeg);\nclass MinMaxNorm extends Constraint {\n    constructor(args) {\n        super();\n        this.defaultMinValue = 0.0;\n        this.defaultMaxValue = 1.0;\n        this.defaultRate = 1.0;\n        this.defaultAxis = 0;\n        this.minValue =\n            args.minValue != null ? args.minValue : this.defaultMinValue;\n        this.maxValue =\n            args.maxValue != null ? args.maxValue : this.defaultMaxValue;\n        this.rate = args.rate != null ? args.rate : this.defaultRate;\n        this.axis = args.axis != null ? args.axis : this.defaultAxis;\n    }\n    apply(w) {\n        return tidy(() => {\n            const norms = calcL2Norms(w, this.axis);\n            const desired = tfc.add(tfc.mul(this.rate, tfc.clipByValue(norms, this.minValue, this.maxValue)), tfc.mul(1.0 - this.rate, norms));\n            return tfc.mul(w, tfc.div(desired, tfc.add(epsilon(), norms)));\n        });\n    }\n    getConfig() {\n        return {\n            minValue: this.minValue,\n            maxValue: this.maxValue,\n            rate: this.rate,\n            axis: this.axis\n        };\n    }\n}\n/** @nocollapse */\nMinMaxNorm.className = 'MinMaxNorm';\nexport { MinMaxNorm };\nserialization.registerClass(MinMaxNorm);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'maxNorm': 'MaxNorm',\n    'minMaxNorm': 'MinMaxNorm',\n    'nonNeg': 'NonNeg',\n    'unitNorm': 'UnitNorm'\n};\nexport function serializeConstraint(constraint) {\n    return serializeKerasObject(constraint);\n}\nexport function deserializeConstraint(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'constraint');\n}\nexport function getConstraint(identifier) {\n    if (identifier == null) {\n        return null;\n    }\n    if (typeof identifier === 'string') {\n        const className = identifier in CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        const config = { className, config: {} };\n        return deserializeConstraint(config);\n    }\n    else if (identifier instanceof Constraint) {\n        return identifier;\n    }\n    else {\n        return deserializeConstraint(identifier);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Utilities related to persistent state in the backend.\n */\n/**\n * An ID to track `tf.SymbolicTensor`s and derived classes.\n * Required in different places in engine/topology.ts to identify unique\n * tensors.\n */\nlet _nextUniqueTensorId = 0;\nexport function getNextUniqueTensorId() {\n    return _nextUniqueTensorId++;\n}\nconst _uidPrefixes = {};\n/**\n * Provides a unique UID given a string prefix.\n *\n * @param prefix\n */\nexport function getUid(prefix = '') {\n    if (!(prefix in _uidPrefixes)) {\n        _uidPrefixes[prefix] = 0;\n    }\n    _uidPrefixes[prefix] += 1;\n    return prefix + _uidPrefixes[prefix].toString();\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RhdGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi90ZmpzLWxheWVycy9zcmMvYmFja2VuZC9zdGF0ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7R0FRRztBQUVIOztHQUVHO0FBRUg7Ozs7R0FJRztBQUNILElBQUksbUJBQW1CLEdBQUcsQ0FBQyxDQUFDO0FBRTVCLE1BQU0sVUFBVSxxQkFBcUI7SUFDbkMsT0FBTyxtQkFBbUIsRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFFRCxNQUFNLFlBQVksR0FBK0IsRUFBRSxDQUFDO0FBRXBEOzs7O0dBSUc7QUFDSCxNQUFNLFVBQVUsTUFBTSxDQUFDLE1BQU0sR0FBRyxFQUFFO0lBQ2hDLElBQUksQ0FBQyxDQUFDLE1BQU0sSUFBSSxZQUFZLENBQUMsRUFBRTtRQUM3QixZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQzFCO0lBQ0QsWUFBWSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMxQixPQUFPLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDbEQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbi8qKlxuICogVXRpbGl0aWVzIHJlbGF0ZWQgdG8gcGVyc2lzdGVudCBzdGF0ZSBpbiB0aGUgYmFja2VuZC5cbiAqL1xuXG4vKipcbiAqIEFuIElEIHRvIHRyYWNrIGB0Zi5TeW1ib2xpY1RlbnNvcmBzIGFuZCBkZXJpdmVkIGNsYXNzZXMuXG4gKiBSZXF1aXJlZCBpbiBkaWZmZXJlbnQgcGxhY2VzIGluIGVuZ2luZS90b3BvbG9neS50cyB0byBpZGVudGlmeSB1bmlxdWVcbiAqIHRlbnNvcnMuXG4gKi9cbmxldCBfbmV4dFVuaXF1ZVRlbnNvcklkID0gMDtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldE5leHRVbmlxdWVUZW5zb3JJZCgpOiBudW1iZXIge1xuICByZXR1cm4gX25leHRVbmlxdWVUZW5zb3JJZCsrO1xufVxuXG5jb25zdCBfdWlkUHJlZml4ZXM6IHtbcHJlZml4OiBzdHJpbmddOiBudW1iZXJ9ID0ge307XG5cbi8qKlxuICogUHJvdmlkZXMgYSB1bmlxdWUgVUlEIGdpdmVuIGEgc3RyaW5nIHByZWZpeC5cbiAqXG4gKiBAcGFyYW0gcHJlZml4XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVaWQocHJlZml4ID0gJycpOiBzdHJpbmcge1xuICBpZiAoIShwcmVmaXggaW4gX3VpZFByZWZpeGVzKSkge1xuICAgIF91aWRQcmVmaXhlc1twcmVmaXhdID0gMDtcbiAgfVxuICBfdWlkUHJlZml4ZXNbcHJlZml4XSArPSAxO1xuICByZXR1cm4gcHJlZml4ICsgX3VpZFByZWZpeGVzW3ByZWZpeF0udG9TdHJpbmcoKTtcbn1cbiJdfQ=="],"names":["_epsilon","epsilon","backend","imageDataFormat","nameMap","Map","checkDataFormat","value","checkInterpolationFormat","checkPaddingMode","checkPoolMode","_nameScopeStack","_nameScopeDivider","nameScope","name","fn","push","val","pop","e","getScopedTensorName","tensorName","isValidTensorName","Error","length","join","getUniqueTensorName","scopedName","has","set","index","get","result","tensorNameRegex","RegExp","match","cast","x","dtype","expandDims","axis","outShape","shape","slice","splice","repeat","n","tidy","tile","flatten","newShape","batchFlatten","rank","sliceAlongFirstAxis","array","start","size","sliceAlongLastAxis","sliceAlongAxis","concatenate","tensors","concatAlongFirstAxis","a","b","Array","isArray","randomNormal","mean","stddev","seed","dot","activation","bias","transposeA","transposeB","reshapeBias","aFirstDims","aLastDim","bShape","bLastDim","ySecondLastDim","yOtherDims","perm","from","_","i","outputShape","gather","reference","indices","tensor1d","square","xRank","dataFormat","biasShape","concat","biasAdd","elu","alpha","softsign","dropout","level","noiseShape","hardSigmoid","y","inTrainPhase","alt","training","RandomSeed","constructor","this","next","undefined","className","ModelLoggingVerbosity","BaseCallback","validationData","setParams","params","onEpochBegin","epoch","logs","onEpochEnd","onBatchBegin","batch","onBatchEnd","onTrainBegin","onTrainEnd","setModel","model","CallbackList","callbacks","queueLength","append","callback","BaseLogger","super","seen","totals","batchSize","key","hasOwnProperty","oldTotalsToDispose","total","add","mul","dispose","log","div","keep","History","history","syncData","promises","keys","valueArray","valueScalar","data","values","Promise","all","CustomCallback","args","yieldEvery","currentEpoch","nowFunc","nextFrameFunc","nextFrame","onYield","util","maybeWait","bind","trainBegin","trainEnd","epochBegin","epochEnd","batchBegin","batchEnd","yield","ps","standardizeCallbacks","map","callbackConfig","CallbackConstructorRegistry","registerCallbackConstructor","verbosityLevel","callbackConstructor","Number","isInteger","checkForDuplicate","constructors","levelName","forEach","ctor","clear","createCallbacks","configureCallbacks","verbose","epochs","initialEpoch","numTrainSamples","stepsPerEpoch","doValidation","callbackMetrics","actualCallbacks","callbackList","samples","steps","metrics","calcL2Norms","w","Constraint","serialization","getConfig","MaxNorm","defaultMaxValue","defaultAxis","maxValue","apply","norms","desired","UnitNorm","NonNeg","MinMaxNorm","defaultMinValue","defaultRate","minValue","rate","CONSTRAINT_IDENTIFIER_REGISTRY_SYMBOL_MAP","serializeConstraint","constraint","deserializeConstraint","config","customObjects","getMap","classNameMap","getConstraint","identifier","_nextUniqueTensorId","getNextUniqueTensorId","_uidPrefixes","getUid","prefix","toString"],"sourceRoot":""}