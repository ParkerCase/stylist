{"version":3,"file":"stylist-vendors-3d6101e0.cc724cc4eaed8f55cf63.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/initializers.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { eye, linalg, mul, ones, randomUniform, scalar, serialization, tidy, truncatedNormal, zeros } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { checkDataFormat } from './common';\nimport { NotImplementedError, ValueError } from './errors';\nimport { VALID_DISTRIBUTION_VALUES, VALID_FAN_MODE_VALUES } from './keras_format/initializer_config';\nimport { checkStringTypeUnionValue, deserializeKerasObject, serializeKerasObject } from './utils/generic_utils';\nimport { arrayProd } from './utils/math_utils';\nexport function checkFanMode(value) {\n    checkStringTypeUnionValue(VALID_FAN_MODE_VALUES, 'FanMode', value);\n}\nexport function checkDistribution(value) {\n    checkStringTypeUnionValue(VALID_DISTRIBUTION_VALUES, 'Distribution', value);\n}\n/**\n * Initializer base class.\n *\n * @doc {\n *   heading: 'Initializers', subheading: 'Classes', namespace: 'initializers'}\n */\nexport class Initializer extends serialization.Serializable {\n    fromConfigUsesCustomObjects() {\n        return false;\n    }\n    getConfig() {\n        return {};\n    }\n}\nexport class Zeros extends Initializer {\n    apply(shape, dtype) {\n        return zeros(shape, dtype);\n    }\n}\n/** @nocollapse */\nZeros.className = 'Zeros';\nserialization.registerClass(Zeros);\nexport class Ones extends Initializer {\n    apply(shape, dtype) {\n        return ones(shape, dtype);\n    }\n}\n/** @nocollapse */\nOnes.className = 'Ones';\nserialization.registerClass(Ones);\nexport class Constant extends Initializer {\n    constructor(args) {\n        super();\n        if (typeof args !== 'object') {\n            throw new ValueError(`Expected argument of type ConstantConfig but got ${args}`);\n        }\n        if (args.value === undefined) {\n            throw new ValueError(`config must have value set but got ${args}`);\n        }\n        this.value = args.value;\n    }\n    apply(shape, dtype) {\n        return tidy(() => mul(scalar(this.value), ones(shape, dtype)));\n    }\n    getConfig() {\n        return {\n            value: this.value,\n        };\n    }\n}\n/** @nocollapse */\nConstant.className = 'Constant';\nserialization.registerClass(Constant);\nexport class RandomUniform extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MINVAL = -0.05;\n        this.DEFAULT_MAXVAL = 0.05;\n        this.minval = args.minval || this.DEFAULT_MINVAL;\n        this.maxval = args.maxval || this.DEFAULT_MAXVAL;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        return randomUniform(shape, this.minval, this.maxval, dtype);\n    }\n    getConfig() {\n        return { minval: this.minval, maxval: this.maxval, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomUniform.className = 'RandomUniform';\nserialization.registerClass(RandomUniform);\nexport class RandomNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`randomNormal does not support dType ${dtype}.`);\n        }\n        return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nRandomNormal.className = 'RandomNormal';\nserialization.registerClass(RandomNormal);\nexport class TruncatedNormal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_MEAN = 0.;\n        this.DEFAULT_STDDEV = 0.05;\n        this.mean = args.mean || this.DEFAULT_MEAN;\n        this.stddev = args.stddev || this.DEFAULT_STDDEV;\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        dtype = dtype || 'float32';\n        if (dtype !== 'float32' && dtype !== 'int32') {\n            throw new NotImplementedError(`truncatedNormal does not support dType ${dtype}.`);\n        }\n        return truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n    }\n    getConfig() {\n        return { mean: this.mean, stddev: this.stddev, seed: this.seed };\n    }\n}\n/** @nocollapse */\nTruncatedNormal.className = 'TruncatedNormal';\nserialization.registerClass(TruncatedNormal);\nexport class Identity extends Initializer {\n    constructor(args) {\n        super();\n        this.gain = args.gain != null ? args.gain : 1.0;\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length !== 2 || shape[0] !== shape[1]) {\n                throw new ValueError('Identity matrix initializer can only be used for' +\n                    ' 2D square matrices.');\n            }\n            else {\n                return mul(this.gain, eye(shape[0]));\n            }\n        });\n    }\n    getConfig() {\n        return { gain: this.gain };\n    }\n}\n/** @nocollapse */\nIdentity.className = 'Identity';\nserialization.registerClass(Identity);\n/**\n * Computes the number of input and output units for a weight shape.\n * @param shape Shape of weight.\n * @param dataFormat data format to use for convolution kernels.\n *   Note that all kernels in Keras are standardized on the\n *   CHANNEL_LAST ordering (even when inputs are set to CHANNEL_FIRST).\n * @return An length-2 array: fanIn, fanOut.\n */\nfunction computeFans(shape, dataFormat = 'channelsLast') {\n    let fanIn;\n    let fanOut;\n    checkDataFormat(dataFormat);\n    if (shape.length === 2) {\n        fanIn = shape[0];\n        fanOut = shape[1];\n    }\n    else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n        if (dataFormat === 'channelsFirst') {\n            const receptiveFieldSize = arrayProd(shape, 2);\n            fanIn = shape[1] * receptiveFieldSize;\n            fanOut = shape[0] * receptiveFieldSize;\n        }\n        else if (dataFormat === 'channelsLast') {\n            const receptiveFieldSize = arrayProd(shape, 0, shape.length - 2);\n            fanIn = shape[shape.length - 2] * receptiveFieldSize;\n            fanOut = shape[shape.length - 1] * receptiveFieldSize;\n        }\n    }\n    else {\n        const shapeProd = arrayProd(shape);\n        fanIn = Math.sqrt(shapeProd);\n        fanOut = Math.sqrt(shapeProd);\n    }\n    return [fanIn, fanOut];\n}\nexport class VarianceScaling extends Initializer {\n    /**\n     * Constructor of VarianceScaling.\n     * @throws ValueError for invalid value in scale.\n     */\n    constructor(args) {\n        super();\n        if (args.scale < 0.0) {\n            throw new ValueError(`scale must be a positive float. Got: ${args.scale}`);\n        }\n        this.scale = args.scale == null ? 1.0 : args.scale;\n        this.mode = args.mode == null ? 'fanIn' : args.mode;\n        checkFanMode(this.mode);\n        this.distribution =\n            args.distribution == null ? 'normal' : args.distribution;\n        checkDistribution(this.distribution);\n        this.seed = args.seed;\n    }\n    apply(shape, dtype) {\n        const fans = computeFans(shape);\n        const fanIn = fans[0];\n        const fanOut = fans[1];\n        let scale = this.scale;\n        if (this.mode === 'fanIn') {\n            scale /= Math.max(1, fanIn);\n        }\n        else if (this.mode === 'fanOut') {\n            scale /= Math.max(1, fanOut);\n        }\n        else {\n            scale /= Math.max(1, (fanIn + fanOut) / 2);\n        }\n        if (this.distribution === 'normal') {\n            const stddev = Math.sqrt(scale);\n            dtype = dtype || 'float32';\n            if (dtype !== 'float32' && dtype !== 'int32') {\n                throw new NotImplementedError(`${this.getClassName()} does not support dType ${dtype}.`);\n            }\n            return truncatedNormal(shape, 0, stddev, dtype, this.seed);\n        }\n        else {\n            const limit = Math.sqrt(3 * scale);\n            return randomUniform(shape, -limit, limit, dtype);\n        }\n    }\n    getConfig() {\n        return {\n            scale: this.scale,\n            mode: this.mode,\n            distribution: this.distribution,\n            seed: this.seed\n        };\n    }\n}\n/** @nocollapse */\nVarianceScaling.className = 'VarianceScaling';\nserialization.registerClass(VarianceScaling);\nexport class GlorotUniform extends VarianceScaling {\n    /**\n     * Constructor of GlorotUniform\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotUniform.className = 'GlorotUniform';\nserialization.registerClass(GlorotUniform);\nexport class GlorotNormal extends VarianceScaling {\n    /**\n     * Constructor of GlorotNormal.\n     * @param scale\n     * @param mode\n     * @param distribution\n     * @param seed\n     */\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanAvg',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, GlorotNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nGlorotNormal.className = 'GlorotNormal';\nserialization.registerClass(GlorotNormal);\nexport class HeNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeNormal.className = 'HeNormal';\nserialization.registerClass(HeNormal);\nexport class HeUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 2.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, HeUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nHeUniform.className = 'HeUniform';\nserialization.registerClass(HeUniform);\nexport class LeCunNormal extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'normal',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunNormal is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunNormal.className = 'LeCunNormal';\nserialization.registerClass(LeCunNormal);\nexport class LeCunUniform extends VarianceScaling {\n    constructor(args) {\n        super({\n            scale: 1.0,\n            mode: 'fanIn',\n            distribution: 'uniform',\n            seed: args == null ? null : args.seed\n        });\n    }\n    getClassName() {\n        // In Python Keras, LeCunUniform is not a class, but a helper method\n        // that creates a VarianceScaling object. Use 'VarianceScaling' as\n        // class name to be compatible with that.\n        return VarianceScaling.className;\n    }\n}\n/** @nocollapse */\nLeCunUniform.className = 'LeCunNormal';\nserialization.registerClass(LeCunUniform);\nexport class Orthogonal extends Initializer {\n    constructor(args) {\n        super();\n        this.DEFAULT_GAIN = 1;\n        this.gain = args.gain == null ? this.DEFAULT_GAIN : args.gain;\n        this.seed = args.seed;\n        if (this.seed != null) {\n            throw new NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n        }\n    }\n    apply(shape, dtype) {\n        return tidy(() => {\n            if (shape.length < 2) {\n                throw new NotImplementedError('Shape must be at least 2D.');\n            }\n            if (shape[0] * shape[1] > 2000) {\n                console.warn(`Orthogonal initializer is being called on a matrix with more ` +\n                    `than 2000 (${shape[0] * shape[1]}) elements: ` +\n                    `Slowness may result.`);\n            }\n            // TODO(cais): Add seed support.\n            const normalizedShape = shape[0] > shape[1] ? [shape[1], shape[0]] : shape;\n            const a = K.randomNormal(normalizedShape, 0, 1, 'float32');\n            let q = linalg.gramSchmidt(a);\n            if (shape[0] > shape[1]) {\n                q = q.transpose();\n            }\n            return mul(this.gain, q);\n        });\n    }\n    getConfig() {\n        return {\n            gain: this.gain,\n            seed: this.seed,\n        };\n    }\n}\n/** @nocollapse */\nOrthogonal.className = 'Orthogonal';\nserialization.registerClass(Orthogonal);\n// Maps the JavaScript-like identifier keys to the corresponding registry\n// symbols.\nexport const INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n    'constant': 'Constant',\n    'glorotNormal': 'GlorotNormal',\n    'glorotUniform': 'GlorotUniform',\n    'heNormal': 'HeNormal',\n    'heUniform': 'HeUniform',\n    'identity': 'Identity',\n    'leCunNormal': 'LeCunNormal',\n    'leCunUniform': 'LeCunUniform',\n    'ones': 'Ones',\n    'orthogonal': 'Orthogonal',\n    'randomNormal': 'RandomNormal',\n    'randomUniform': 'RandomUniform',\n    'truncatedNormal': 'TruncatedNormal',\n    'varianceScaling': 'VarianceScaling',\n    'zeros': 'Zeros'\n};\nfunction deserializeInitializer(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'initializer');\n}\nexport function serializeInitializer(initializer) {\n    return serializeKerasObject(initializer);\n}\nexport function getInitializer(identifier) {\n    if (typeof identifier === 'string') {\n        const className = identifier in INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ?\n            INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] :\n            identifier;\n        /* We have four 'helper' classes for common initializers that\n        all get serialized as 'VarianceScaling' and shouldn't go through\n        the deserializeInitializer pathway. */\n        if (className === 'GlorotNormal') {\n            return new GlorotNormal();\n        }\n        else if (className === 'GlorotUniform') {\n            return new GlorotUniform();\n        }\n        else if (className === 'HeNormal') {\n            return new HeNormal();\n        }\n        else if (className === 'HeUniform') {\n            return new HeUniform();\n        }\n        else if (className === 'LeCunNormal') {\n            return new LeCunNormal();\n        }\n        else if (className === 'LeCunUniform') {\n            return new LeCunUniform();\n        }\n        else {\n            const config = {};\n            config['className'] = className;\n            config['config'] = {};\n            return deserializeInitializer(config);\n        }\n    }\n    else if (identifier instanceof Initializer) {\n        return identifier;\n    }\n    else {\n        return deserializeInitializer(identifier);\n    }\n}\n//# sourceMappingURL=initializers.js.map"],"names":["Initializer","serialization","fromConfigUsesCustomObjects","getConfig","Zeros","apply","shape","dtype","zeros","className","Ones","ones","Constant","constructor","args","super","undefined","value","this","tidy","mul","scalar","RandomUniform","DEFAULT_MINVAL","DEFAULT_MAXVAL","minval","maxval","seed","randomUniform","RandomNormal","DEFAULT_MEAN","DEFAULT_STDDEV","mean","stddev","TruncatedNormal","truncatedNormal","Identity","gain","length","eye","VarianceScaling","scale","mode","distribution","checkDistribution","fans","dataFormat","fanIn","fanOut","indexOf","receptiveFieldSize","shapeProd","Math","sqrt","computeFans","max","getClassName","limit","GlorotUniform","GlorotNormal","HeNormal","HeUniform","LeCunNormal","LeCunUniform","Orthogonal","DEFAULT_GAIN","normalizedShape","a","q","linalg","gramSchmidt","transpose","INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP","deserializeInitializer","config","customObjects","getMap","classNameMap","serializeInitializer","initializer","getInitializer","identifier"],"sourceRoot":""}