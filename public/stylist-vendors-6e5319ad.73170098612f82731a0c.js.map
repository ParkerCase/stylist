{"version":3,"file":"stylist-vendors-6e5319ad.73170098612f82731a0c.js","mappings":"2NAuBA,MAAMA,UAAkB,KACpB,WAAAC,CAAYC,GAIR,GAHAC,MAAMD,GACNE,KAAKC,WAAa,KAClBD,KAAKE,+BAAiC,gBACV,MAAxBJ,EAAKK,iBAA8C,MAAnBL,EAAKM,WAAoB,CAKzD,IAAIC,EAAY,KACM,MAAlBP,EAAKO,YACLA,EAAYP,EAAKO,WAEG,MAApBP,EAAKQ,YAGLN,KAAKG,gBAAkB,CAACE,EAAW,MAKnCL,KAAKG,gBACD,CAACE,GAAWE,OAAO,KAAqBT,EAAKQ,aAEzD,CACAN,KAAKQ,SAAWV,EAAKU,SACrB,KAAoCR,KAAKQ,SAAU,YACnDR,KAAKS,UAAYX,EAAKW,UACtB,KAAoCT,KAAKS,UAAW,aACpDT,KAAKU,uBAAwB,QAAeZ,EAAKY,uBAAyBV,KAAKE,gCAC/EF,KAAKW,uBAAwB,QAAeb,EAAKa,uBACjDX,KAAKY,qBAAsB,QAAed,EAAKc,qBAC/CZ,KAAKa,sBAAuB,QAAcf,EAAKe,sBAC/Cb,KAAKc,SAAWhB,EAAKgB,SACrBd,KAAKe,gBAAkBjB,EAAKgB,SAC5Bd,KAAKM,YAAcR,EAAKQ,WAC5B,CACA,KAAAU,CAAMZ,GACFJ,KAAKC,WAAaD,KAAKiB,UAAU,aAAc,CAACjB,KAAKQ,SAAUR,KAAKS,WAAYT,KAAKkB,MAAOlB,KAAKU,sBAAuBV,KAAKW,uBAAuB,EAAMX,KAAKa,sBAC/Jb,KAAKmB,OAAQ,CACjB,CAGA,4BAAAC,CAA6BhB,GAAc,CAC3C,WAAAiB,CAAYC,EAAQC,GAChB,OAAO,IAAAC,OAAK,IACHxB,KAAKc,UAINQ,GAAS,QAAoBA,IACtB,IAAAG,UAASH,GAAQ,IAAAI,WAAUJ,KAJ3B,MAOnB,CACA,kBAAAK,CAAmBvB,GAEf,GADAA,GAAa,QAAmBA,GACR,MAApBJ,KAAKM,YACL,MAAO,IAAIF,EAAYJ,KAAKS,WAGhC,MAAMmB,EAAS,KAAqB5B,KAAKM,aACzC,GAAIsB,EAAOC,SAAWzB,EAAWyB,OAAS,EACtC,MAAM,IAAI,KAAW,oBAAoB7B,KAAKM,mDACjBF,KAE5B,CACD,IAAI0B,EAAI,EACR,IAAK,IAAIC,EAAI,EAAGA,EAAIH,EAAOC,SAAUE,EAAG,CACpC,MAAMC,EAAKJ,EAAOG,GACZE,EAAK7B,EAAW2B,EAAI,GAC1B,GAAW,MAANC,GAAsB,MAANC,GAAgBD,IAAOC,EACxC,MAAM,IAAI,KAAW,oBAAoBjC,KAAKM,mDACjBF,KAElB,MAAN4B,IACLJ,EAAOE,GAAKG,GAEhBH,GACJ,CACJ,CACA,MAAO,CAAC1B,EAAW,MAAOwB,EAAQ5B,KAAKS,UAC3C,CACA,IAAAyB,CAAKZ,EAAQa,GACT,OAAO,IAAAX,OAAK,KACRxB,KAAKoC,eAAed,EAAQa,GAE5B,IAAIE,GAAQ,QAAoBf,GACZ,UAAhBe,EAAMnB,QACNmB,EAAQ,KAAOA,EAAO,UAE1B,MAAMC,EAAS,KAAStC,KAAKC,WAAWsC,QAAQ,IAAAC,SAAQH,EAAO,CAACA,EAAMI,QACtE,OAAO,IAAAD,SAAQF,GAAQ,QAAmBtC,KAAK2B,mBAAmBU,EAAMK,QAAQ,GAExF,CACA,SAAAC,GACI,MAAMC,EAAS,CACXpC,SAAUR,KAAKQ,SACfC,UAAWT,KAAKS,UAChBC,uBAAuB,QAAqBV,KAAKU,uBACjDC,uBAAuB,QAAqBX,KAAKW,uBACjDC,qBAAqB,QAAqBZ,KAAKY,qBAC/CC,sBAAsB,QAAoBb,KAAKa,sBAC/CC,SAAUd,KAAKc,SACfR,YAAaN,KAAKM,aAEhBuC,EAAa9C,MAAM4C,YAEzB,OADAG,OAAOC,OAAOH,EAAQC,GACfD,CACX,EAGJhD,EAAUoD,UAAY,YAEtB,EAAAC,cAAA,cAA4BrD,E,uEC1H5B,MAAMsD,UAAsB,KACxB,WAAArD,CAAYC,GACRC,MAAMD,GACNE,KAAKe,iBAAkB,EACvBf,KAAKmD,OAASrD,EAAKqD,MACvB,CACA,kBAAAxB,CAAmBvB,GACf,OAAOA,CACX,CACA,SAAAuC,GACI,MAAME,EAAa9C,MAAM4C,YACnBC,EAAS,CAAEO,OAAQnD,KAAKmD,QAE9B,OADAL,OAAOC,OAAOH,EAAQC,GACfD,CACX,CACA,IAAAV,CAAKZ,EAAQa,GACT,OAAO,IAAAX,OAAK,KACRxB,KAAKoC,eAAed,EAAQa,GAC5B,MAAME,GAAQ,QAAoBf,GAGlC,OADe,MADA,KAAM,IAAA8B,KAAI,KAAef,EAAMK,MAAO,EAAG1C,KAAKmD,QAASd,KAChC,IAAMA,GAAOF,EAAiB,WAAK,EAC5D,GAErB,EAGJe,EAAcF,UAAY,gBAE1B,EAAAC,cAAA,cAA4BC,GAC5B,MAAMG,UAAwB,KAC1B,WAAAxD,CAAYC,GACRC,MAAMD,GACNE,KAAKe,iBAAkB,EACvBf,KAAKsD,KAAOxD,EAAKwD,IACrB,CACA,kBAAA3B,CAAmBvB,GACf,OAAOA,CACX,CACA,SAAAuC,GACI,MAAME,EAAa9C,MAAM4C,YACnBC,EAAS,CAAEU,KAAMtD,KAAKsD,MAE5B,OADAR,OAAOC,OAAOH,EAAQC,GACfD,CACX,CACA,IAAAV,CAAKZ,EAAQa,GACT,OAAO,IAAAX,OAAK,KACRxB,KAAKoC,eAAed,EAAQa,GAC5B,MAAME,GAAQ,QAAoBf,GAClC,GAAItB,KAAKsD,KAAO,GAAKtD,KAAKsD,KAAO,EAAG,CAChC,MAAMC,EAAS,KACX,MAAMJ,EAASK,KAAKC,KAAKzD,KAAKsD,MAAQ,EAAItD,KAAKsD,OAC/C,OAAO,IAAAI,KAAIrB,EAAO,KAAeA,EAAMK,MAAO,EAAGS,GAAQ,EAE7D,OAAO,KAAeI,GAAQ,IAAMlB,GAAOF,EAAiB,WAAK,EACrE,CACA,OAAOE,CAAK,GAEpB,EAGJgB,EAAgBL,UAAY,kBAE5B,EAAAC,cAAA,cAA4BI,GA8B5B,MAAMM,UAAqB,KACvB,WAAA9D,CAAYC,GACRC,MAAMD,GACNE,KAAKe,iBAAkB,EACvBf,KAAKsD,KAAOxD,EAAKwD,KACjBtD,KAAK4D,WAAa9D,EAAK8D,UAC3B,CACA,cAAAC,CAAevC,GACX,OAAOtB,KAAK4D,aAAc,QAAoBtC,GAAQoB,KAC1D,CACA,kBAAAf,CAAmBvB,GACf,OAAOA,CACX,CACA,SAAAuC,GACI,MAAME,EAAa9C,MAAM4C,YACnBC,EAAS,CAAEU,KAAMtD,KAAKsD,MAE5B,OADAR,OAAOC,OAAOH,EAAQC,GACfD,CACX,CACA,IAAAV,CAAKZ,EAAQa,GACT,OAAO,IAAAX,OAAK,KACR,GAAIxB,KAAKsD,KAAO,GAAKtD,KAAKsD,KAAO,EAAG,CAChC,MAAMM,EAAa5D,KAAK6D,eAAevC,GACjCwC,EAAgB,KAClB,MAAMzB,GAAQ,QAAoBf,GAG5ByC,GAAS,mBACf,IAAIC,GAAU,IAAAC,eAAa,IAAAC,eAAcN,GAAa5D,KAAKsD,MAC3DU,EAAU,KAAOA,EAAS,WAE1B,MAAMG,IAAM,EAAInE,KAAKsD,OAAS,EAAItD,KAAKsD,KAAOS,GAAU,MAAQ,GAC1DK,GAAKD,EAAIJ,EAAS/D,KAAKsD,KAEvBe,GAAI,IAAAjB,MAAI,IAAAM,KAAIrB,EAAO2B,IAAU,IAAAN,MAAI,IAAAN,KAAIY,GAAU,GAAID,IACzD,OAAO,IAAAX,MAAI,IAAAM,KAAIW,EAAGF,GAAIC,EAAE,EAE5B,OAAO,KAAeN,GAAe,KAAM,QAAoBxC,IAASa,EAAiB,WAAK,EAClG,CACA,OAAOb,CAAM,GAErB,EAGJqC,EAAaX,UAAY,eAEzB,EAAAC,cAAA,cAA4BU,E,mHChIrB,MAAMW,UAAc,KACvB,WAAAzE,CAAYC,GACRC,MAAMD,GAAQ,CAAC,GACfE,KAAKe,iBAAkB,CAC3B,CAKA,aAAAwD,CAAcjD,GACV,MAAM,IAAI,IACd,CAWA,+BAAAkD,CAAgCC,EAAQC,GACpC,GAAc,MAAVD,GAA4B,MAAVC,EAClB,OAAO,KAEN,GAAID,EAAO5C,OAAS6C,EAAO7C,OAC5B,OAAO7B,KAAKwE,gCAAgCE,EAAQD,GAEnD,GAAsB,IAAlBC,EAAO7C,OACZ,OAAO4C,EAEX,MAAME,EAAcF,EAAOG,MAAM,EAAGH,EAAO5C,OAAS6C,EAAO7C,QAC3D,IAAK,IAAIE,EAAI,EAAGA,EAAI2C,EAAO7C,SAAUE,EAAG,CACpC,MAAMD,EAAI2C,EAAOA,EAAO5C,OAAS6C,EAAO7C,OAASE,GAC3C8C,EAAIH,EAAO3C,GACjB,GAAS,MAALD,GAAkB,MAAL+C,GAAa/C,EAAI,GAAK+C,EAAI,EACvCF,EAAYG,KAAK,WAEhB,GAAU,IAANhD,EACL6C,EAAYG,KAAKD,QAEhB,GAAU,IAANA,EACLF,EAAYG,KAAKhD,OAEhB,CACD,GAAIA,IAAM+C,EACN,MAAM,IAAI,KAAW,wDACjBE,KAAKC,UAAUP,GAAU,IAAMM,KAAKC,UAAUN,IAEtDC,EAAYG,KAAKhD,EACrB,CACJ,CACA,OAAO6C,CACX,CACA,KAAA3D,CAAMZ,GAOF,GALI6E,MAAMC,QAAQ9E,KAAgB6E,MAAMC,QAAQ9E,EAAW,MAEvDA,EAAa,EAAC,QAAmBA,KAGjCA,EAAWyB,OAAS,EACpB,MAAM,IAAI,KACN,wEAAQzB,EAAWyB,oBAI3B,IAAIsD,EAAa,GACjB,IAAK,MAAMzC,KAAStC,EACH,MAATsC,GAA8B,OAAbA,EAAM,IACvByC,EAAWL,KAAKpC,EAAM,IAI9B,GADAyC,EAAa,KAAqBA,GAC9BA,EAAWtD,OAAS,EACpB,MAAM,IAAI,KACN,8EAA4BkD,KAAKC,UAAU5E,OAEnD,IAAIuE,EAA+B,MAAjBvE,EAAW,GAAa,KAAOA,EAAW,GAAGwE,MAAM,GACrE,IAAK,IAAI9C,EAAI,EAAGA,EAAI1B,EAAWyB,SAAUC,EAAG,CACxC,MAAMY,EAAyB,MAAjBtC,EAAW0B,GAAa,KAAO1B,EAAW0B,GAAG8C,MAAM,GACjED,EAAc3E,KAAKwE,gCAAgCG,EAAajC,EACpE,CAGA,MAAM0C,EAAWhF,EAAWiF,KAAI3C,GAASA,EAAMb,UACb,IAA9BzB,EAAWkF,QAAQ,OACuB,IAA1C,KAAqBF,GAAUvD,OAC/B7B,KAAKuF,iBAAkB,EAGvBvF,KAAKuF,iBAAkB,CAE/B,CACA,IAAArD,CAAKZ,EAAQa,GACT,OAAO,IAAAX,OAAK,KAER,GAAIxB,KAAKuF,gBAAiB,CACtB,MAAMC,EAAiB,GACjBC,EAAYnE,EAAO+D,KAAIhD,GAASA,EAAMqD,OAC5C,IAAiC,IAA7BD,EAAUH,QAAQ,MAAc,CAGhC,MAAMK,EAAU,KAAcF,GAC9B,IAAK,IAAIpB,KAAK/C,EAAQ,CAClB,MAAMsE,EAAQvB,EAAEqB,KAChB,IAAK,IAAI3D,EAAI,EAAGA,EAAI4D,EAAUC,IAAS7D,EACnCsC,EAAI,KAAaA,EAAG,GAExBmB,EAAeV,KAAKT,EACxB,CACA,OAAOrE,KAAKuE,cAAciB,EAC9B,CACK,CAGD,IAAIK,GAAa,EACjB,IAAK,MAAMxB,KAAK/C,EAAQ,CACpB,MAAMsE,EAAQvB,EAAEqB,KAChB,GAAa,MAATE,EAAe,CACf,MAAME,EAASzB,EAAE3B,MACXrC,EAAYyF,EAAO,GACnBC,EAAWD,EAAOlB,MAAM,GAAGrE,OAAO,CAACF,IACzC,IAAI2F,EAAc,UAAY3B,EAAG,CAAChE,GAAWE,OAAO,KAAoBuF,EAAOlB,MAAM,MACrFoB,EAAc,YAAcA,EAAa,CAAC,EAAG,IAC7CA,EAAc,UAAYA,EAAaD,GACvCP,EAAeV,KAAKkB,GACpBH,GAAa,CACjB,MACK,GAAID,EAAQ,EAAG,CAChB,MAAMK,EAAO,KAAgB,EAAGL,GAAOrF,OAAO,CAAC,IAC/CiF,EAAeV,KAAK,YAAcT,EAAG4B,IACrCJ,GAAa,CACjB,MAGIL,EAAeV,KAAKT,EAE5B,CACA,IAAI6B,EAAIlG,KAAKuE,cAAciB,GAC3B,MAAMW,EAAQD,EAAER,KAChB,GAAIG,EAGA,GAAa,MAATM,EAAe,CACf,MAAMC,EAASF,EAAExD,MAEXrC,EAAY+F,EADJA,EAAOvE,OACY,GAC3BkE,EAAW,CAAC1F,GAAWE,OAAO6F,EAAOxB,MAAM,EAAGwB,EAAOvE,OAAS,IACpEqE,EAAI,UAAY,YAAc,UAAYA,EAAG,EAAE,EAAG7F,IAAa,CAAC,EAAG,IAAK0F,EAC5E,MACK,GAAII,EAAQ,EAAG,CAChB,MAAMF,EAAO,CAACE,EAAQ,GAAG5F,OAAO,KAAgB,EAAG4F,EAAQ,IAC3DD,EAAI,YAAcA,EAAGD,EACzB,CAEJ,OAAOC,CACX,CACJ,CAEI,OAAOlG,KAAKuE,cAAcjD,EAC9B,GAER,CACA,kBAAAK,CAAmBvB,GAEf,IAAIuE,EAEAA,EADiB,MAAjBvE,EAAW,GACG,KAGAA,EAAW,GAAGwE,MAAM,GAEtC,IAAK,IAAI9C,EAAI,EAAGA,EAAI1B,EAAWyB,SAAUC,EAAG,CACxC,MAAMY,EAAyB,MAAjBtC,EAAW0B,GAAa,KAAO1B,EAAW0B,GAAG8C,MAAM,GACjED,EAAc3E,KAAKwE,gCAAgCG,EAAajC,EACpE,CACA,IAAIyC,EAAa,GACjB,IAAK,MAAMzC,KAAStC,EACH,MAATsC,GAA8B,OAAbA,EAAM,IACvByC,EAAWL,KAAKpC,EAAM,IAU9B,OAPAyC,EAAa,KAAqBA,GAE9BR,EADsB,IAAtBQ,EAAWtD,OACGsD,EAAW5E,OAAOoE,GAGlB,CAAC,MAAMpE,OAAOoE,GAEzBA,CACX,CACA,WAAAtD,CAAYC,EAAQC,GAChB,OAAO,QAAS,KACZ,GAAY,MAARA,EACA,OAAO,KAEX,IAAK0D,MAAMC,QAAQ3D,GACf,MAAM,IAAI,KAAW,6BAEzB,IAAK0D,MAAMC,QAAQ5D,GACf,MAAM,IAAI,KAAW,+BAEzB,GAAIC,EAAKM,SAAWP,EAAOO,OACvB,MAAM,IAAI,KAEN,mGAAIP,EAAOO,aAAaN,EAAKM,WAErC,GAAIN,EAAK8E,OAAMC,GAAU,MAALA,IAChB,OAAO,KAGX,IAAIhE,GADJf,EAAOA,EAAK8D,KAAIiB,GAAU,MAALA,EAAYA,EAAI,aAAeA,EAAG,MACrC,GAClB,IAAK,IAAIxE,EAAI,EAAGA,EAAIP,EAAKM,OAAS,IAAKC,EACnCQ,EAAS,aAAeA,EAAQf,EAAKO,IAEzC,OAAOQ,CAAM,GAErB,EAEJ,MAAMiE,UAAYjC,EACd,WAAAzE,CAAYC,GACRC,MAAMD,EACV,CACA,aAAAyE,CAAcjD,GACV,OAAO,IAAAE,OAAK,KACR,IAAIc,EAAShB,EAAO,GAAGkF,QACvB,IAAK,IAAI1E,EAAI,EAAGA,EAAIR,EAAOO,SAAUC,EACjCQ,EAAS,MAAQA,EAAQhB,EAAOQ,IAEpC,OAAOQ,CAAM,GAErB,EAGJiE,EAAIvD,UAAY,MAEhB,EAAAC,cAAA,cAA4BsD,GAwD5B,MAAME,UAAiBnC,EACnB,WAAAzE,CAAYC,GACRC,MAAMD,EACV,CACA,aAAAyE,CAAcjD,GACV,OAAO,IAAAE,OAAK,KACR,IAAIc,EAAShB,EAAO,GAAGkF,QACvB,IAAK,IAAI1E,EAAI,EAAGA,EAAIR,EAAOO,SAAUC,EACjCQ,EAAS,MAAQA,EAAQhB,EAAOQ,IAEpC,OAAOQ,CAAM,GAErB,EAGJmE,EAASzD,UAAY,WAErB,EAAAC,cAAA,cAA4BwD,GAwD5B,MAAMC,UAAgBpC,EAClB,WAAAzE,CAAYC,GACRC,MAAMD,EACV,CACA,aAAAyE,CAAcjD,GACV,OAAO,IAAAE,OAAK,KACR,IAAIc,EAAShB,EAAO,GAAGkF,QACvB,IAAK,IAAI1E,EAAI,EAAGA,EAAIR,EAAOO,SAAUC,EACjCQ,EAAS,MAAQA,EAAQhB,EAAOQ,IAEpC,OAAO,MAAQ,EAAIR,EAAOO,OAAQS,EAAO,GAEjD,EAGJoE,EAAQ1D,UAAY,UAEpB,EAAAC,cAAA,cAA4ByD,GAyD5B,MAAMC,UAAgBrC,EAClB,WAAAzE,CAAYC,GACRC,MAAMD,EACV,CACA,aAAAyE,CAAcjD,GACV,OAAO,IAAAE,OAAK,KACR,IAAIc,EAAShB,EAAO,GACpB,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAOO,SAAUC,EACjCQ,EAAS,UAAYA,EAAQhB,EAAOQ,IAExC,OAAOQ,CAAM,GAErB,EAGJqE,EAAQ3D,UAAY,UAEpB,EAAAC,cAAA,cAA4B0D,GAwD5B,MAAMC,UAAgBtC,EAClB,WAAAzE,CAAYC,GACRC,MAAMD,EACV,CACA,aAAAyE,CAAcjD,GACV,OAAO,IAAAE,OAAK,KACR,IAAIc,EAAShB,EAAO,GACpB,IAAK,IAAIQ,EAAI,EAAGA,EAAIR,EAAOO,SAAUC,EACjCQ,EAAS,UAAYA,EAAQhB,EAAOQ,IAExC,OAAOQ,CAAM,GAErB,EAGJsE,EAAQ5D,UAAY,UAEpB,EAAAC,cAAA,cAA4B2D,GAwD5B,MAAMC,UAAoBvC,EACtB,WAAAzE,CAAYC,GACRC,MAAMD,GACNE,KAAK8G,cAAgB,EACT,MAARhH,IACAA,EAAO,CAAC,GAEZE,KAAK+G,KAAoB,MAAbjH,EAAKiH,KAAe/G,KAAK8G,aAAehH,EAAKiH,KACzD/G,KAAKe,iBAAkB,EACvBf,KAAKuF,iBAAkB,CAC3B,CACA,KAAAvE,CAAMZ,GAEF,IAAM6E,MAAMC,QAAQ9E,KAAe6E,MAAMC,QAAQ9E,EAAW,KAClC,IAAtBA,EAAWyB,OACX,MAAM,IAAI,KAAW,yEAIzB,IAAImF,GAAe,EACnB,IAAK,MAAMtE,KAAStC,EAChB,GAAa,MAATsC,EAAe,CACfsE,GAAe,EACf,KACJ,CAEJ,GAAIA,EACA,OAEJ,MAAMC,EAAW,GACjB,IAAK,IAAInF,EAAI,EAAGA,EAAI1B,EAAWyB,SAAUC,EAAG,CACxC,MAAMoF,EAAyB9G,EAAW0B,GAAG8C,QAC7CsC,EAAuBC,OAAOnH,KAAK+G,KAAM,GACzC,IAAIK,GAAS,EACb,IAAK,MAAM1E,KAASuE,EAChB,GAAI,EAAAI,KAAA,YAAiB3E,EAAOwE,GAAyB,CACjDE,GAAS,EACT,KACJ,CAECA,GACDH,EAASnC,KAAKoC,EAEtB,CACA,GAAID,EAASpF,OAAS,EAClB,MAAM,IAAI,KAAW,4GAEjBkD,KAAKC,UAAU5E,GAE3B,CACA,aAAAmE,CAAcjD,GACV,OAAO,IAAAE,OAAK,IACD,KAAcF,EAAQtB,KAAK+G,OAE1C,CACA,kBAAApF,CAAmBvB,GACf,IAAM6E,MAAMC,QAAQ9E,KAAe6E,MAAMC,QAAQ9E,EAAW,IACxD,MAAM,IAAI,KAAW,+DAEzB,MAAMkH,EAAclH,EACduE,EAAc2C,EAAY,GAAG1C,QAC7BmC,EAAO/G,KAAK+G,KAAO,EAAIpC,EAAY9C,OAAS7B,KAAK+G,KAAO/G,KAAK+G,KAGnE,IAAK,MAAMrE,KAAS4E,EAAY1C,MAAM,GAAI,CACtC,GAAyB,MAArBD,EAAYoC,IAAgC,MAAfrE,EAAMqE,GAAe,CAClDpC,EAAYoC,GAAQ,KACpB,KACJ,CACApC,EAAYoC,IAASrE,EAAMqE,EAC/B,CACA,OAAOpC,CACX,CACA,WAAAtD,CAAYC,EAAQC,GAChB,GAAY,MAARA,EACA,OAAO,KAEX,IAAK0D,MAAMC,QAAQ3D,GACf,MAAM,IAAI,KAAW,6CAEzB,IAAK0D,MAAMC,QAAQ5D,GACf,MAAM,IAAI,KAAW,+CAEzB,GAAIC,EAAKM,SAAWP,EAAOO,OACvB,MAAM,IAAI,KAAW,mCAAmCN,EAAKM,qCAC5BP,EAAOO,WAE5C,OAAO,QAAS,KACZ,IAAI0F,GAAe,EAOnB,GANAhG,EAAKiG,SAAQlB,IACA,MAALA,IACAiB,GAAe,EAEnB,IAEAA,EACA,OAAO,KAEX,MAAME,EAAc,GACpB,IAAK,IAAI3F,EAAI,EAAGA,EAAIR,EAAOO,SAAUC,EAClB,MAAXP,EAAKO,GAEL2F,EAAY3C,KAAK,OAAS,WAAaxD,EAAOQ,IAAK,SAE9CP,EAAKO,GAAG4D,KAAOpE,EAAOQ,GAAG4D,KAE9B+B,EAAY3C,KAAK,aAAevD,EAAKO,IAAK,IAG1C2F,EAAY3C,KAAKvD,EAAKO,IAG9B,MAAM4F,EAAoB,SAAWD,EAAazH,KAAK+G,MACvD,OAAO,MAAQW,GAAoB,GAAG,EAAM,GAEpD,CACA,SAAA/E,GACI,MAAMC,EAAS,CACX,KAAQ5C,KAAK+G,MAEXlE,EAAa9C,MAAM4C,YAEzB,OADAG,OAAOC,OAAOH,EAAQC,GACfD,CACX,EAwEJ,SAAS+E,EAAcZ,EAAMa,GACzB,KAAOb,EAAO,GACVA,GAAQa,EAEZ,OAAOb,CACX,CA1EAF,EAAY7D,UAAY,cAExB,EAAAC,cAAA,cAA4B4D,GAqJ5B,MAAMgB,UAAYvD,EACd,WAAAzE,CAAYC,GACRC,MAAMD,GACNE,KAAK8H,KAAOhI,EAAKgI,KACjB9H,KAAK+H,UAA8B,MAAlBjI,EAAKiI,WAA4BjI,EAAKiI,UACvD/H,KAAKe,iBAAkB,EACvBf,KAAKuF,iBAAkB,CAC3B,CACA,KAAAvE,CAAMZ,GACF,cAAgB6E,MAAMC,QAAQ9E,IAAqC,IAAtBA,EAAWyB,QACpDoD,MAAMC,QAAQ9E,EAAW,KAAO6E,MAAMC,QAAQ9E,EAAW,KAAK,IAAM,kEACxE,MAAMqE,EAASrE,EAAW,GACpBsE,EAAStE,EAAW,GAC1B,GAAIqE,EAAO5C,OAAS,GAAK6C,EAAO7C,OAAS,EACrC,MAAM,IAAI,KAAoB,gEAElC,MAAMiG,EAAO9H,KAAKgI,cAAcvD,EAAQC,GACxC,GAAID,EAAOqD,EAAK,MAAQpD,EAAOoD,EAAK,IAChC,MAAM,IAAI,KACN,8BAAGrD,EAAOqD,EAAK,WAAWpD,EAAOoD,EAAK,MAElD,CACA,aAAAvD,CAAcjD,GACV,GAAsB,IAAlBA,EAAOO,OACP,MAAM,IAAI,KACN,oEAAgBP,EAAOO,oBAE/B,IAEIiG,EAFAG,EAAK3G,EAAO,GACZ4G,EAAK5G,EAAO,GAehB,OANIwG,EAPC7C,MAAMC,QAAQlF,KAAK8H,MAOb9H,KAAK8H,KAAKzC,KAAI,CAAC0B,EAAMjF,IAAM6F,EAAcZ,EAAMzF,EAAOQ,GAAGY,MAAMb,UAN/D,CACH8F,EAAc3H,KAAK8H,KAAMG,EAAGvF,MAAMb,QAClC8F,EAAc3H,KAAK8H,KAAMI,EAAGxF,MAAMb,SAMtC7B,KAAK+H,YACLE,GAAK,QAAYA,EAAIH,EAAK,IAC1BI,GAAK,QAAYA,EAAIJ,EAAK,KArHtC,SAAkBzD,EAAG6B,EAAG4B,GACpB,GAAIzD,EAAE3B,MAAMb,OAAS,GAAKqE,EAAExD,MAAMb,OAAS,EACvC,MAAM,IAAI,KAAoB,oEASlC,GAPA,cAAgBwC,EAAE3B,MAAMb,QAAU,GAAG,IACjC,uDAAWwC,EAAE3B,MAAMb,WACvB,cAAgBwC,EAAE3B,MAAMb,QAAU,GAAG,IACjC,uDAAWqE,EAAExD,MAAMb,WACH,kBAATiG,IACPA,EAAO,CAACA,EAAMA,IAEF,cAAZzD,EAAEnD,OAAqC,cAAZgF,EAAEhF,MAC7B,MAAM,IAAI,KAAoB,+DAElC,MAAM0E,EAAQvB,EAAE3B,MAAMb,OAChBsE,EAAQD,EAAExD,MAAMb,OACV,MAARiG,IAEAA,EAAO,CAAClC,EAAQ,EAAGO,EAAQ,IAE/B,MAAMgC,EAAYL,EAClB,OAAO,QAAS,KACZ,IAAIM,EAoBAC,EAnBJ,GAAIzC,EAAQO,EAAO,CACfiC,EAAOxC,EAAQO,EACf,MAAMmC,EAAY,GAClB,IAAK,IAAIxG,EAAI,EAAGA,EAAIsG,IAAQtG,EACxBwG,EAAUxD,KAAK,GAEnBoB,EAAI,UAAYA,EAAGA,EAAExD,MAAMnC,OAAO+H,GACtC,MACK,GAAInC,EAAQP,EAAO,CACpBwC,EAAOjC,EAAQP,EACf,MAAM0C,EAAY,GAClB,IAAK,IAAIxG,EAAI,EAAGA,EAAIsG,IAAQtG,EACxBwG,EAAUxD,KAAK,GAEnBT,EAAI,UAAYA,EAAGA,EAAE3B,MAAMnC,OAAO+H,GACtC,MAEIF,EAAO,EAGX,GAAuB,IAAnB/D,EAAE3B,MAAMb,QAAmC,IAAnBqE,EAAExD,MAAMb,OAE5BwG,EADAF,EAAU,KAAOA,EAAU,GACrB,MAAQ,MAAQ9D,EAAG6B,GAAIiC,EAAU,IAGjC,MAAQ,MAAQ,YAAc9D,EAAG,CAAC,EAAG,IAAK6B,GAAIiC,EAAU,QAGjE,CACD,MAAMI,EAAOJ,EAAU,KAAO9D,EAAE3B,MAAMb,OAAS,EACzC2G,EAAOL,EAAU,KAAOjC,EAAExD,MAAMb,OAAS,EAC/CwG,EAAM,SAAWhE,EAAG6B,EAAGqC,EAAMC,EACjC,CACA,GAAIJ,EAAO,EAAG,CACV,IAAIK,EAEAA,EADA7C,EAAQO,EACFP,EAAQO,EAAQ,EAGhBP,EAAQ,EAElB,MAAM8C,EAAc,GACpB,IAAK,IAAI5G,EAAI2G,EAAK3G,EAAI2G,EAAML,IAAQtG,EAChC4G,EAAY5D,KAAKhD,GAErBuG,EAAM,UAAYA,EAAKK,EAC3B,CAIA,OAHyB,IAArBL,EAAI3F,MAAMb,SACVwG,EAAM,aAAeA,EAAK,IAEvBA,CAAG,GAElB,CA4CeM,CAASV,EAAIC,EAAIJ,EAC5B,CACA,aAAAE,CAAcvD,EAAQC,GAClB,IAAIoD,EAYJ,OAFIA,EATC7C,MAAMC,QAAQlF,KAAK8H,MASb9H,KAAK8H,KAPL,CACHH,EAAc3H,KAAK8H,KAAMrD,EAAO5C,QAChC8F,EAAc3H,KAAK8H,KAAMpD,EAAO7C,SAOjCiG,CACX,CACA,kBAAAnG,CAAmBvB,GACf,cAAgB6E,MAAMC,QAAQ9E,IAAqC,IAAtBA,EAAWyB,QACpDoD,MAAMC,QAAQ9E,EAAW,KAAO6E,MAAMC,QAAQ9E,EAAW,KAAK,IAAM,kEACxE,MAAMqE,EAASrE,EAAW,GAAGwE,QACvBF,EAAStE,EAAW,GAAGwE,QAC7B,GAAIH,EAAO5C,OAAS,GAAK6C,EAAO7C,OAAS,EACrC,MAAM,IAAI,KAAoB,gEAElC,MAAMiG,EAAO9H,KAAKgI,cAAcvD,EAAQC,GACxCD,EAAO0C,OAAOW,EAAK,GAAI,GACvBpD,EAAOyC,OAAOW,EAAK,GAAI,GACvBpD,EAAOyC,OAAO,EAAG,GACjB,MAAMxC,EAAcF,EAAOlE,OAAOmE,GAIlC,OAH2B,IAAvBC,EAAY9C,QACZ8C,EAAYG,KAAK,GAEdH,CACX,CACA,WAAAtD,CAAYC,EAAQC,GAChB,OAAO,IACX,CACA,SAAAoB,GACI,MAAMC,EAAS,CACX,KAAQ5C,KAAK8H,KACb,UAAa9H,KAAK+H,WAEhBlF,EAAa9C,MAAM4C,YAEzB,OADAG,OAAOC,OAAOH,EAAQC,GACfD,CACX,EAGJiF,EAAI7E,UAAY,MAEhB,EAAAC,cAAA,cAA4B4E,E","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/embeddings.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/noise.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/layers/merge.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Embedding Layer.\n *\n * Original source: keras/constraints.py\n */\nimport { notEqual, reshape, serialization, tidy, zerosLike } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { getConstraint, serializeConstraint } from '../constraints';\nimport { Layer } from '../engine/topology';\nimport { ValueError } from '../errors';\nimport { getInitializer, serializeInitializer } from '../initializers';\nimport { getRegularizer, serializeRegularizer } from '../regularizers';\nimport * as generic_utils from '../utils/generic_utils';\nimport { getExactlyOneShape, getExactlyOneTensor } from '../utils/types_utils';\nclass Embedding extends Layer {\n    constructor(args) {\n        super(args);\n        this.embeddings = null;\n        this.DEFAULT_EMBEDDINGS_INITIALIZER = 'randomUniform';\n        if (args.batchInputShape == null && args.inputShape == null) {\n            // Porting Note: This logic is copied from Layer's constructor, since we\n            // can't do exactly what the Python constructor does for Embedding().\n            // Specifically, the super constructor can not be called after the\n            // mutation of the `config` argument.\n            let batchSize = null;\n            if (args.batchSize != null) {\n                batchSize = args.batchSize;\n            }\n            if (args.inputLength == null) {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (None, )\n                this.batchInputShape = [batchSize, null];\n            }\n            else {\n                // Fix super-constructor to what it would have done if\n                // 'config.inputShape' were (config.inputLength, )\n                this.batchInputShape =\n                    [batchSize].concat(generic_utils.toList(args.inputLength));\n            }\n        }\n        this.inputDim = args.inputDim;\n        generic_utils.assertPositiveInteger(this.inputDim, 'inputDim');\n        this.outputDim = args.outputDim;\n        generic_utils.assertPositiveInteger(this.outputDim, 'outputDim');\n        this.embeddingsInitializer = getInitializer(args.embeddingsInitializer || this.DEFAULT_EMBEDDINGS_INITIALIZER);\n        this.embeddingsRegularizer = getRegularizer(args.embeddingsRegularizer);\n        this.activityRegularizer = getRegularizer(args.activityRegularizer);\n        this.embeddingsConstraint = getConstraint(args.embeddingsConstraint);\n        this.maskZero = args.maskZero;\n        this.supportsMasking = args.maskZero;\n        this.inputLength = args.inputLength;\n    }\n    build(inputShape) {\n        this.embeddings = this.addWeight('embeddings', [this.inputDim, this.outputDim], this.dtype, this.embeddingsInitializer, this.embeddingsRegularizer, true, this.embeddingsConstraint);\n        this.built = true;\n    }\n    // Override warnOnIncompatibleInputShape because an embedding layer allows\n    // the input to have varying ranks.\n    warnOnIncompatibleInputShape(inputShape) { }\n    computeMask(inputs, mask) {\n        return tidy(() => {\n            if (!this.maskZero) {\n                return null;\n            }\n            else {\n                inputs = getExactlyOneTensor(inputs);\n                return notEqual(inputs, zerosLike(inputs));\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = getExactlyOneShape(inputShape);\n        if (this.inputLength == null) {\n            return [...inputShape, this.outputDim];\n        }\n        // inputLength can be an array if input is 3D or higher.\n        const inLens = generic_utils.toList(this.inputLength);\n        if (inLens.length !== inputShape.length - 1) {\n            throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                `input shape has shape ${inputShape}`);\n        }\n        else {\n            let i = 0;\n            for (let k = 0; k < inLens.length; ++k) {\n                const s1 = inLens[k];\n                const s2 = inputShape[k + 1];\n                if ((s1 != null) && (s2 != null) && (s1 !== s2)) {\n                    throw new ValueError(`\"inputLength\" is ${this.inputLength}, but received ` +\n                        `input shape has shape ${inputShape}`);\n                }\n                else if (s1 == null) {\n                    inLens[i] = s2;\n                }\n                i++;\n            }\n        }\n        return [inputShape[0], ...inLens, this.outputDim];\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            // Embedding layer accepts only a single input.\n            let input = getExactlyOneTensor(inputs);\n            if (input.dtype !== 'int32') {\n                input = K.cast(input, 'int32');\n            }\n            const output = K.gather(this.embeddings.read(), reshape(input, [input.size]));\n            return reshape(output, getExactlyOneShape(this.computeOutputShape(input.shape)));\n        });\n    }\n    getConfig() {\n        const config = {\n            inputDim: this.inputDim,\n            outputDim: this.outputDim,\n            embeddingsInitializer: serializeInitializer(this.embeddingsInitializer),\n            embeddingsRegularizer: serializeRegularizer(this.embeddingsRegularizer),\n            activityRegularizer: serializeRegularizer(this.activityRegularizer),\n            embeddingsConstraint: serializeConstraint(this.embeddingsConstraint),\n            maskZero: this.maskZero,\n            inputLength: this.inputLength\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nEmbedding.className = 'Embedding';\nexport { Embedding };\nserialization.registerClass(Embedding);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Noise Layers.\n */\nimport { add, greaterEqual, mul, randomUniform, serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { getExactlyOneTensor } from '../utils/types_utils';\nclass GaussianNoise extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.stddev = args.stddev;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { stddev: this.stddev };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            const noised = () => add(K.randomNormal(input.shape, 0, this.stddev), input);\n            const output = K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nGaussianNoise.className = 'GaussianNoise';\nexport { GaussianNoise };\nserialization.registerClass(GaussianNoise);\nclass GaussianDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            this.invokeCallHook(inputs, kwargs);\n            const input = getExactlyOneTensor(inputs);\n            if (this.rate > 0 && this.rate < 1) {\n                const noised = () => {\n                    const stddev = Math.sqrt(this.rate / (1 - this.rate));\n                    return mul(input, K.randomNormal(input.shape, 1, stddev));\n                };\n                return K.inTrainPhase(noised, () => input, kwargs['training'] || false);\n            }\n            return input;\n        });\n    }\n}\n/** @nocollapse */\nGaussianDropout.className = 'GaussianDropout';\nexport { GaussianDropout };\nserialization.registerClass(GaussianDropout);\n/**\n * Applies Alpha Dropout to the input.\n *\n * As it is a regularization layer, it is only active at training time.\n *\n * Alpha Dropout is a `Dropout` that keeps mean and variance of inputs\n * to their original values, in order to ensure the self-normalizing property\n * even after this dropout.\n * Alpha Dropout fits well to Scaled Exponential Linear Units\n * by randomly setting activations to the negative saturation value.\n *\n * Arguments:\n *   - `rate`: float, drop probability (as with `Dropout`).\n *     The multiplicative noise will have\n *     standard deviation `sqrt(rate / (1 - rate))`.\n *   - `noise_shape`: A 1-D `Tensor` of type `int32`, representing the\n *     shape for randomly generated keep/drop flags.\n *\n * Input shape:\n *   Arbitrary. Use the keyword argument `inputShape`\n *   (tuple of integers, does not include the samples axis)\n *   when using this layer as the first layer in a model.\n *\n * Output shape:\n *   Same shape as input.\n *\n * References:\n *   - [Self-Normalizing Neural Networks](https://arxiv.org/abs/1706.02515)\n */\nclass AlphaDropout extends Layer {\n    constructor(args) {\n        super(args);\n        this.supportsMasking = true;\n        this.rate = args.rate;\n        this.noiseShape = args.noiseShape;\n    }\n    _getNoiseShape(inputs) {\n        return this.noiseShape || getExactlyOneTensor(inputs).shape;\n    }\n    computeOutputShape(inputShape) {\n        return inputShape;\n    }\n    getConfig() {\n        const baseConfig = super.getConfig();\n        const config = { rate: this.rate };\n        Object.assign(config, baseConfig);\n        return config;\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            if (this.rate < 1 && this.rate > 0) {\n                const noiseShape = this._getNoiseShape(inputs);\n                const droppedInputs = () => {\n                    const input = getExactlyOneTensor(inputs);\n                    const alpha = 1.6732632423543772848170429916717;\n                    const scale = 1.0507009873554804934193349852946;\n                    const alphaP = -alpha * scale;\n                    let keptIdx = greaterEqual(randomUniform(noiseShape), this.rate);\n                    keptIdx = K.cast(keptIdx, 'float32'); // get default dtype.\n                    // Get affine transformation params.\n                    const a = ((1 - this.rate) * (1 + this.rate * alphaP ** 2)) ** -0.5;\n                    const b = -a * alphaP * this.rate;\n                    // Apply mask.\n                    const x = add(mul(input, keptIdx), mul(add(keptIdx, -1), alphaP));\n                    return add(mul(x, a), b);\n                };\n                return K.inTrainPhase(droppedInputs, () => getExactlyOneTensor(inputs), kwargs['training'] || false);\n            }\n            return inputs;\n        });\n    }\n}\n/** @nocollapse */\nAlphaDropout.className = 'AlphaDropout';\nexport { AlphaDropout };\nserialization.registerClass(AlphaDropout);\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * TensorFlow.js Layers: Merge Layers.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy, util } from '@tensorflow/tfjs-core';\nimport * as K from '../backend/tfjs_backend';\nimport { Layer } from '../engine/topology';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { l2Normalize } from '../losses';\nimport * as generic_utils from '../utils/generic_utils';\nimport * as mathUtils from '../utils/math_utils';\nimport { getExactlyOneShape } from '../utils/types_utils';\n/**\n * Generic Merge layer for element-wise merge functions.\n *\n * Used to implement `Sum`, `Average`, `Concatenate`, etc.\n */\nexport class Merge extends Layer {\n    constructor(args) {\n        super(args || {});\n        this.supportsMasking = true;\n    }\n    /**\n     * Logic for merging multiple tensors, to be overridden by subclasses.\n     * @param inputs\n     */\n    mergeFunction(inputs) {\n        throw new NotImplementedError();\n    }\n    /**\n     * Computes the shape of the result of an elementwise operation.\n     *\n     * @param shape1: Shape of the first tensor.\n     * @param shape2: Shape of the second tensor.\n     * @returns Expected output shape when an elementwise operation is carried\n     *   out on 2 tensors with shapes `shape1` and `shape2`.\n     * @throws ValueError: If `shape1` and `shape2` are not compatible for\n     *   element-wise operations.\n     */\n    computeElementwiseOpOutputShape(shape1, shape2) {\n        if (shape1 == null || shape2 == null) {\n            return null;\n        }\n        else if (shape1.length < shape2.length) {\n            return this.computeElementwiseOpOutputShape(shape2, shape1);\n        }\n        else if (shape2.length === 0) {\n            return shape1;\n        }\n        const outputShape = shape1.slice(0, shape1.length - shape2.length);\n        for (let k = 0; k < shape2.length; ++k) {\n            const i = shape1[shape1.length - shape2.length + k];\n            const j = shape2[k];\n            if (i == null || j == null || i < 0 || j < 0) {\n                outputShape.push(null);\n            }\n            else if (i === 1) {\n                outputShape.push(j);\n            }\n            else if (j === 1) {\n                outputShape.push(i);\n            }\n            else {\n                if (i !== j) {\n                    throw new ValueError('Operands could not be broadcast together with shapes ' +\n                        JSON.stringify(shape1) + ' ' + JSON.stringify(shape2));\n                }\n                outputShape.push(i);\n            }\n        }\n        return outputShape;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.\n        if (Array.isArray(inputShape) && !Array.isArray(inputShape[0])) {\n            // Make sure that inputShape is an Array of shape.\n            inputShape = [getExactlyOneShape(inputShape)];\n        }\n        inputShape = inputShape;\n        if (inputShape.length < 2) {\n            throw new ValueError('A merge layer should be called on an Array of at least 2 inputs.' +\n                ` Got ${inputShape.length} input(s).`);\n        }\n        // Make sure that there is at most one unique batch size among the input\n        // shapes.\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length > 1) {\n            throw new ValueError(`Can not merge tensors with different batch sizes. ` +\n                `Got tensors with shapes: ${JSON.stringify(inputShape)}.`);\n        }\n        let outputShape = inputShape[0] == null ? null : inputShape[0].slice(1);\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        // If the inputs have different ranks, we have to reshape them to make them\n        // broadcastable.\n        const allRanks = inputShape.map(shape => shape.length);\n        if (inputShape.indexOf(null) === -1 &&\n            generic_utils.unique(allRanks).length === 1) {\n            this.reshapeRequired = false;\n        }\n        else {\n            this.reshapeRequired = true;\n        }\n    }\n    call(inputs, kwargs) {\n        return tidy(() => {\n            inputs = inputs;\n            if (this.reshapeRequired) {\n                const reshapedInputs = [];\n                const inputDims = inputs.map(input => input.rank);\n                if (inputDims.indexOf(null) === -1) {\n                    // If ranks of all inputs are available, we simply expand each of them\n                    // at axis=1 until all of them have the same rank.\n                    const maxNDim = mathUtils.max(inputDims);\n                    for (let x of inputs) {\n                        const xNDim = x.rank;\n                        for (let k = 0; k < maxNDim - xNDim; ++k) {\n                            x = K.expandDims(x, 1);\n                        }\n                        reshapedInputs.push(x);\n                    }\n                    return this.mergeFunction(reshapedInputs);\n                }\n                else {\n                    // Transpose all inputs so that batch size is the last dimension.\n                    // [batchSize, dim1, dim2, ...] -> [dim1, dim2, ..., batchSize]\n                    let transposed = false;\n                    for (const x of inputs) {\n                        const xNDim = x.rank;\n                        if (xNDim == null) {\n                            const xShape = x.shape;\n                            const batchSize = xShape[0];\n                            const newShape = xShape.slice(1).concat([batchSize]);\n                            let xTransposed = tfc.reshape(x, [batchSize].concat(mathUtils.arrayProd(xShape.slice(1))));\n                            xTransposed = tfc.transpose(xTransposed, [1, 0]);\n                            xTransposed = tfc.reshape(xTransposed, newShape);\n                            reshapedInputs.push(xTransposed);\n                            transposed = true;\n                        }\n                        else if (xNDim > 1) {\n                            const dims = mathUtils.range(1, xNDim).concat([0]);\n                            reshapedInputs.push(tfc.transpose(x, dims));\n                            transposed = true;\n                        }\n                        else {\n                            // We don't transpose inputs if they are 1D vectors or scalars.\n                            reshapedInputs.push(x);\n                        }\n                    }\n                    let y = this.mergeFunction(reshapedInputs);\n                    const yNDim = y.rank;\n                    if (transposed) {\n                        // If inputs have been transposed, we have to transpose the output\n                        // too.\n                        if (yNDim == null) {\n                            const yShape = y.shape;\n                            const yNDim = yShape.length;\n                            const batchSize = yShape[yNDim - 1];\n                            const newShape = [batchSize].concat(yShape.slice(0, yShape.length - 1));\n                            y = tfc.reshape(tfc.transpose(tfc.reshape(y, [-1, batchSize]), [1, 0]), newShape);\n                        }\n                        else if (yNDim > 1) {\n                            const dims = [yNDim - 1].concat(mathUtils.range(0, yNDim - 1));\n                            y = tfc.transpose(y, dims);\n                        }\n                    }\n                    return y;\n                }\n            }\n            else {\n                return this.mergeFunction(inputs);\n            }\n        });\n    }\n    computeOutputShape(inputShape) {\n        inputShape = inputShape;\n        let outputShape;\n        if (inputShape[0] == null) {\n            outputShape = null;\n        }\n        else {\n            outputShape = inputShape[0].slice(1);\n        }\n        for (let i = 1; i < inputShape.length; ++i) {\n            const shape = inputShape[i] == null ? null : inputShape[i].slice(1);\n            outputShape = this.computeElementwiseOpOutputShape(outputShape, shape);\n        }\n        let batchSizes = [];\n        for (const shape of inputShape) {\n            if (shape != null && shape[0] !== null) {\n                batchSizes.push(shape[0]);\n            }\n        }\n        batchSizes = generic_utils.unique(batchSizes);\n        if (batchSizes.length === 1) {\n            outputShape = batchSizes.concat(outputShape);\n        }\n        else {\n            outputShape = [null].concat(outputShape);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return tfc.tidy(() => {\n            if (mask == null) {\n                return null;\n            }\n            if (!Array.isArray(mask)) {\n                throw new ValueError('`mask` should be an Array');\n            }\n            if (!Array.isArray(inputs)) {\n                throw new ValueError('`inputs` should be an Array');\n            }\n            if (mask.length !== inputs.length) {\n                throw new ValueError(`The Array 'inputs' and 'mask' are expected to have the same ` +\n                    `length, but have different lengths ` +\n                    `(${inputs.length} vs ${mask.length})`);\n            }\n            if (mask.every(m => m == null)) {\n                return null;\n            }\n            mask = mask.map(m => m == null ? m : tfc.expandDims(m, 0));\n            let output = mask[0];\n            for (let i = 1; i < mask.length - 1; ++i) {\n                output = tfc.logicalAnd(output, mask[i]);\n            }\n            return output;\n        });\n    }\n}\nclass Add extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nAdd.className = 'Add';\nexport { Add };\nserialization.registerClass(Add);\n/**\n * Calculate the element-wise sum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Add` layer, by using no input argument\n *    or a single configuration argument. The resultant `Add` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const addLayer = tf.layers.add();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = addLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.add([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.add([input1, input2]).print();\n * // Gives [[11, 22], [33, 44]].\n *\n */\nexport function add(config) {\n    if (Array.isArray(config)) {\n        const layer = new Add({});\n        return layer.apply(config);\n    }\n    else {\n        return new Add(config);\n    }\n}\nclass Multiply extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.mul(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMultiply.className = 'Multiply';\nexport { Multiply };\nserialization.registerClass(Multiply);\n/**\n * Calculate the element-wise product of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Multiply` layer, by using no input argument\n *    or a single configuration argument. The resultant `Multiply` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const multiplyLayer = tf.layers.multiply();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = multiplyLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.multiply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.multiply([input1, input2]).print();\n * // Gives [[10, 40], [90, 160]].\n *\n */\nexport function multiply(config) {\n    if (Array.isArray(config)) {\n        const layer = new Multiply({});\n        return layer.apply(config);\n    }\n    else {\n        return new Multiply(config);\n    }\n}\nclass Average extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0].clone();\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.add(output, inputs[i]);\n            }\n            return tfc.mul(1 / inputs.length, output);\n        });\n    }\n}\n/** @nocollapse */\nAverage.className = 'Average';\nexport { Average };\nserialization.registerClass(Average);\n/**\n * Calculate the element-wise arithmetic mean of inputs, which all have the same\n * shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Average` layer, by using no input argument\n *    or a single configuration argument. The resultant `Average` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const averageLayer = tf.layers.average();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = averageLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.average([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 2, 3, 4], [2, 2]);\n * const input2 = tf.tensor2d([10, 20, 30, 40], [2, 2]);\n * tf.layers.average([input1, input2]).print();\n * // Gives [[5.5, 11], [16.5, 22]].\n *\n */\nexport function average(config) {\n    if (Array.isArray(config)) {\n        const layer = new Average({});\n        return layer.apply(config);\n    }\n    else {\n        return new Average(config);\n    }\n}\nclass Maximum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.maximum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMaximum.className = 'Maximum';\nexport { Maximum };\nserialization.registerClass(Maximum);\n/**\n * Calculate the element-wise maximum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Maximum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Maximum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const maximumLayer = tf.layers.maximum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = maximumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.maximum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.maximum([input1, input2]).print();\n * // Gives [[10, 20], [30, 40]].\n *\n */\nexport function maximum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Maximum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Maximum(config);\n    }\n}\nclass Minimum extends Merge {\n    constructor(args) {\n        super(args);\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            let output = inputs[0];\n            for (let i = 1; i < inputs.length; ++i) {\n                output = tfc.minimum(output, inputs[i]);\n            }\n            return output;\n        });\n    }\n}\n/** @nocollapse */\nMinimum.className = 'Minimum';\nexport { Minimum };\nserialization.registerClass(Minimum);\n/**\n * Calculate the element-wise minimum of inputs, which all have the same shape.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Minimum` layer, by using no input argument\n *    or a single configuration argument. The resultant `Minimum` layer can then\n *    be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const minimumLayer = tf.layers.minimum();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = minimumLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 2]});\n * const input2 = tf.input({shape: [2, 2]});\n * const output = tf.layers.minimum([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([1, 20, 3, 40], [2, 2]);\n * const input2 = tf.tensor2d([10, 2, 30, 4], [2, 2]);\n * tf.layers.minimum([input1, input2]).print();\n * // Gives [[1, 2], [3, 4]].\n *\n */\nexport function minimum(config) {\n    if (Array.isArray(config)) {\n        const layer = new Minimum({});\n        return layer.apply(config);\n    }\n    else {\n        return new Minimum(config);\n    }\n}\nclass Concatenate extends Merge {\n    constructor(args) {\n        super(args);\n        this.DEFAULT_AXIS = -1;\n        if (args == null) {\n            args = {};\n        }\n        this.axis = args.axis == null ? this.DEFAULT_AXIS : args.axis;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        // Used purely for shape validation.]\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0])) ||\n            inputShape.length === 1) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of at least 2 ' +\n                'inputs');\n        }\n        inputShape = inputShape;\n        let allNoneShape = true;\n        for (const shape of inputShape) {\n            if (shape != null) {\n                allNoneShape = false;\n                break;\n            }\n        }\n        if (allNoneShape) {\n            return;\n        }\n        const shapeSet = [];\n        for (let i = 0; i < inputShape.length; ++i) {\n            const shapeWithoutConcatAxis = inputShape[i].slice();\n            shapeWithoutConcatAxis.splice(this.axis, 1);\n            let exists = false;\n            for (const shape of shapeSet) {\n                if (util.arraysEqual(shape, shapeWithoutConcatAxis)) {\n                    exists = true;\n                    break;\n                }\n            }\n            if (!exists) {\n                shapeSet.push(shapeWithoutConcatAxis);\n            }\n        }\n        if (shapeSet.length > 1) {\n            throw new ValueError('A `Concatenate` layer requires inputs with matching shapes ' +\n                'except for the concat axis. Got input shapes: ' +\n                JSON.stringify(inputShape));\n        }\n    }\n    mergeFunction(inputs) {\n        return tidy(() => {\n            return K.concatenate(inputs, this.axis);\n        });\n    }\n    computeOutputShape(inputShape) {\n        if (!(Array.isArray(inputShape) && Array.isArray(inputShape[0]))) {\n            throw new ValueError('A `Concatenate` layer should be called on a list of inputs.');\n        }\n        const inputShapes = inputShape;\n        const outputShape = inputShapes[0].slice();\n        const axis = this.axis < 0 ? outputShape.length + this.axis : this.axis;\n        // Porting Note: the line above is because TypeScript doesn't support\n        //   negative indices.\n        for (const shape of inputShapes.slice(1)) {\n            if (outputShape[axis] == null || shape[axis] == null) {\n                outputShape[axis] = null;\n                break;\n            }\n            outputShape[axis] += shape[axis];\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        if (mask == null) {\n            return null;\n        }\n        if (!Array.isArray(mask)) {\n            throw new ValueError('`mask` should be an array for Concatenate');\n        }\n        if (!Array.isArray(inputs)) {\n            throw new ValueError('`inputs` should be an array for Concatenate');\n        }\n        if (mask.length !== inputs.length) {\n            throw new ValueError(`Mismatch in the length of mask (${mask.length}) ` +\n                `and the legnth of inputs (${inputs.length})`);\n        }\n        return tfc.tidy(() => {\n            let allNullMasks = true;\n            mask.forEach(m => {\n                if (m != null) {\n                    allNullMasks = false;\n                    return;\n                }\n            });\n            if (allNullMasks) {\n                return null;\n            }\n            const outputMasks = [];\n            for (let i = 0; i < inputs.length; ++i) {\n                if (mask[i] == null) {\n                    // Input is unmasked. Append all 1's to masks.\n                    outputMasks.push(tfc.cast(tfc.onesLike(inputs[i]), 'bool'));\n                }\n                else if (mask[i].rank < inputs[i].rank) {\n                    // Mask is smaller than the input, expand it.\n                    outputMasks.push(tfc.expandDims(mask[i], -1));\n                }\n                else {\n                    outputMasks.push(mask[i]);\n                }\n            }\n            const concatenatedMasks = tfc.concat(outputMasks, this.axis);\n            return tfc.all(concatenatedMasks, -1, false);\n        });\n    }\n    getConfig() {\n        const config = {\n            'axis': this.axis,\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nConcatenate.className = 'Concatenate';\nexport { Concatenate };\nserialization.registerClass(Concatenate);\n/**\n * Concatenate an `Array` of inputs.\n *\n * This function can be invoked in three ways.\n *\n * 1. Construct an instance of `Concatenate` layer, by using no input argument\n *    or a single configuration argument. The resultant `Concatenate` layer can\n *    then be used on `tf.SymbolicTensor`s or `tf.Tensor`s. For example:\n *\n * ```js\n * const concatLayer = tf.layers.concatenate();\n *\n * // The layer can be applied to inputs.\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = concatLayer.apply([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 7], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 2. Invoke directly on an `Array` of `tf.SymbolicTensor`s. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.SymbolicTensor`. For example:\n *\n * ```js\n * const input1 = tf.input({shape: [2, 3]});\n * const input2 = tf.input({shape: [2, 4]});\n * const output = tf.layers.concatenate([input1, input2]);\n * console.log(output.shape);\n * // You get [null, 2, 2], with the first dimension as the undetermined batch\n * // dimension and the last dimension as the result of concatenating the\n * // last dimensions of the two inputs.\n * ```\n *\n * 3. Invoke directly on `tf.Tensor`s, i.e., concrete values. This constructs\n *    an `Layer` object internally and calls its `apply` method on the inputs,\n *    generating a new `tf.Tensor` as the result of the computation. For\n * example:\n *\n * ```js\n * const input1 = tf.tensor2d([[1, 2], [3, 4]], [2, 2]);\n * const input2 = tf.tensor2d([[10, 20], [30, 40]], [2, 2]);\n * tf.layers.concatenate([input1, input2]).print();\n * // Gives [[1, 2, 10, 20], [3, 4, 30, 40]].\n *\n */\nexport function concatenate(config) {\n    if (Array.isArray(config)) {\n        const layer = new Concatenate({});\n        return layer.apply(config);\n    }\n    else {\n        return new Concatenate(config);\n    }\n}\n/**\n * Interpretable potentially negative axis index.\n *\n * For example, given axis = -1, and dim = 3, this function will return 2.\n *\n * @param axis The axis index, may be a positive, zero or negative integer.\n * @param dim Total number of dimensions, a positive integer.\n * @returns A non-negative axis index equivalent to the input `axis`.\n */\nfunction interpretAxis(axis, dim) {\n    while (axis < 0) {\n        axis += dim;\n    }\n    return axis;\n}\nfunction batchDot(x, y, axes) {\n    if (x.shape.length > 3 || y.shape.length > 3) {\n        throw new NotImplementedError('batchDot is not implemented for tensors of 4D or higher rank yet');\n    }\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of x to be >= 2, ` +\n        `but got ${x.shape.length}`);\n    tfc.util.assert(x.shape.length >= 2, () => `batchDot requires the rank of y to be >= 2, ` +\n        `but got ${y.shape.length}`);\n    if (typeof axes === 'number') {\n        axes = [axes, axes];\n    }\n    if (x.dtype === 'complex64' || y.dtype === 'complex64') {\n        throw new NotImplementedError('batchDot is not implemented for complex64-type Tensors yet.');\n    }\n    const xNDim = x.shape.length;\n    const yNDim = y.shape.length;\n    if (axes == null) {\n        // Behave like batchMatmul by default.\n        axes = [xNDim - 1, yNDim - 2];\n    }\n    const axesArray = axes;\n    return tfc.tidy(() => {\n        let diff;\n        if (xNDim > yNDim) {\n            diff = xNDim - yNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            y = tfc.reshape(y, y.shape.concat(diffShape));\n        }\n        else if (yNDim > xNDim) {\n            diff = yNDim - xNDim;\n            const diffShape = [];\n            for (let i = 0; i < diff; ++i) {\n                diffShape.push(1);\n            }\n            x = tfc.reshape(x, x.shape.concat(diffShape));\n        }\n        else {\n            diff = 0;\n        }\n        let out;\n        if (x.shape.length === 2 && y.shape.length === 2) {\n            if (axesArray[0] === axesArray[1]) {\n                out = tfc.sum(tfc.mul(x, y), axesArray[0]);\n            }\n            else {\n                out = tfc.sum(tfc.mul(tfc.transpose(x, [1, 0]), y), axesArray[1]);\n            }\n        }\n        else {\n            const adjX = axesArray[0] !== x.shape.length - 1;\n            const adjY = axesArray[1] === y.shape.length - 1;\n            out = tfc.matMul(x, y, adjX, adjY);\n        }\n        if (diff > 0) {\n            let idx;\n            if (xNDim > yNDim) {\n                idx = xNDim + yNDim - 3;\n            }\n            else {\n                idx = xNDim - 1;\n            }\n            const squeezeAxes = [];\n            for (let i = idx; i < idx + diff; ++i) {\n                squeezeAxes.push(i);\n            }\n            out = tfc.squeeze(out, squeezeAxes);\n        }\n        if (out.shape.length === 1) {\n            out = tfc.expandDims(out, 1);\n        }\n        return out;\n    });\n}\nclass Dot extends Merge {\n    constructor(args) {\n        super(args);\n        this.axes = args.axes;\n        this.normalize = args.normalize == null ? false : args.normalize;\n        this.supportsMasking = true;\n        this.reshapeRequired = false;\n    }\n    build(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0];\n        const shape2 = inputShape[1];\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        if (shape1[axes[0]] !== shape2[axes[1]]) {\n            throw new ValueError(`Dimension incompatibility: ` +\n                `${shape1[axes[0]]} !== ${shape2[axes[1]]}`);\n        }\n    }\n    mergeFunction(inputs) {\n        if (inputs.length !== 2) {\n            throw new ValueError('A `Dot` layer must be called on exactly 2 inputs, ' +\n                `but received ${inputs.length} input(s).`);\n        }\n        let x1 = inputs[0];\n        let x2 = inputs[1];\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            axes = [\n                interpretAxis(this.axes, x1.shape.length),\n                interpretAxis(this.axes, x2.shape.length)\n            ];\n        }\n        else {\n            axes = this.axes.map((axis, i) => interpretAxis(axis, inputs[i].shape.length));\n        }\n        if (this.normalize) {\n            x1 = l2Normalize(x1, axes[0]);\n            x2 = l2Normalize(x2, axes[1]);\n        }\n        return batchDot(x1, x2, axes);\n    }\n    interpretAxes(shape1, shape2) {\n        let axes;\n        if (!Array.isArray(this.axes)) {\n            // `this.axes` is a single integer.\n            axes = [\n                interpretAxis(this.axes, shape1.length),\n                interpretAxis(this.axes, shape2.length)\n            ];\n        }\n        else {\n            // `this.axes` is an Array of integers.\n            axes = this.axes;\n        }\n        return axes;\n    }\n    computeOutputShape(inputShape) {\n        tfc.util.assert(Array.isArray(inputShape) && inputShape.length === 2 &&\n            Array.isArray(inputShape[0]) && Array.isArray(inputShape[1]), () => 'A `Dot` layer should be called on a list of exactly 2 inputs.');\n        const shape1 = inputShape[0].slice();\n        const shape2 = inputShape[1].slice();\n        if (shape1.length > 3 || shape2.length > 3) {\n            throw new NotImplementedError('Dot layer does not support tensors of 4D or higher rank yet.');\n        }\n        const axes = this.interpretAxes(shape1, shape2);\n        shape1.splice(axes[0], 1);\n        shape2.splice(axes[1], 1);\n        shape2.splice(0, 1);\n        const outputShape = shape1.concat(shape2);\n        if (outputShape.length === 1) {\n            outputShape.push(1);\n        }\n        return outputShape;\n    }\n    computeMask(inputs, mask) {\n        return null;\n    }\n    getConfig() {\n        const config = {\n            'axes': this.axes,\n            'normalize': this.normalize\n        };\n        const baseConfig = super.getConfig();\n        Object.assign(config, baseConfig);\n        return config;\n    }\n}\n/** @nocollapse */\nDot.className = 'Dot';\nexport { Dot };\nserialization.registerClass(Dot);\n// TODO(cais): Add functional interfaces for the merge layers.\n//# sourceMappingURL=data:application/json;base64,"],"names":["Embedding","constructor","args","super","this","embeddings","DEFAULT_EMBEDDINGS_INITIALIZER","batchInputShape","inputShape","batchSize","inputLength","concat","inputDim","outputDim","embeddingsInitializer","embeddingsRegularizer","activityRegularizer","embeddingsConstraint","maskZero","supportsMasking","build","addWeight","dtype","built","warnOnIncompatibleInputShape","computeMask","inputs","mask","tidy","notEqual","zerosLike","computeOutputShape","inLens","length","i","k","s1","s2","call","kwargs","invokeCallHook","input","output","read","reshape","size","shape","getConfig","config","baseConfig","Object","assign","className","serialization","GaussianNoise","stddev","add","GaussianDropout","rate","noised","Math","sqrt","mul","AlphaDropout","noiseShape","_getNoiseShape","droppedInputs","alphaP","keptIdx","greaterEqual","randomUniform","a","b","x","Merge","mergeFunction","computeElementwiseOpOutputShape","shape1","shape2","outputShape","slice","j","push","JSON","stringify","Array","isArray","batchSizes","allRanks","map","indexOf","reshapeRequired","reshapedInputs","inputDims","rank","maxNDim","xNDim","transposed","xShape","newShape","xTransposed","dims","y","yNDim","yShape","every","m","Add","clone","Multiply","Average","Maximum","Minimum","Concatenate","DEFAULT_AXIS","axis","allNoneShape","shapeSet","shapeWithoutConcatAxis","splice","exists","util","inputShapes","allNullMasks","forEach","outputMasks","concatenatedMasks","interpretAxis","dim","Dot","axes","normalize","interpretAxes","x1","x2","axesArray","diff","out","diffShape","adjX","adjY","idx","squeezeAxes","batchDot"],"sourceRoot":""}