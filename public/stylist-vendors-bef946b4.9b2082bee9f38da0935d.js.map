{"version":3,"file":"stylist-vendors-bef946b4.9b2082bee9f38da0935d.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/base_side_effects.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/environment.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/flags.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/engine.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/device_util.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/browser_util.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Required side effectful code for tfjs-core\n// Set up Engine and ENV\nimport { getOrMakeEngine } from './engine';\ngetOrMakeEngine();\n// Register backend-agnostic flags.\nimport './flags';\n// Register platforms\nimport './platforms/platform_browser';\nimport './platforms/platform_node';\n// Set up OpHandler\nimport { buffer } from './ops/buffer';\nimport { cast } from './ops/cast';\nimport { clone } from './ops/clone';\nimport { print } from './ops/print';\nimport { setOpHandler } from './tensor';\nconst opHandler = {\n    buffer,\n    cast,\n    clone,\n    print\n};\nsetOpHandler(opHandler);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZV9zaWRlX2VmZmVjdHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL2Jhc2Vfc2lkZV9lZmZlY3RzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILDZDQUE2QztBQUU3Qyx3QkFBd0I7QUFDeEIsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLFVBQVUsQ0FBQztBQUN6QyxlQUFlLEVBQUUsQ0FBQztBQUVsQixtQ0FBbUM7QUFDbkMsT0FBTyxTQUFTLENBQUM7QUFDakIscUJBQXFCO0FBQ3JCLE9BQU8sOEJBQThCLENBQUM7QUFDdEMsT0FBTywyQkFBMkIsQ0FBQztBQUVuQyxtQkFBbUI7QUFDbkIsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLGNBQWMsQ0FBQztBQUNwQyxPQUFPLEVBQUMsSUFBSSxFQUFDLE1BQU0sWUFBWSxDQUFDO0FBQ2hDLE9BQU8sRUFBQyxLQUFLLEVBQUMsTUFBTSxhQUFhLENBQUM7QUFDbEMsT0FBTyxFQUFDLEtBQUssRUFBQyxNQUFNLGFBQWEsQ0FBQztBQUNsQyxPQUFPLEVBQVksWUFBWSxFQUFDLE1BQU0sVUFBVSxDQUFDO0FBQ2pELE1BQU0sU0FBUyxHQUFjO0lBQzNCLE1BQU07SUFDTixJQUFJO0lBQ0osS0FBSztJQUNMLEtBQUs7Q0FDTixDQUFDO0FBQ0YsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG4vLyBSZXF1aXJlZCBzaWRlIGVmZmVjdGZ1bCBjb2RlIGZvciB0ZmpzLWNvcmVcblxuLy8gU2V0IHVwIEVuZ2luZSBhbmQgRU5WXG5pbXBvcnQge2dldE9yTWFrZUVuZ2luZX0gZnJvbSAnLi9lbmdpbmUnO1xuZ2V0T3JNYWtlRW5naW5lKCk7XG5cbi8vIFJlZ2lzdGVyIGJhY2tlbmQtYWdub3N0aWMgZmxhZ3MuXG5pbXBvcnQgJy4vZmxhZ3MnO1xuLy8gUmVnaXN0ZXIgcGxhdGZvcm1zXG5pbXBvcnQgJy4vcGxhdGZvcm1zL3BsYXRmb3JtX2Jyb3dzZXInO1xuaW1wb3J0ICcuL3BsYXRmb3Jtcy9wbGF0Zm9ybV9ub2RlJztcblxuLy8gU2V0IHVwIE9wSGFuZGxlclxuaW1wb3J0IHtidWZmZXJ9IGZyb20gJy4vb3BzL2J1ZmZlcic7XG5pbXBvcnQge2Nhc3R9IGZyb20gJy4vb3BzL2Nhc3QnO1xuaW1wb3J0IHtjbG9uZX0gZnJvbSAnLi9vcHMvY2xvbmUnO1xuaW1wb3J0IHtwcmludH0gZnJvbSAnLi9vcHMvcHJpbnQnO1xuaW1wb3J0IHtPcEhhbmRsZXIsIHNldE9wSGFuZGxlcn0gZnJvbSAnLi90ZW5zb3InO1xuY29uc3Qgb3BIYW5kbGVyOiBPcEhhbmRsZXIgPSB7XG4gIGJ1ZmZlcixcbiAgY2FzdCxcbiAgY2xvbmUsXG4gIHByaW50XG59O1xuc2V0T3BIYW5kbGVyKG9wSGFuZGxlcik7XG4iXX0=","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { isPromise } from './util_base';\n// Expects flags from URL in the format ?tfjsflags=FLAG1:1,FLAG2:true.\nconst TENSORFLOWJS_FLAGS_PREFIX = 'tfjsflags';\n/**\n * The environment contains evaluated flags as well as the registered platform.\n * This is always used as a global singleton and can be retrieved with\n * `tf.env()`.\n *\n * @doc {heading: 'Environment'}\n */\nexport class Environment {\n    // tslint:disable-next-line: no-any\n    constructor(global) {\n        this.global = global;\n        this.flags = {};\n        this.flagRegistry = {};\n        this.urlFlags = {};\n        // Jasmine spies on this in 'environment_test.ts'\n        this.getQueryParams = getQueryParams;\n        this.populateURLFlags();\n    }\n    setPlatform(platformName, platform) {\n        if (this.platform != null) {\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Platform ${this.platformName} has already been set. ` +\n                    `Overwriting the platform with ${platformName}.`);\n            }\n        }\n        this.platformName = platformName;\n        this.platform = platform;\n    }\n    registerFlag(flagName, evaluationFn, setHook) {\n        this.flagRegistry[flagName] = { evaluationFn, setHook };\n        // Override the flag value from the URL. This has to happen here because\n        // the environment is initialized before flags get registered.\n        if (this.urlFlags[flagName] != null) {\n            const flagValue = this.urlFlags[flagName];\n            if (!(env().getBool('IS_TEST') || env().getBool('PROD'))) {\n                console.warn(`Setting feature override from URL ${flagName}: ${flagValue}.`);\n            }\n            this.set(flagName, flagValue);\n        }\n    }\n    async getAsync(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        this.flags[flagName] = await this.evaluateFlag(flagName);\n        return this.flags[flagName];\n    }\n    get(flagName) {\n        if (flagName in this.flags) {\n            return this.flags[flagName];\n        }\n        const flagValue = this.evaluateFlag(flagName);\n        if (isPromise(flagValue)) {\n            throw new Error(`Flag ${flagName} cannot be synchronously evaluated. ` +\n                `Please use getAsync() instead.`);\n        }\n        this.flags[flagName] = flagValue;\n        return this.flags[flagName];\n    }\n    getNumber(flagName) {\n        return this.get(flagName);\n    }\n    getBool(flagName) {\n        return this.get(flagName);\n    }\n    getString(flagName) {\n        return this.get(flagName);\n    }\n    getFlags() {\n        return this.flags;\n    }\n    // For backwards compatibility.\n    get features() {\n        return this.flags;\n    }\n    set(flagName, value) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot set flag ${flagName} as it has not been registered.`);\n        }\n        this.flags[flagName] = value;\n        if (this.flagRegistry[flagName].setHook != null) {\n            this.flagRegistry[flagName].setHook(value);\n        }\n    }\n    evaluateFlag(flagName) {\n        if (this.flagRegistry[flagName] == null) {\n            throw new Error(`Cannot evaluate flag '${flagName}': no evaluation function found.`);\n        }\n        return this.flagRegistry[flagName].evaluationFn();\n    }\n    setFlags(flags) {\n        this.flags = Object.assign({}, flags);\n    }\n    reset() {\n        this.flags = {};\n        this.urlFlags = {};\n        this.populateURLFlags();\n    }\n    populateURLFlags() {\n        if (typeof this.global === 'undefined' ||\n            typeof this.global.location === 'undefined' ||\n            typeof this.global.location.search === 'undefined') {\n            return;\n        }\n        const urlParams = this.getQueryParams(this.global.location.search);\n        if (TENSORFLOWJS_FLAGS_PREFIX in urlParams) {\n            const keyValues = urlParams[TENSORFLOWJS_FLAGS_PREFIX].split(',');\n            keyValues.forEach(keyValue => {\n                const [key, value] = keyValue.split(':');\n                this.urlFlags[key] = parseValue(key, value);\n            });\n        }\n    }\n}\nexport function getQueryParams(queryString) {\n    const params = {};\n    queryString.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g, (s, ...t) => {\n        decodeParam(params, t[0], t[1]);\n        return t.join('=');\n    });\n    return params;\n}\nfunction decodeParam(params, name, value) {\n    params[decodeURIComponent(name)] = decodeURIComponent(value || '');\n}\nfunction parseValue(flagName, value) {\n    const lowerCaseValue = value.toLowerCase();\n    if (lowerCaseValue === 'true' || lowerCaseValue === 'false') {\n        return lowerCaseValue === 'true';\n    }\n    else if (`${+lowerCaseValue}` === lowerCaseValue) {\n        return +lowerCaseValue;\n    }\n    else {\n        return value;\n    }\n}\n/**\n * Returns the current environment (a global singleton).\n *\n * The environment object contains the evaluated feature values as well as the\n * active platform.\n *\n * @doc {heading: 'Environment'}\n */\nexport function env() {\n    return ENV;\n}\nexport let ENV = null;\nexport function setEnvironmentGlobal(environment) {\n    ENV = environment;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport './engine';\nimport * as device_util from './device_util';\nimport { env } from './environment';\nconst ENV = env();\n/**\n * This file contains environment-related flag registrations.\n */\n/** Whether to enable debug mode. */\nENV.registerFlag('DEBUG', () => false, debugValue => {\n    if (debugValue) {\n        console.warn('Debugging mode is ON. The output of every math call will ' +\n            'be downloaded to CPU and checked for NaNs. ' +\n            'This significantly impacts performance.');\n    }\n});\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_BROWSER', () => device_util.isBrowser());\n/** Whether we are in a browser (as versus, say, node.js) environment. */\nENV.registerFlag('IS_NODE', () => (typeof process !== 'undefined') &&\n    (typeof process.versions !== 'undefined') &&\n    (typeof process.versions.node !== 'undefined'));\n/** Whether this browser is Chrome. */\nENV.registerFlag('IS_CHROME', () => typeof navigator !== 'undefined' && navigator != null &&\n    navigator.userAgent != null && /Chrome/.test(navigator.userAgent) &&\n    /Google Inc/.test(navigator.vendor));\n/** Whether this browser is Safari. */\nENV.registerFlag('IS_SAFARI', () => typeof navigator !== 'undefined' && navigator != null &&\n    navigator.userAgent != null && /Safari/.test(navigator.userAgent) &&\n    /Apple/.test(navigator.vendor));\n/**\n * True when the environment is \"production\" where we disable safety checks\n * to gain performance.\n */\nENV.registerFlag('PROD', () => false);\n/**\n * Whether to do sanity checks when inferring a shape from user-provided\n * values, used when creating a new tensor.\n */\nENV.registerFlag('TENSORLIKE_CHECK_SHAPE_CONSISTENCY', () => ENV.getBool('DEBUG'));\n/** Whether deprecation warnings are enabled. */\nENV.registerFlag('DEPRECATION_WARNINGS_ENABLED', () => true);\n/** True if running unit tests. */\nENV.registerFlag('IS_TEST', () => false);\n/** Whether to check computation result for errors. */\nENV.registerFlag('CHECK_COMPUTATION_FOR_ERRORS', () => ENV.getBool('DEBUG'));\n/** Whether the backend needs to wrap input to imageBitmap. */\nENV.registerFlag('WRAP_TO_IMAGEBITMAP', () => false);\n/** Whether to enable canvas2d willReadFrequently for GPU backends */\nENV.registerFlag('CANVAS2D_WILL_READ_FREQUENTLY_FOR_GPU', () => false);\n/** Whether to use setTimeoutCustom */\nENV.registerFlag('USE_SETTIMEOUTCUSTOM', () => false);\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmxhZ3MuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL2ZsYWdzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUNILE9BQU8sVUFBVSxDQUFDO0FBRWxCLE9BQU8sS0FBSyxXQUFXLE1BQU0sZUFBZSxDQUFDO0FBQzdDLE9BQU8sRUFBQyxHQUFHLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFFbEMsTUFBTSxHQUFHLEdBQUcsR0FBRyxFQUFFLENBQUM7QUFFbEI7O0dBRUc7QUFFSCxvQ0FBb0M7QUFDcEMsR0FBRyxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxFQUFFLFVBQVUsQ0FBQyxFQUFFO0lBQ2xELElBQUksVUFBVSxFQUFFO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FDUiwyREFBMkQ7WUFDM0QsNkNBQTZDO1lBQzdDLHlDQUF5QyxDQUFDLENBQUM7S0FDaEQ7QUFDSCxDQUFDLENBQUMsQ0FBQztBQUVILHlFQUF5RTtBQUN6RSxHQUFHLENBQUMsWUFBWSxDQUFDLFlBQVksRUFBRSxHQUFHLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztBQUU5RCx5RUFBeUU7QUFDekUsR0FBRyxDQUFDLFlBQVksQ0FDWixTQUFTLEVBQ1QsR0FBRyxFQUFFLENBQUMsQ0FBQyxPQUFPLE9BQU8sS0FBSyxXQUFXLENBQUM7SUFDbEMsQ0FBQyxPQUFPLE9BQU8sQ0FBQyxRQUFRLEtBQUssV0FBVyxDQUFDO0lBQ3pDLENBQUMsT0FBTyxPQUFPLENBQUMsUUFBUSxDQUFDLElBQUksS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDO0FBRXhELHNDQUFzQztBQUN0QyxHQUFHLENBQUMsWUFBWSxDQUNaLFdBQVcsRUFDWCxHQUFHLEVBQUUsQ0FBQyxPQUFPLFNBQVMsS0FBSyxXQUFXLElBQUksU0FBUyxJQUFJLElBQUk7SUFDdkQsU0FBUyxDQUFDLFNBQVMsSUFBSSxJQUFJLElBQUksUUFBUSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDO0lBQ2pFLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7QUFFN0Msc0NBQXNDO0FBQ3RDLEdBQUcsQ0FBQyxZQUFZLENBQ1osV0FBVyxFQUNYLEdBQUcsRUFBRSxDQUFDLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLElBQUksSUFBSTtJQUN2RCxTQUFTLENBQUMsU0FBUyxJQUFJLElBQUksSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUM7SUFDakUsT0FBTyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUN4Qzs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztBQUV0Qzs7O0dBR0c7QUFDSCxHQUFHLENBQUMsWUFBWSxDQUNaLG9DQUFvQyxFQUFFLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUV0RSxnREFBZ0Q7QUFDaEQsR0FBRyxDQUFDLFlBQVksQ0FBQyw4QkFBOEIsRUFBRSxHQUFHLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUU3RCxrQ0FBa0M7QUFDbEMsR0FBRyxDQUFDLFlBQVksQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7QUFFekMsc0RBQXNEO0FBQ3RELEdBQUcsQ0FBQyxZQUFZLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0FBRTdFLDhEQUE4RDtBQUM5RCxHQUFHLENBQUMsWUFBWSxDQUFDLHFCQUFxQixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXJELHFFQUFxRTtBQUNyRSxHQUFHLENBQUMsWUFBWSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBRXZFLHNDQUFzQztBQUN0QyxHQUFHLENBQUMsWUFBWSxDQUFDLHNCQUFzQixFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuaW1wb3J0ICcuL2VuZ2luZSc7XG5cbmltcG9ydCAqIGFzIGRldmljZV91dGlsIGZyb20gJy4vZGV2aWNlX3V0aWwnO1xuaW1wb3J0IHtlbnZ9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuXG5jb25zdCBFTlYgPSBlbnYoKTtcblxuLyoqXG4gKiBUaGlzIGZpbGUgY29udGFpbnMgZW52aXJvbm1lbnQtcmVsYXRlZCBmbGFnIHJlZ2lzdHJhdGlvbnMuXG4gKi9cblxuLyoqIFdoZXRoZXIgdG8gZW5hYmxlIGRlYnVnIG1vZGUuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdERUJVRycsICgpID0+IGZhbHNlLCBkZWJ1Z1ZhbHVlID0+IHtcbiAgaWYgKGRlYnVnVmFsdWUpIHtcbiAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICdEZWJ1Z2dpbmcgbW9kZSBpcyBPTi4gVGhlIG91dHB1dCBvZiBldmVyeSBtYXRoIGNhbGwgd2lsbCAnICtcbiAgICAgICAgJ2JlIGRvd25sb2FkZWQgdG8gQ1BVIGFuZCBjaGVja2VkIGZvciBOYU5zLiAnICtcbiAgICAgICAgJ1RoaXMgc2lnbmlmaWNhbnRseSBpbXBhY3RzIHBlcmZvcm1hbmNlLicpO1xuICB9XG59KTtcblxuLyoqIFdoZXRoZXIgd2UgYXJlIGluIGEgYnJvd3NlciAoYXMgdmVyc3VzLCBzYXksIG5vZGUuanMpIGVudmlyb25tZW50LiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnSVNfQlJPV1NFUicsICgpID0+IGRldmljZV91dGlsLmlzQnJvd3NlcigpKTtcblxuLyoqIFdoZXRoZXIgd2UgYXJlIGluIGEgYnJvd3NlciAoYXMgdmVyc3VzLCBzYXksIG5vZGUuanMpIGVudmlyb25tZW50LiAqL1xuRU5WLnJlZ2lzdGVyRmxhZyhcbiAgICAnSVNfTk9ERScsXG4gICAgKCkgPT4gKHR5cGVvZiBwcm9jZXNzICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgKHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgKHR5cGVvZiBwcm9jZXNzLnZlcnNpb25zLm5vZGUgIT09ICd1bmRlZmluZWQnKSk7XG5cbi8qKiBXaGV0aGVyIHRoaXMgYnJvd3NlciBpcyBDaHJvbWUuICovXG5FTlYucmVnaXN0ZXJGbGFnKFxuICAgICdJU19DSFJPTUUnLFxuICAgICgpID0+IHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvciAhPSBudWxsICYmXG4gICAgICAgIG5hdmlnYXRvci51c2VyQWdlbnQgIT0gbnVsbCAmJiAvQ2hyb21lLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpICYmXG4gICAgICAgIC9Hb29nbGUgSW5jLy50ZXN0KG5hdmlnYXRvci52ZW5kb3IpKTtcblxuLyoqIFdoZXRoZXIgdGhpcyBicm93c2VyIGlzIFNhZmFyaS4gKi9cbkVOVi5yZWdpc3RlckZsYWcoXG4gICAgJ0lTX1NBRkFSSScsXG4gICAgKCkgPT4gdHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yICE9IG51bGwgJiZcbiAgICAgICAgbmF2aWdhdG9yLnVzZXJBZ2VudCAhPSBudWxsICYmIC9TYWZhcmkvLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCkgJiZcbiAgICAgICAgL0FwcGxlLy50ZXN0KG5hdmlnYXRvci52ZW5kb3IpKTtcbi8qKlxuICogVHJ1ZSB3aGVuIHRoZSBlbnZpcm9ubWVudCBpcyBcInByb2R1Y3Rpb25cIiB3aGVyZSB3ZSBkaXNhYmxlIHNhZmV0eSBjaGVja3NcbiAqIHRvIGdhaW4gcGVyZm9ybWFuY2UuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ1BST0QnLCAoKSA9PiBmYWxzZSk7XG5cbi8qKlxuICogV2hldGhlciB0byBkbyBzYW5pdHkgY2hlY2tzIHdoZW4gaW5mZXJyaW5nIGEgc2hhcGUgZnJvbSB1c2VyLXByb3ZpZGVkXG4gKiB2YWx1ZXMsIHVzZWQgd2hlbiBjcmVhdGluZyBhIG5ldyB0ZW5zb3IuXG4gKi9cbkVOVi5yZWdpc3RlckZsYWcoXG4gICAgJ1RFTlNPUkxJS0VfQ0hFQ0tfU0hBUEVfQ09OU0lTVEVOQ1knLCAoKSA9PiBFTlYuZ2V0Qm9vbCgnREVCVUcnKSk7XG5cbi8qKiBXaGV0aGVyIGRlcHJlY2F0aW9uIHdhcm5pbmdzIGFyZSBlbmFibGVkLiAqL1xuRU5WLnJlZ2lzdGVyRmxhZygnREVQUkVDQVRJT05fV0FSTklOR1NfRU5BQkxFRCcsICgpID0+IHRydWUpO1xuXG4vKiogVHJ1ZSBpZiBydW5uaW5nIHVuaXQgdGVzdHMuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdJU19URVNUJywgKCkgPT4gZmFsc2UpO1xuXG4vKiogV2hldGhlciB0byBjaGVjayBjb21wdXRhdGlvbiByZXN1bHQgZm9yIGVycm9ycy4gKi9cbkVOVi5yZWdpc3RlckZsYWcoJ0NIRUNLX0NPTVBVVEFUSU9OX0ZPUl9FUlJPUlMnLCAoKSA9PiBFTlYuZ2V0Qm9vbCgnREVCVUcnKSk7XG5cbi8qKiBXaGV0aGVyIHRoZSBiYWNrZW5kIG5lZWRzIHRvIHdyYXAgaW5wdXQgdG8gaW1hZ2VCaXRtYXAuICovXG5FTlYucmVnaXN0ZXJGbGFnKCdXUkFQX1RPX0lNQUdFQklUTUFQJywgKCkgPT4gZmFsc2UpO1xuXG4vKiogV2hldGhlciB0byBlbmFibGUgY2FudmFzMmQgd2lsbFJlYWRGcmVxdWVudGx5IGZvciBHUFUgYmFja2VuZHMgKi9cbkVOVi5yZWdpc3RlckZsYWcoJ0NBTlZBUzJEX1dJTExfUkVBRF9GUkVRVUVOVExZX0ZPUl9HUFUnLCAoKSA9PiBmYWxzZSk7XG5cbi8qKiBXaGV0aGVyIHRvIHVzZSBzZXRUaW1lb3V0Q3VzdG9tICovXG5FTlYucmVnaXN0ZXJGbGFnKCdVU0VfU0VUVElNRU9VVENVU1RPTScsICgpID0+IGZhbHNlKTtcbiJdfQ==","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { KernelBackend } from './backends/backend';\nimport { Environment, setEnvironmentGlobal } from './environment';\nimport { getGlobalNamespace } from './global_util';\nimport { Add, Cast, Identity } from './kernel_names';\nimport { getGradient, getKernel, getKernelsForBackend } from './kernel_registry';\nimport * as log from './log';\nimport { Profiler } from './profiler';\nimport { backpropagateGradients, getFilteredNodesXToY } from './tape';\nimport { setTensorTracker, Tensor, Variable } from './tensor';\nimport { getTensorsInContainer } from './tensor_util';\nimport * as util from './util';\nimport { bytesFromStringArray, makeOnesTypedArray, now, sizeFromShape } from './util';\nfunction isRegisteredKernelInvocation(kernelInvocation) {\n    return kernelInvocation.kernelName != null;\n}\nclass EngineState {\n    constructor() {\n        // Public since optimizers will use it.\n        this.registeredVariables = {};\n        this.nextTapeNodeId = 0;\n        this.numBytes = 0;\n        this.numTensors = 0;\n        this.numStringTensors = 0;\n        this.numDataBuffers = 0;\n        // Number of nested tf.grad() statements when computing higher-order\n        // gradients. E.g. `1` for first-order gradients and `2` for second-order\n        // gradients. Used to track if the tape should be removed after a backprop.\n        this.gradientDepth = 0;\n        // Number of nested kernel calls. When kernel depth is greater than 1, we turn\n        // off the tape.\n        this.kernelDepth = 0;\n        this.scopeStack = [];\n        /**\n         * Keeps track of the number of data moves during a kernel execution. We\n         * maintain a stack since kernels can call other kernels, recursively.\n         */\n        this.numDataMovesStack = [];\n        this.nextScopeId = 0;\n        this.tensorInfo = new WeakMap();\n        this.profiling = false;\n        this.activeProfile = {\n            newBytes: 0,\n            newTensors: 0,\n            peakBytes: 0,\n            kernels: [],\n            result: null,\n            get kernelNames() {\n                return Array.from(new Set(this.kernels.map(k => k.name)));\n            }\n        };\n    }\n    dispose() {\n        for (const variableName in this.registeredVariables) {\n            this.registeredVariables[variableName].dispose();\n        }\n    }\n}\nclass Engine {\n    constructor(ENV) {\n        this.ENV = ENV;\n        this.registry = {};\n        this.registryFactory = {};\n        this.pendingBackendInitId = 0;\n        this.state = new EngineState();\n    }\n    async ready() {\n        if (this.pendingBackendInit != null) {\n            return this.pendingBackendInit.then(() => { });\n        }\n        if (this.backendInstance != null) {\n            return;\n        }\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const success = await this.initializeBackend(backendName).success;\n            if (success) {\n                await this.setBackend(backendName);\n                return;\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    get backend() {\n        if (this.pendingBackendInit != null) {\n            throw new Error(`Backend '${this.backendName}' has not yet been initialized. Make ` +\n                `sure to await tf.ready() or await tf.setBackend() before calling ` +\n                `other methods`);\n        }\n        if (this.backendInstance == null) {\n            const { name, asyncInit } = this.initializeBackendsAndReturnBest();\n            if (asyncInit) {\n                throw new Error(`The highest priority backend '${name}' has not yet been ` +\n                    `initialized. Make sure to await tf.ready() or ` +\n                    `await tf.setBackend() before calling other methods`);\n            }\n            this.setBackend(name);\n        }\n        return this.backendInstance;\n    }\n    backendNames() {\n        return Object.keys(this.registryFactory);\n    }\n    findBackend(backendName) {\n        if (!(backendName in this.registry)) {\n            // If the backend hasn't been initialized but we have a registry entry for\n            // it, initialize it and return it.\n            if (backendName in this.registryFactory) {\n                const { asyncInit } = this.initializeBackend(backendName);\n                if (asyncInit) {\n                    // Backend is not ready yet.\n                    return null;\n                }\n            }\n            else {\n                return null;\n            }\n        }\n        return this.registry[backendName];\n    }\n    findBackendFactory(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            return null;\n        }\n        return this.registryFactory[backendName].factory;\n    }\n    registerBackend(backendName, factory, priority = 1) {\n        if (backendName in this.registryFactory) {\n            log.warn(`${backendName} backend was already registered. ` +\n                `Reusing existing backend factory.`);\n            return false;\n        }\n        this.registryFactory[backendName] = { factory, priority };\n        return true;\n    }\n    async setBackend(backendName) {\n        if (this.registryFactory[backendName] == null) {\n            throw new Error(`Backend name '${backendName}' not found in registry`);\n        }\n        this.backendName = backendName;\n        if (this.registry[backendName] == null) {\n            this.backendInstance = null;\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            const result = asyncInit ? await success : success;\n            if (!result) {\n                return false;\n            }\n        }\n        this.backendInstance = this.registry[backendName];\n        this.setupRegisteredKernels();\n        // Reset the profiler.\n        this.profiler = new Profiler(this.backendInstance);\n        return true;\n    }\n    setupRegisteredKernels() {\n        const kernels = getKernelsForBackend(this.backendName);\n        kernels.forEach(kernel => {\n            if (kernel.setupFunc != null) {\n                kernel.setupFunc(this.backendInstance);\n            }\n        });\n    }\n    disposeRegisteredKernels(backendName) {\n        const kernels = getKernelsForBackend(backendName);\n        kernels.forEach(kernel => {\n            if (kernel.disposeFunc != null) {\n                kernel.disposeFunc(this.registry[backendName]);\n            }\n        });\n    }\n    /**\n     * Initializes a backend by looking up the backend name in the factory\n     * registry and calling the factory method. Returns a boolean representing\n     * whether the initialization of the backend succeeded. Throws an error if\n     * there is no backend in the factory registry.\n     */\n    initializeBackend(backendName) {\n        const registryFactoryEntry = this.registryFactory[backendName];\n        if (registryFactoryEntry == null) {\n            throw new Error(`Cannot initialize backend ${backendName}, no registration found.`);\n        }\n        try {\n            const backend = registryFactoryEntry.factory();\n            /* Test if the factory returns a promise.\n            Done in a more liberal way than\n            previous 'Promise.resolve(backend)===backend'\n            as we needed to account for custom Promise\n            implementations (e.g. Angular) */\n            if (backend && !(backend instanceof KernelBackend) &&\n                typeof backend.then === 'function') {\n                const promiseId = ++this.pendingBackendInitId;\n                const success = backend\n                    .then(backendInstance => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.registry[backendName] = backendInstance;\n                    this.pendingBackendInit = null;\n                    return true;\n                })\n                    .catch(err => {\n                    // Outdated promise. Another backend was set in the meantime.\n                    if (promiseId < this.pendingBackendInitId) {\n                        return false;\n                    }\n                    this.pendingBackendInit = null;\n                    log.warn(`Initialization of backend ${backendName} failed`);\n                    log.warn(err.stack || err.message);\n                    return false;\n                });\n                this.pendingBackendInit = success;\n                return { success, asyncInit: true };\n            }\n            else {\n                this.registry[backendName] = backend;\n                return { success: true, asyncInit: false };\n            }\n        }\n        catch (err) {\n            log.warn(`Initialization of backend ${backendName} failed`);\n            log.warn(err.stack || err.message);\n            return { success: false, asyncInit: false };\n        }\n    }\n    removeBackend(backendName) {\n        if (!(backendName in this.registryFactory)) {\n            throw new Error(`${backendName} backend not found in registry`);\n        }\n        if (this.backendName === backendName && this.pendingBackendInit != null) {\n            // There is a pending promise of the backend we want to remove. Make it\n            // obsolete.\n            this.pendingBackendInitId++;\n        }\n        if (backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        delete this.registryFactory[backendName];\n        // Unset the backend if it is active.\n        if (this.backendName === backendName) {\n            this.pendingBackendInit = null;\n            this.backendName = null;\n            this.backendInstance = null;\n        }\n    }\n    getSortedBackends() {\n        if (Object.keys(this.registryFactory).length === 0) {\n            throw new Error('No backend found in registry.');\n        }\n        return Object.keys(this.registryFactory).sort((a, b) => {\n            // Highest priority comes first.\n            return this.registryFactory[b].priority -\n                this.registryFactory[a].priority;\n        });\n    }\n    initializeBackendsAndReturnBest() {\n        const sortedBackends = this.getSortedBackends();\n        for (let i = 0; i < sortedBackends.length; i++) {\n            const backendName = sortedBackends[i];\n            const { success, asyncInit } = this.initializeBackend(backendName);\n            if (asyncInit || success) {\n                return { name: backendName, asyncInit };\n            }\n        }\n        throw new Error(`Could not initialize any backends, all backend initializations ` +\n            `failed.`);\n    }\n    moveData(backend, dataId) {\n        const info = this.state.tensorInfo.get(dataId);\n        const srcBackend = info.backend;\n        const values = this.readSync(dataId);\n        const refCount = srcBackend.refCount(dataId);\n        // Delete the tensor from the old backend and move it to the new\n        // backend.\n        srcBackend.disposeData(dataId, true);\n        info.backend = backend;\n        backend.move(dataId, values, info.shape, info.dtype, refCount);\n        if (this.shouldCheckForMemLeaks()) {\n            // Track the number of moves during a kernel execution to correctly\n            // detect memory leaks.\n            this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1]++;\n        }\n    }\n    tidy(nameOrFn, fn) {\n        let name = null;\n        if (fn == null) {\n            // Called with only 1 argument.\n            if (typeof nameOrFn !== 'function') {\n                throw new Error('Please provide a function to tidy()');\n            }\n            fn = nameOrFn;\n        }\n        else {\n            // Called with 2 arguments.\n            if (typeof nameOrFn !== 'string' && !(nameOrFn instanceof String)) {\n                throw new Error('When calling with two arguments, the first argument ' +\n                    'to tidy() must be a string');\n            }\n            if (typeof fn !== 'function') {\n                throw new Error('When calling with two arguments, the 2nd argument ' +\n                    'to tidy() must be a function');\n            }\n            name = nameOrFn;\n            // TODO(nsthorat,smilkov): Do operation logging and performance\n            // profiling.\n        }\n        let result;\n        return this.scopedRun(() => this.startScope(name), () => this.endScope(result), () => {\n            result = fn();\n            if (result instanceof Promise) {\n                console.error('Cannot return a Promise inside of tidy.');\n            }\n            return result;\n        });\n    }\n    scopedRun(start, end, f) {\n        start();\n        try {\n            const res = f();\n            end();\n            return res;\n        }\n        catch (ex) {\n            end();\n            throw ex;\n        }\n    }\n    nextTensorId() {\n        return Engine.nextTensorId++;\n    }\n    nextVariableId() {\n        return Engine.nextVariableId++;\n    }\n    /**\n     * This method is called instead of the public-facing tensor.clone() when\n     * saving a tensor for backwards pass. It makes sure to add the clone\n     * operation to the tape regardless of being called inside a kernel\n     * execution.\n     */\n    clone(x) {\n        const y = ENGINE.runKernel(Identity, { x });\n        const inputs = { x };\n        const grad = (dy) => ({\n            x: () => {\n                const dtype = 'float32';\n                const gradInputs = { x: dy };\n                const attrs = { dtype };\n                return ENGINE.runKernel(Cast, gradInputs, \n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                attrs);\n            }\n        });\n        const saved = [];\n        this.addTapeNode(this.state.activeScope.name, inputs, [y], grad, saved, {});\n        return y;\n    }\n    /**\n     * Execute a kernel with the given name and return the output tensor.\n     *\n     * @param kernelName The name of the kernel to execute.\n     * @param inputs A map of input names to tensors.\n     * @param attrs A map of attribute names to their values. An attribute is a\n     *     primitive (non-tensor) input to the kernel.\n     * @param inputsToSave A list of tensors, inputs to save for the backprop\n     *     computation.\n     * @param outputsToSave A list of booleans, specifying which output to save\n     *     for the backprop computation. These are booleans since the output\n     * tensors are not visible to the user.\n     */\n    runKernel(kernelName, inputs, attrs) {\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        const hasKernel = getKernel(kernelName, this.backendName) != null;\n        if (!hasKernel) {\n            throw new Error(`Kernel '${kernelName}' not registered for backend '${this.backendName}'`);\n        }\n        return this.runKernelFunc({ kernelName, inputs, attrs });\n    }\n    shouldCheckForMemLeaks() {\n        return this.ENV.getBool('IS_TEST');\n    }\n    checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos) {\n        const numDataIdsAfter = this.backend.numDataIds();\n        // Count the number of data ids associated with the result of the kernel.\n        let numOutputDataIds = 0;\n        outInfos.forEach(info => {\n            // Complex numbers allocate 3 data ids, one for 'real', one for\n            // 'imaginary', and one for the container that holds the former two.\n            numOutputDataIds += (info.dtype === 'complex64' ? 3 : 1);\n        });\n        // Account for the number of moves during kernel execution. A \"data move\"\n        // can happen in the middle of a kernel execution, placing a new (key,value)\n        // pair in the data storage. Since data moves have net zero effect (we\n        // always remove the data from the old backend), we have to cancel them out\n        // when detecting memory leaks.\n        const numMoves = this.state.numDataMovesStack[this.state.numDataMovesStack.length - 1];\n        const dataIdsLeaked = numDataIdsAfter - numDataIdsBefore - numOutputDataIds - numMoves;\n        if (dataIdsLeaked > 0) {\n            throw new Error(`Backend '${this.backendName}' has an internal memory leak ` +\n                `(${dataIdsLeaked} data ids) after running '${kernelName}'`);\n        }\n    }\n    /**\n     * Internal helper method to execute a kernel Func\n     *\n     * Use `runKernel` to execute kernels from outside of engine.\n     */\n    runKernelFunc(kernelParams) {\n        let outputs;\n        let saved = [];\n        const isTapeOn = this.isTapeOn();\n        const startingBytecount = this.state.numBytes;\n        const startingNumTensors = this.state.numTensors;\n        if (this.shouldCheckForMemLeaks()) {\n            this.state.numDataMovesStack.push(0);\n        }\n        let kernelFunc;\n        if (this.backendName == null) {\n            // backend has not been initialized yet (backend initialization is lazy\n            // can be deferred until an op/ kernel is run).\n            // The below getter has side effects that will try to initialize the\n            // backend and set properties like this.backendName\n            // tslint:disable-next-line: no-unused-expression\n            this.backend;\n        }\n        let out;\n        const kernelOrScopeName = isRegisteredKernelInvocation(kernelParams) ?\n            kernelParams.kernelName :\n            this.state.activeScope != null ? this.state.activeScope.name : '';\n        // Create the kernelFunc from either a registered kernel OR passed in\n        // forward/backward functions (used by custom grad). In this context a\n        // kernelFunc wraps a kernel implementation with some bookkeeping.\n        if (isRegisteredKernelInvocation(kernelParams)) {\n            const { kernelName, inputs, attrs } = kernelParams;\n            if (this.backendName == null) {\n                // backend has not been initialized yet (backend initialization is lazy\n                // can be deferred until an op/ kernel is run).\n                // The below getter has side effects that will try to initialize the\n                // backend and set properties like this.backendName\n                // tslint:disable-next-line: no-unused-expression\n                this.backend;\n            }\n            const kernel = getKernel(kernelName, this.backendName);\n            util.assert(kernel != null, () => `Cannot find registered kernel '${kernelName}' for backend '${this.backendName}'`);\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = kernel.kernelFunc({ inputs, attrs, backend: this.backend });\n                const outInfos = Array.isArray(out) ? out : [out];\n                if (this.shouldCheckForMemLeaks()) {\n                    this.checkKernelForMemLeak(kernelName, numDataIdsBefore, outInfos);\n                }\n                const outTensors = outInfos.map((outInfo) => {\n                    // todo (yassogba) remove this option (Tensor) when node backend\n                    // methods have been modularized and they all return tensorInfo.\n                    // TensorInfos do not have a rank attribute.\n                    if (outInfo.rank != null) {\n                        return outInfo;\n                    }\n                    return this.makeTensorFromTensorInfo(outInfo);\n                });\n                // Save any required inputs and outputs.\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since there would be no backprop for these tensors\n                // (which would otherwise dispose them).\n                if (isTapeOn) {\n                    const tensorsToSave = this.getTensorsForGradient(kernelName, inputs, outTensors);\n                    saved = this.saveTensorsForBackwardMode(tensorsToSave);\n                }\n                return outTensors;\n            };\n        }\n        else {\n            const { forwardFunc } = kernelParams;\n            // Running a customGrad op.\n            const saveFunc = (tensors) => {\n                // Do not save unless we are recording to the tape. Otherwise it would\n                // cause a mem leak since we would never run backprop, which disposes\n                // the kept tensors.\n                if (!isTapeOn) {\n                    return;\n                }\n                saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n            };\n            kernelFunc = () => {\n                const numDataIdsBefore = this.backend.numDataIds();\n                out = this.tidy(() => forwardFunc(this.backend, saveFunc));\n                const outs = (Array.isArray(out) ? out : [out]);\n                if (this.shouldCheckForMemLeaks()) {\n                    // Scope name is used to print a more helpful error message if needed.\n                    this.checkKernelForMemLeak(kernelOrScopeName, numDataIdsBefore, outs);\n                }\n                return outs;\n            };\n        }\n        //\n        // Run the kernelFunc. Optionally profiling it.\n        //\n        const { inputs, attrs } = kernelParams;\n        const backwardsFunc = isRegisteredKernelInvocation(kernelParams) ?\n            null :\n            kernelParams.backwardsFunc;\n        let kernelProfile;\n        this.scopedRun(\n        // Stop recording to a tape when running a kernel.\n        () => this.state.kernelDepth++, () => this.state.kernelDepth--, () => {\n            if (!this.ENV.getBool('DEBUG') && !this.state.profiling) {\n                outputs = kernelFunc();\n            }\n            else {\n                kernelProfile = this.profiler.profileKernel(kernelOrScopeName, inputs, () => kernelFunc());\n                if (this.ENV.getBool('DEBUG')) {\n                    this.profiler.logKernelProfile(kernelProfile);\n                }\n                outputs = kernelProfile.outputs;\n            }\n        });\n        if (isTapeOn) {\n            this.addTapeNode(kernelOrScopeName, inputs, outputs, backwardsFunc, saved, attrs);\n        }\n        if (this.state.profiling) {\n            this.state.activeProfile.kernels.push({\n                name: kernelOrScopeName,\n                bytesAdded: this.state.numBytes - startingBytecount,\n                totalBytesSnapshot: this.state.numBytes,\n                tensorsAdded: this.state.numTensors - startingNumTensors,\n                totalTensorsSnapshot: this.state.numTensors,\n                inputShapes: Object.keys(inputs).map(key => inputs[key] != null ? inputs[key].shape : null),\n                outputShapes: outputs.map(item => item.shape),\n                kernelTimeMs: kernelProfile.timeMs,\n                extraInfo: kernelProfile.extraInfo\n            });\n        }\n        return (Array.isArray(out) ? outputs : outputs[0]);\n    }\n    /**\n     * Saves tensors used in forward mode for use in backward mode.\n     *\n     * @param tensors the list of tensors to save.\n     */\n    saveTensorsForBackwardMode(tensors) {\n        const saved = tensors.map(tensor => this.keep(this.clone(tensor)));\n        return saved;\n    }\n    /**\n     * Returns a list of tensors to save for a given gradient calculation.\n     *\n     * @param kernelName name of kernel to look up gradient for.\n     * @param inputs a map of input tensors.\n     * @param outputs an array of output tensors from forward mode of kernel.\n     */\n    getTensorsForGradient(kernelName, inputs, outputs) {\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            const inputsToSave = gradConfig.inputsToSave || [];\n            const outputsToSave = gradConfig.outputsToSave || [];\n            // If saveAllInputs is true, all inputs will be saved. Otherwise, inputs\n            // specified in inputsToSave will be saved.\n            let inputTensorsToSave;\n            if (gradConfig.saveAllInputs) {\n                util.assert(Array.isArray(inputs), () => 'saveAllInputs is true, expected inputs to be an array.');\n                inputTensorsToSave = Object.keys(inputs).map((key) => inputs[key]);\n            }\n            else {\n                inputTensorsToSave = inputsToSave.map((inputName) => inputs[inputName]);\n            }\n            const outputTensorsToSave = outputs.filter((_, i) => outputsToSave[i]);\n            return inputTensorsToSave.concat(outputTensorsToSave);\n        }\n        // We return an empty list rather than throw an error because the kernel we\n        // are looking up may not actually be relevant to backproping through the\n        // overall function\n        //\n        // See 'does not error if irrelevant (pruned) ops are missing grads' test\n        // in gradients_test.ts for an example.\n        return [];\n    }\n    /**\n     * Internal method used by public APIs for tensor creation. Makes a new\n     * tensor with the provided shape, dtype and values. It always\n     * creates a new data id and writes the values to the underlying backend.\n     */\n    makeTensor(values, shape, dtype, backend) {\n        if (values == null) {\n            throw new Error('Values passed to engine.makeTensor() are null');\n        }\n        dtype = dtype || 'float32';\n        backend = backend || this.backend;\n        let backendVals = values;\n        if (dtype === 'string' && util.isString(values[0])) {\n            backendVals = values.map(d => util.encodeString(d));\n        }\n        const dataId = backend.write(backendVals, shape, dtype);\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        // Count bytes for string tensors.\n        if (dtype === 'string') {\n            const info = this.state.tensorInfo.get(dataId);\n            const newBytes = bytesFromStringArray(backendVals);\n            this.state.numBytes += newBytes - info.bytes;\n            info.bytes = newBytes;\n        }\n        return t;\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor\n     * that is a wrapper around an existing data id. It doesn't create\n     * a new data id, only increments the ref count used in memory tracking.\n     * @deprecated\n     */\n    makeTensorFromDataId(dataId, shape, dtype, backend) {\n        dtype = dtype || 'float32';\n        const tensorInfo = { dataId, shape, dtype };\n        return this.makeTensorFromTensorInfo(tensorInfo, backend);\n    }\n    /**\n     * Internal method used by backends. Makes a new tensor that is a wrapper\n     * around an existing data id in TensorInfo. It doesn't create a new data id,\n     * only increments the ref count used in memory tracking.\n     */\n    makeTensorFromTensorInfo(tensorInfo, backend) {\n        const { dataId, shape, dtype } = tensorInfo;\n        const t = new Tensor(shape, dtype, dataId, this.nextTensorId());\n        this.trackTensor(t, backend);\n        return t;\n    }\n    makeVariable(initialValue, trainable = true, name, dtype) {\n        name = name || this.nextVariableId().toString();\n        if (dtype != null && dtype !== initialValue.dtype) {\n            initialValue = initialValue.cast(dtype);\n        }\n        const v = new Variable(initialValue, trainable, name, this.nextTensorId());\n        if (this.state.registeredVariables[v.name] != null) {\n            throw new Error(`Variable with name ${v.name} was already registered`);\n        }\n        this.state.registeredVariables[v.name] = v;\n        this.incRef(v, this.backend);\n        return v;\n    }\n    trackTensor(a, backend) {\n        this.state.numTensors++;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors++;\n        }\n        // Bytes for complex numbers are counted by their components. Bytes for\n        // string tensors are counted when writing values.\n        let bytes = 0;\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            bytes = a.size * util.bytesPerElement(a.dtype);\n        }\n        this.state.numBytes += bytes;\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            this.state.numDataBuffers++;\n            this.state.tensorInfo.set(a.dataId, {\n                backend: backend || this.backend,\n                dtype: a.dtype,\n                shape: a.shape,\n                bytes\n            });\n        }\n        if (!(a instanceof Variable)) {\n            this.track(a);\n        }\n    }\n    // Track the tensor by dataId and increase the refCount for the dataId in the\n    // backend.\n    // TODO(pyu10055): This is currently used by makeVariable method, to increase\n    // refCount on the backend for the dataId. It can potentially be replaced with\n    // Identity op indead of calling backend directly.\n    incRef(a, backend) {\n        this.trackTensor(a, backend);\n        this.backend.incRef(a.dataId);\n    }\n    removeDataId(dataId, backend) {\n        if (this.state.tensorInfo.has(dataId) &&\n            this.state.tensorInfo.get(dataId).backend === backend) {\n            this.state.tensorInfo.delete(dataId);\n            this.state.numDataBuffers--;\n        }\n    }\n    disposeTensor(a) {\n        if (!this.state.tensorInfo.has(a.dataId)) {\n            return;\n        }\n        const info = this.state.tensorInfo.get(a.dataId);\n        this.state.numTensors--;\n        if (a.dtype === 'string') {\n            this.state.numStringTensors--;\n            this.state.numBytes -= info.bytes;\n        }\n        // Don't count bytes for complex numbers as they are counted by their\n        // components.\n        if (a.dtype !== 'complex64' && a.dtype !== 'string') {\n            const bytes = a.size * util.bytesPerElement(a.dtype);\n            this.state.numBytes -= bytes;\n        }\n        // Remove the reference to dataId if backend dispose the data successfully\n        if (info.backend.disposeData(a.dataId)) {\n            this.removeDataId(a.dataId, info.backend);\n        }\n        // TODO(nsthorat): Construct an error and save the stack trace for\n        // debugging when in debug mode. Creating a stack trace is too expensive\n        // to do unconditionally.\n    }\n    disposeVariables() {\n        for (const varName in this.state.registeredVariables) {\n            const v = this.state.registeredVariables[varName];\n            this.disposeVariable(v);\n        }\n    }\n    disposeVariable(v) {\n        this.disposeTensor(v);\n        if (this.state.registeredVariables[v.name] != null) {\n            delete this.state.registeredVariables[v.name];\n        }\n    }\n    memory() {\n        const info = this.backend.memory();\n        info.numTensors = this.state.numTensors;\n        info.numDataBuffers = this.state.numDataBuffers;\n        info.numBytes = this.state.numBytes;\n        if (this.state.numStringTensors > 0) {\n            info.unreliable = true;\n            if (info.reasons == null) {\n                info.reasons = [];\n            }\n            info.reasons.push('Memory usage by string tensors is approximate ' +\n                '(2 bytes per character)');\n        }\n        return info;\n    }\n    async profile(query) {\n        this.state.profiling = true;\n        const startBytes = this.state.numBytes;\n        const startNumTensors = this.state.numTensors;\n        this.state.activeProfile.kernels = [];\n        this.state.activeProfile.result = await query();\n        this.state.profiling = false;\n        this.state.activeProfile.peakBytes = Math.max(...this.state.activeProfile.kernels.map(d => d.totalBytesSnapshot));\n        this.state.activeProfile.newBytes = this.state.numBytes - startBytes;\n        this.state.activeProfile.newTensors =\n            this.state.numTensors - startNumTensors;\n        for (const kernel of this.state.activeProfile.kernels) {\n            kernel.kernelTimeMs = await kernel.kernelTimeMs;\n            kernel.extraInfo = await kernel.extraInfo;\n        }\n        return this.state.activeProfile;\n    }\n    isTapeOn() {\n        return this.state.gradientDepth > 0 && this.state.kernelDepth === 0;\n    }\n    addTapeNode(kernelName, inputs, outputs, gradientsFunc, saved, attrs) {\n        const tapeNode = { id: this.state.nextTapeNodeId++, kernelName, inputs, outputs, saved };\n        const gradConfig = getGradient(kernelName);\n        if (gradConfig != null) {\n            gradientsFunc = gradConfig.gradFunc;\n        }\n        if (gradientsFunc != null) {\n            tapeNode.gradient = (dys) => {\n                // TODO(smilkov): To optimize back-prop, pass dys that are not used in\n                // the backprop graph to the user as null instead of zeros\n                dys = dys.map((dy, i) => {\n                    if (dy == null) {\n                        const output = outputs[i];\n                        const vals = util.makeZerosTypedArray(output.size, output.dtype);\n                        return this.makeTensor(vals, output.shape, output.dtype);\n                    }\n                    return dy;\n                });\n                // Grad functions of ops with single outputs expect a dy, while ops\n                // with multiple outputs expect dys (array of dy).\n                return gradientsFunc(dys.length > 1 ? dys : dys[0], saved, attrs);\n            };\n        }\n        this.state.activeTape.push(tapeNode);\n    }\n    keep(result) {\n        result.kept = true;\n        return result;\n    }\n    startTape() {\n        if (this.state.gradientDepth === 0) {\n            this.state.activeTape = [];\n        }\n        this.state.gradientDepth++;\n    }\n    endTape() {\n        this.state.gradientDepth--;\n    }\n    /**\n     * Start a scope. Use this with endScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    startScope(name) {\n        const scopeInfo = {\n            track: [],\n            name: 'unnamed scope',\n            id: this.state.nextScopeId++\n        };\n        if (name) {\n            scopeInfo.name = name;\n        }\n        this.state.scopeStack.push(scopeInfo);\n        this.state.activeScope = scopeInfo;\n    }\n    /**\n     * End a scope. Use this with startScope() to achieve the same functionality\n     * as scope() without the need for a function closure.\n     */\n    endScope(result) {\n        const tensorsToTrackInParent = getTensorsInContainer(result);\n        const tensorsToTrackInParentSet = new Set(tensorsToTrackInParent.map(t => t.id));\n        // Dispose the arrays tracked in this scope.\n        for (let i = 0; i < this.state.activeScope.track.length; i++) {\n            const tensor = this.state.activeScope.track[i];\n            if (!tensor.kept && !tensorsToTrackInParentSet.has(tensor.id)) {\n                tensor.dispose();\n            }\n        }\n        const oldScope = this.state.scopeStack.pop();\n        this.state.activeScope = this.state.scopeStack.length === 0 ?\n            null :\n            this.state.scopeStack[this.state.scopeStack.length - 1];\n        // Track the current result in the parent scope.\n        tensorsToTrackInParent.forEach(tensor => {\n            // Only track the tensor if was allocated in the inner scope and is not\n            // globally kept.\n            if (!tensor.kept && tensor.scopeId === oldScope.id) {\n                this.track(tensor);\n            }\n        });\n    }\n    /**\n     * Returns gradients of `f` with respect to each of the `xs`. The gradients\n     * returned are of the same length as `xs`, but some might be null if `f`\n     * was not a function of that `x`. It also takes optional dy to multiply the\n     * gradient, which defaults to `1`.\n     */\n    gradients(f, xs, dy, allowNoGradients = false) {\n        util.assert(xs.length > 0, () => 'gradients() received an empty list of xs.');\n        if (dy != null && dy.dtype !== 'float32') {\n            throw new Error(`dy must have 'float32' dtype, but has '${dy.dtype}'`);\n        }\n        const y = this.scopedRun(() => this.startTape(), () => this.endTape(), () => this.tidy('forward', f));\n        util.assert(y instanceof Tensor, () => 'The result y returned by f() must be a tensor.');\n        // Filter out the nodes that don't connect x => y.\n        const filteredTape = getFilteredNodesXToY(this.state.activeTape, xs, y);\n        if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n            throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' +\n                'that the f you passed encloses all operations that lead from x ' +\n                'to y.');\n        }\n        return this.tidy('backward', () => {\n            const accumulatedGradientMap = {};\n            accumulatedGradientMap[y.id] = (dy == null) ? ones(y.shape) : dy;\n            // Backprop gradients through the filtered nodes.\n            backpropagateGradients(accumulatedGradientMap, filteredTape, \n            // Pass the tidy function to avoid circular dep with `tape.ts`.\n            f => this.tidy(f), \n            // Pass an add function to avoide a circular dep with `tape.ts`.\n            add);\n            const grads = xs.map(x => accumulatedGradientMap[x.id]);\n            if (this.state.gradientDepth === 0) {\n                // This means that we are not computing higher-order gradients\n                // and can clean up the tape.\n                this.state.activeTape.forEach(node => {\n                    for (const tensor of node.saved) {\n                        tensor.dispose();\n                    }\n                });\n                this.state.activeTape = null;\n            }\n            return { value: y, grads };\n        });\n    }\n    customGrad(f) {\n        util.assert(util.isFunction(f), () => 'The f passed in customGrad(f) must be a function.');\n        return (...inputs) => {\n            util.assert(inputs.every(t => t instanceof Tensor), () => 'The args passed in customGrad(f)(x1, x2,...) must all be ' +\n                'tensors');\n            let res;\n            const inputMap = {};\n            inputs.forEach((input, i) => {\n                inputMap[i] = input;\n            });\n            const forwardFunc = (_, save) => {\n                res = f(...[...inputs, save]);\n                util.assert(res.value instanceof Tensor, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.value` is a tensor');\n                util.assert(util.isFunction(res.gradFunc), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function.');\n                return res.value;\n            };\n            const backwardsFunc = (dy, saved) => {\n                const gradRes = res.gradFunc(dy, saved);\n                const grads = Array.isArray(gradRes) ? gradRes : [gradRes];\n                util.assert(grads.length === inputs.length, () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'the same number of tensors as inputs passed to f(...).');\n                util.assert(grads.every(t => t instanceof Tensor), () => 'The function f passed in customGrad(f) must return an ' +\n                    'object where `obj.gradFunc` is a function that returns ' +\n                    'a list of only tensors.');\n                const gradMap = {};\n                grads.forEach((grad, i) => {\n                    gradMap[i] = () => grad;\n                });\n                return gradMap;\n            };\n            return this.runKernelFunc({\n                forwardFunc,\n                backwardsFunc,\n                inputs: inputMap,\n            });\n        };\n    }\n    readSync(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readSync(dataId);\n    }\n    read(dataId) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.read(dataId);\n    }\n    readToGPU(dataId, options) {\n        // Route the read to the correct backend.\n        const info = this.state.tensorInfo.get(dataId);\n        return info.backend.readToGPU(dataId, options);\n    }\n    async time(query) {\n        const start = now();\n        const timingInfo = await this.backend.time(query);\n        timingInfo.wallMs = now() - start;\n        return timingInfo;\n    }\n    /**\n     * Tracks a Tensor in the current scope to be automatically cleaned up\n     * when the current scope ends, and returns the value.\n     *\n     * @param result The Tensor to track in the current scope.\n     */\n    track(result) {\n        if (this.state.activeScope != null) {\n            result.scopeId = this.state.activeScope.id;\n            this.state.activeScope.track.push(result);\n        }\n        return result;\n    }\n    get registeredVariables() {\n        return this.state.registeredVariables;\n    }\n    /**\n     * Resets the engine state. Removes all backends but does not remove\n     * registered backend factories.\n     */\n    reset() {\n        // Make any pending promise obsolete.\n        this.pendingBackendInitId++;\n        this.state.dispose();\n        this.ENV.reset();\n        this.state = new EngineState();\n        for (const backendName in this.registry) {\n            this.disposeRegisteredKernels(backendName);\n            this.registry[backendName].dispose();\n            delete this.registry[backendName];\n        }\n        this.backendName = null;\n        this.backendInstance = null;\n        this.pendingBackendInit = null;\n    }\n}\nEngine.nextTensorId = 0;\nEngine.nextVariableId = 0;\nexport { Engine };\nfunction ones(shape) {\n    const values = makeOnesTypedArray(sizeFromShape(shape), 'float32');\n    return ENGINE.makeTensor(values, shape, 'float32');\n}\nexport function getOrMakeEngine() {\n    const ns = getGlobalNamespace();\n    if (ns._tfengine == null) {\n        const environment = new Environment(ns);\n        ns._tfengine = new Engine(environment);\n    }\n    setEnvironmentGlobal(ns._tfengine.ENV);\n    // Tell the current tensor interface that the global engine is responsible\n    // for tracking.\n    setTensorTracker(() => ns._tfengine);\n    return ns._tfengine;\n}\nexport const ENGINE = getOrMakeEngine();\n/**\n * A implementation of the add op for use within engine and tape.\n *\n * This allows us to avoid a circular dependency between add.ts and engine.\n * It is exported to be available in tape tests.\n */\nexport function add(a, b) {\n    // We duplicate Add here to avoid a circular dependency with add.ts.\n    const inputs = { a, b };\n    return ENGINE.runKernel(Add, inputs);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// tslint:disable-next-line:no-any\nfunction _isNavigatorDefined() {\n    return typeof navigator !== 'undefined' && navigator != null;\n}\nlet isMobileMockValue;\nexport function mockIsMobile(value) {\n    isMobileMockValue = value;\n}\nexport function isMobile(nav) {\n    if (isMobileMockValue !== undefined) {\n        return isMobileMockValue;\n    }\n    if (nav || _isNavigatorDefined()) {\n        if (!nav) {\n            nav = navigator;\n        }\n        if (nav.product === 'ReactNative') {\n            return true;\n        }\n        const a = nav.userAgent || nav.vendor ||\n            // tslint:disable-next-line:no-any\n            (typeof window !== 'undefined' ? window.opera : '');\n        // Use `navigator.userAgentData.mobile` as fallback.\n        if (!a) {\n            // tslint:disable-next-line:no-any\n            const navAny = nav;\n            return navAny.userAgentData && navAny.userAgentData.mobile;\n        }\n        // tslint:disable-next-line:max-line-length\n        return /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i\n            .test(a) ||\n            // tslint:disable-next-line:max-line-length\n            /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i\n                .test(a.substr(0, 4));\n    }\n    return false;\n}\nexport function isBrowser() {\n    return (typeof window !== 'undefined' && window.document != null) ||\n        //@ts-ignore\n        (typeof WorkerGlobalScope !== 'undefined');\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGV2aWNlX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL2RldmljZV91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILGtDQUFrQztBQUNsQyxTQUFTLG1CQUFtQjtJQUMxQixPQUFPLE9BQU8sU0FBUyxLQUFLLFdBQVcsSUFBSSxTQUFTLElBQUksSUFBSSxDQUFDO0FBQy9ELENBQUM7QUFFRCxJQUFJLGlCQUFvQyxDQUFDO0FBRXpDLE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBd0I7SUFDbkQsaUJBQWlCLEdBQUcsS0FBSyxDQUFDO0FBQzVCLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQWU7SUFDdEMsSUFBSSxpQkFBaUIsS0FBSyxTQUFTLEVBQUU7UUFDbkMsT0FBTyxpQkFBaUIsQ0FBQztLQUMxQjtJQUNELElBQUksR0FBRyxJQUFJLG1CQUFtQixFQUFFLEVBQUU7UUFDaEMsSUFBSSxDQUFDLEdBQUcsRUFBRTtZQUNSLEdBQUcsR0FBRyxTQUFTLENBQUM7U0FDakI7UUFDRCxJQUFJLEdBQUcsQ0FBQyxPQUFPLEtBQUssYUFBYSxFQUFFO1lBQ2pDLE9BQU8sSUFBSSxDQUFDO1NBQ2I7UUFFRCxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsU0FBUyxJQUFJLEdBQUcsQ0FBQyxNQUFNO1lBQ2pDLGtDQUFrQztZQUNsQyxDQUFDLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUUsTUFBYyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakUsb0RBQW9EO1FBQ3BELElBQUksQ0FBQyxDQUFDLEVBQUU7WUFDTixrQ0FBa0M7WUFDbEMsTUFBTSxNQUFNLEdBQUcsR0FBVSxDQUFDO1lBQzFCLE9BQU8sTUFBTSxDQUFDLGFBQWEsSUFBSSxNQUFNLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQztTQUM1RDtRQUNELDJDQUEyQztRQUMzQyxPQUFPLDBUQUEwVDthQUNyVCxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBQ2YsMkNBQTJDO1lBQzNDLHlrREFBeWtEO2lCQUNwa0QsSUFBSSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDL0I7SUFDRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUFFRCxNQUFNLFVBQVUsU0FBUztJQUN2QixPQUFPLENBQUMsT0FBTyxNQUFNLEtBQUssV0FBVyxJQUFJLE1BQU0sQ0FBQyxRQUFRLElBQUksSUFBSSxDQUFDO1FBQzdELFlBQVk7UUFDWixDQUFDLE9BQU8saUJBQWlCLEtBQUssV0FBVyxDQUFDLENBQUM7QUFDakQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuZnVuY3Rpb24gX2lzTmF2aWdhdG9yRGVmaW5lZCgpOiBib29sZWFuIHtcbiAgcmV0dXJuIHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvciAhPSBudWxsO1xufVxuXG5sZXQgaXNNb2JpbGVNb2NrVmFsdWU6IGJvb2xlYW58dW5kZWZpbmVkO1xuXG5leHBvcnQgZnVuY3Rpb24gbW9ja0lzTW9iaWxlKHZhbHVlOiBib29sZWFufHVuZGVmaW5lZCkge1xuICBpc01vYmlsZU1vY2tWYWx1ZSA9IHZhbHVlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNNb2JpbGUobmF2PzogTmF2aWdhdG9yKTogYm9vbGVhbiB7XG4gIGlmIChpc01vYmlsZU1vY2tWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGlzTW9iaWxlTW9ja1ZhbHVlO1xuICB9XG4gIGlmIChuYXYgfHwgX2lzTmF2aWdhdG9yRGVmaW5lZCgpKSB7XG4gICAgaWYgKCFuYXYpIHtcbiAgICAgIG5hdiA9IG5hdmlnYXRvcjtcbiAgICB9XG4gICAgaWYgKG5hdi5wcm9kdWN0ID09PSAnUmVhY3ROYXRpdmUnKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBjb25zdCBhID0gbmF2LnVzZXJBZ2VudCB8fCBuYXYudmVuZG9yIHx8XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICAgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnID8gKHdpbmRvdyBhcyBhbnkpLm9wZXJhIDogJycpO1xuICAgIC8vIFVzZSBgbmF2aWdhdG9yLnVzZXJBZ2VudERhdGEubW9iaWxlYCBhcyBmYWxsYmFjay5cbiAgICBpZiAoIWEpIHtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgIGNvbnN0IG5hdkFueSA9IG5hdiBhcyBhbnk7XG4gICAgICByZXR1cm4gbmF2QW55LnVzZXJBZ2VudERhdGEgJiYgbmF2QW55LnVzZXJBZ2VudERhdGEubW9iaWxlO1xuICAgIH1cbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bWF4LWxpbmUtbGVuZ3RoXG4gICAgcmV0dXJuIC8oYW5kcm9pZHxiYlxcZCt8bWVlZ28pLittb2JpbGV8YXZhbnRnb3xiYWRhXFwvfGJsYWNrYmVycnl8YmxhemVyfGNvbXBhbHxlbGFpbmV8ZmVubmVjfGhpcHRvcHxpZW1vYmlsZXxpcChob25lfG9kKXxpcmlzfGtpbmRsZXxsZ2UgfG1hZW1vfG1pZHB8bW1wfG1vYmlsZS4rZmlyZWZveHxuZXRmcm9udHxvcGVyYSBtKG9ifGluKWl8cGFsbSggb3MpP3xwaG9uZXxwKGl4aXxyZSlcXC98cGx1Y2tlcnxwb2NrZXR8cHNwfHNlcmllcyg0fDYpMHxzeW1iaWFufHRyZW98dXBcXC4oYnJvd3NlcnxsaW5rKXx2b2RhZm9uZXx3YXB8d2luZG93cyBjZXx4ZGF8eGlpbm8vaVxuICAgICAgICAgICAgICAgLnRlc3QoYSkgfHxcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm1heC1saW5lLWxlbmd0aFxuICAgICAgICAvMTIwN3w2MzEwfDY1OTB8M2dzb3w0dGhwfDUwWzEtNl1pfDc3MHN8ODAyc3xhIHdhfGFiYWN8YWMoZXJ8b298c1xcLSl8YWkoa298cm4pfGFsKGF2fGNhfGNvKXxhbW9pfGFuKGV4fG55fHl3KXxhcHR1fGFyKGNofGdvKXxhcyh0ZXx1cyl8YXR0d3xhdShkaXxcXC1tfHIgfHMgKXxhdmFufGJlKGNrfGxsfG5xKXxiaShsYnxyZCl8YmwoYWN8YXopfGJyKGV8dil3fGJ1bWJ8YndcXC0obnx1KXxjNTVcXC98Y2FwaXxjY3dhfGNkbVxcLXxjZWxsfGNodG18Y2xkY3xjbWRcXC18Y28obXB8bmQpfGNyYXd8ZGEoaXR8bGx8bmcpfGRidGV8ZGNcXC1zfGRldml8ZGljYXxkbW9ifGRvKGN8cClvfGRzKDEyfFxcLWQpfGVsKDQ5fGFpKXxlbShsMnx1bCl8ZXIoaWN8azApfGVzbDh8ZXooWzQtN10wfG9zfHdhfHplKXxmZXRjfGZseShcXC18Xyl8ZzEgdXxnNTYwfGdlbmV8Z2ZcXC01fGdcXC1tb3xnbyhcXC53fG9kKXxncihhZHx1bil8aGFpZXxoY2l0fGhkXFwtKG18cHx0KXxoZWlcXC18aGkocHR8dGEpfGhwKCBpfGlwKXxoc1xcLWN8aHQoYyhcXC18IHxffGF8Z3xwfHN8dCl8dHApfGh1KGF3fHRjKXxpXFwtKDIwfGdvfG1hKXxpMjMwfGlhYyggfFxcLXxcXC8pfGlicm98aWRlYXxpZzAxfGlrb218aW0xa3xpbm5vfGlwYXF8aXJpc3xqYSh0fHYpYXxqYnJvfGplbXV8amlnc3xrZGRpfGtlaml8a2d0KCB8XFwvKXxrbG9ufGtwdCB8a3djXFwtfGt5byhjfGspfGxlKG5vfHhpKXxsZyggZ3xcXC8oa3xsfHUpfDUwfDU0fFxcLVthLXddKXxsaWJ3fGx5bnh8bTFcXC13fG0zZ2F8bTUwXFwvfG1hKHRlfHVpfHhvKXxtYygwMXwyMXxjYSl8bVxcLWNyfG1lKHJjfHJpKXxtaShvOHxvYXx0cyl8bW1lZnxtbygwMXwwMnxiaXxkZXxkb3x0KFxcLXwgfG98dil8enopfG10KDUwfHAxfHYgKXxtd2JwfG15d2F8bjEwWzAtMl18bjIwWzItM118bjMwKDB8Mil8bjUwKDB8Mnw1KXxuNygwKDB8MSl8MTApfG5lKChjfG0pXFwtfG9ufHRmfHdmfHdnfHd0KXxub2soNnxpKXxuenBofG8yaW18b3AodGl8d3YpfG9yYW58b3dnMXxwODAwfHBhbihhfGR8dCl8cGR4Z3xwZygxM3xcXC0oWzEtOF18YykpfHBoaWx8cGlyZXxwbChheXx1Yyl8cG5cXC0yfHBvKGNrfHJ0fHNlKXxwcm94fHBzaW98cHRcXC1nfHFhXFwtYXxxYygwN3wxMnwyMXwzMnw2MHxcXC1bMi03XXxpXFwtKXxxdGVrfHIzODB8cjYwMHxyYWtzfHJpbTl8cm8odmV8em8pfHM1NVxcL3xzYShnZXxtYXxtbXxtc3xueXx2YSl8c2MoMDF8aFxcLXxvb3xwXFwtKXxzZGtcXC98c2UoYyhcXC18MHwxKXw0N3xtY3xuZHxyaSl8c2doXFwtfHNoYXJ8c2llKFxcLXxtKXxza1xcLTB8c2woNDV8aWQpfHNtKGFsfGFyfGIzfGl0fHQ1KXxzbyhmdHxueSl8c3AoMDF8aFxcLXx2XFwtfHYgKXxzeSgwMXxtYil8dDIoMTh8NTApfHQ2KDAwfDEwfDE4KXx0YShndHxsayl8dGNsXFwtfHRkZ1xcLXx0ZWwoaXxtKXx0aW1cXC18dFxcLW1vfHRvKHBsfHNoKXx0cyg3MHxtXFwtfG0zfG01KXx0eFxcLTl8dXAoXFwuYnxnMXxzaSl8dXRzdHx2NDAwfHY3NTB8dmVyaXx2aShyZ3x0ZSl8dmsoNDB8NVswLTNdfFxcLXYpfHZtNDB8dm9kYXx2dWxjfHZ4KDUyfDUzfDYwfDYxfDcwfDgwfDgxfDgzfDg1fDk4KXx3M2MoXFwtfCApfHdlYmN8d2hpdHx3aShnIHxuY3xudyl8d21sYnx3b251fHg3MDB8eWFzXFwtfHlvdXJ8emV0b3x6dGVcXC0vaVxuICAgICAgICAgICAgLnRlc3QoYS5zdWJzdHIoMCwgNCkpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnJvd3NlcigpOiBib29sZWFuIHtcbiAgcmV0dXJuICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgIT0gbnVsbCkgfHxcbiAgICAgIC8vQHRzLWlnbm9yZVxuICAgICAgKHR5cGVvZiBXb3JrZXJHbG9iYWxTY29wZSAhPT0gJ3VuZGVmaW5lZCcpO1xufVxuIl19","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nconst delayCallback = (() => {\n    if (typeof requestAnimationFrame !== 'undefined') {\n        return requestAnimationFrame;\n    }\n    else if (typeof setImmediate !== 'undefined') {\n        return setImmediate;\n    }\n    return (f) => f(); // no delays\n})();\n/**\n * Returns a promise that resolves when a requestAnimationFrame has completed.\n *\n * On Node.js this uses setImmediate instead of requestAnimationFrame.\n *\n * This is simply a sugar method so that users can do the following:\n * `await tf.nextFrame();`\n *\n * @doc {heading: 'Performance', subheading: 'Timing'}\n */\nfunction nextFrame() {\n    return new Promise(resolve => delayCallback(() => resolve()));\n}\nexport { nextFrame };\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJvd3Nlcl91dGlsLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vdGZqcy1jb3JlL3NyYy9icm93c2VyX3V0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7Ozs7OztHQWVHO0FBRUgsTUFBTSxhQUFhLEdBQWEsQ0FBQyxHQUFHLEVBQUU7SUFDcEMsSUFBSSxPQUFPLHFCQUFxQixLQUFLLFdBQVcsRUFBRTtRQUNoRCxPQUFPLHFCQUFxQixDQUFDO0tBQzlCO1NBQU0sSUFBSSxPQUFPLFlBQVksS0FBSyxXQUFXLEVBQUU7UUFDOUMsT0FBTyxZQUFZLENBQUM7S0FDckI7SUFDRCxPQUFPLENBQUMsQ0FBVyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFFLFlBQVk7QUFDNUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztBQUVMOzs7Ozs7Ozs7R0FTRztBQUNILFNBQVMsU0FBUztJQUNoQixPQUFPLElBQUksT0FBTyxDQUFPLE9BQU8sQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztBQUN0RSxDQUFDO0FBRUQsT0FBTyxFQUFDLFNBQVMsRUFBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXG4gKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbiAqXG4gKiBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbiAqXG4gKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cbiAqIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmRcbiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuICogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqL1xuXG5jb25zdCBkZWxheUNhbGxiYWNrOiBGdW5jdGlvbiA9ICgoKSA9PiB7XG4gIGlmICh0eXBlb2YgcmVxdWVzdEFuaW1hdGlvbkZyYW1lICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWU7XG4gIH0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gc2V0SW1tZWRpYXRlO1xuICB9XG4gIHJldHVybiAoZjogRnVuY3Rpb24pID0+IGYoKTsgIC8vIG5vIGRlbGF5c1xufSkoKTtcblxuLyoqXG4gKiBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgaGFzIGNvbXBsZXRlZC5cbiAqXG4gKiBPbiBOb2RlLmpzIHRoaXMgdXNlcyBzZXRJbW1lZGlhdGUgaW5zdGVhZCBvZiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUuXG4gKlxuICogVGhpcyBpcyBzaW1wbHkgYSBzdWdhciBtZXRob2Qgc28gdGhhdCB1c2VycyBjYW4gZG8gdGhlIGZvbGxvd2luZzpcbiAqIGBhd2FpdCB0Zi5uZXh0RnJhbWUoKTtgXG4gKlxuICogQGRvYyB7aGVhZGluZzogJ1BlcmZvcm1hbmNlJywgc3ViaGVhZGluZzogJ1RpbWluZyd9XG4gKi9cbmZ1bmN0aW9uIG5leHRGcmFtZSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlPHZvaWQ+KHJlc29sdmUgPT4gZGVsYXlDYWxsYmFjaygoKSA9PiByZXNvbHZlKCkpKTtcbn1cblxuZXhwb3J0IHtuZXh0RnJhbWV9O1xuIl19"],"names":["opHandler","buffer","cast","clone","print","TENSORFLOWJS_FLAGS_PREFIX","Environment","constructor","global","this","flags","flagRegistry","urlFlags","getQueryParams","populateURLFlags","setPlatform","platformName","platform","env","getBool","registerFlag","flagName","evaluationFn","setHook","flagValue","set","getAsync","evaluateFlag","get","Error","getNumber","getString","getFlags","features","value","setFlags","Object","assign","reset","location","search","urlParams","split","forEach","keyValue","key","lowerCaseValue","toLowerCase","parseValue","queryString","params","replace","s","t","name","decodeURIComponent","decodeParam","join","ENV","setEnvironmentGlobal","environment","debugValue","process","versions","node","navigator","userAgent","test","vendor","isRegisteredKernelInvocation","kernelInvocation","kernelName","EngineState","registeredVariables","nextTapeNodeId","numBytes","numTensors","numStringTensors","numDataBuffers","gradientDepth","kernelDepth","scopeStack","numDataMovesStack","nextScopeId","tensorInfo","WeakMap","profiling","activeProfile","newBytes","newTensors","peakBytes","kernels","result","kernelNames","Array","from","Set","map","k","dispose","variableName","Engine","registry","registryFactory","pendingBackendInitId","state","ready","pendingBackendInit","then","backendInstance","sortedBackends","getSortedBackends","i","length","backendName","initializeBackend","success","setBackend","backend","asyncInit","initializeBackendsAndReturnBest","backendNames","keys","findBackend","findBackendFactory","factory","registerBackend","priority","setupRegisteredKernels","profiler","kernel","setupFunc","disposeRegisteredKernels","disposeFunc","registryFactoryEntry","promiseId","catch","err","stack","message","removeBackend","sort","a","b","moveData","dataId","info","srcBackend","values","readSync","refCount","disposeData","move","shape","dtype","shouldCheckForMemLeaks","tidy","nameOrFn","fn","String","scopedRun","startScope","endScope","start","end","f","res","ex","nextTensorId","nextVariableId","x","y","ENGINE","runKernel","inputs","addTapeNode","activeScope","dy","gradInputs","attrs","runKernelFunc","checkKernelForMemLeak","numDataIdsBefore","outInfos","numDataIdsAfter","numDataIds","numOutputDataIds","numMoves","dataIdsLeaked","kernelParams","outputs","saved","isTapeOn","startingBytecount","startingNumTensors","kernelFunc","out","push","kernelOrScopeName","isArray","outTensors","outInfo","rank","makeTensorFromTensorInfo","tensorsToSave","getTensorsForGradient","saveTensorsForBackwardMode","forwardFunc","saveFunc","tensors","tensor","keep","outs","backwardsFunc","kernelProfile","profileKernel","logKernelProfile","bytesAdded","totalBytesSnapshot","tensorsAdded","totalTensorsSnapshot","inputShapes","outputShapes","item","kernelTimeMs","timeMs","extraInfo","gradConfig","inputsToSave","outputsToSave","inputTensorsToSave","saveAllInputs","inputName","outputTensorsToSave","filter","_","concat","makeTensor","backendVals","d","write","trackTensor","bytes","makeTensorFromDataId","makeVariable","initialValue","trainable","toString","v","incRef","size","has","track","removeDataId","delete","disposeTensor","disposeVariables","varName","disposeVariable","memory","unreliable","reasons","profile","query","startBytes","startNumTensors","Math","max","gradientsFunc","tapeNode","id","gradFunc","gradient","dys","output","vals","activeTape","kept","startTape","endTape","scopeInfo","tensorsToTrackInParent","getTensorsInContainer","tensorsToTrackInParentSet","oldScope","pop","scopeId","gradients","xs","allowNoGradients","filteredTape","accumulatedGradientMap","ones","add","grads","customGrad","every","inputMap","input","save","gradRes","gradMap","grad","read","readToGPU","options","time","now","timingInfo","wallMs","getOrMakeEngine","ns","_tfengine","isMobileMockValue","mockIsMobile","isMobile","nav","undefined","product","window","opera","navAny","userAgentData","mobile","substr","isBrowser","document","WorkerGlobalScope","delayCallback","requestAnimationFrame","setImmediate","nextFrame","Promise","resolve"],"sourceRoot":""}