{"version":3,"file":"stylist-vendors-8cb190b9.ffcbe7ad849e09b96587.js","mappings":"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lhB,EACA,KACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MACA,IACA,KACA,KACA,MACA,KACA,MACA,KACA,MACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,MACA,MACA,KACA,KACA,KACA,KACA,KACA,KACA,KACA,MACAe,GACAC,GACA,MACAI,GACAI,GACAG,GACAI,GACA,KACA,KACA,MACAQ,GACAU,GACAG,GACAgD,GACAa,GACA5E,GACAsF,GACAK,GACA,MACAI,GACAiB,GACAY,GACA,MACA,MACAkB,GACAW,GACAK,GACAW,GACAC,GACAY,GACAM,GACAE,GACAO,GACA,KACA,MACAC,GACA,GAAA3D,EACA+D,GACA,KACA,KACA,KACAC,GACAiC,GACA+B,GACAU,GACAgB,GACAI,GACAsB,GACA,MACAY,GACAE,GACAY,GACA,KACAG,GACAE,GACAG,GACA,MACAvO,GACA8O,GACAC,GACAe,GACAS,GACAS,GACAI,GACAO,GACAC,GACAM,GACAK,GACAC,GACA,MACA,KACAc,GACAG,GACAC,GACAE,GACA,KACAE,GACAkC,GACAE,GACAK,GACA7S,IAEJ,IAAK,MAAM0T,MAAgBD,IACvB,IAAAE,gBAAeD,G,sECjUZ,SAASE,EAAkB7G,EAAc8G,EAAmBC,EAAY9G,EAAYI,GACvF,MAAM2G,EAAY,EAAAnxB,KAAA,cAAmBoqB,GAC/BgH,EAAMH,EAAkB,GACxBI,EAAa7G,EAAY/pB,OAGzB0C,EAAc,GACpB,IAAImuB,EAAU,EACVC,GAAgB,EACpB,IAAK,IAAIpb,EAAI,EAAGA,EAAIkb,IAAclb,EAAG,CACjC,MAAMrK,EAAO0e,EAAYrU,GACzB,IAAc,IAAVrK,EAAa,CACb,IAAsB,IAAlBylB,EACA,MAAM,IAAIxsB,MAAM,iDAAiDwsB,SAAoBpb,KAEzFob,EAAepb,EACfhT,EAAYZ,KAAK,EACrB,KACK,CACD,GAAIuJ,EAAO,EACP,MAAM,IAAI/G,MAAM,QAAQoR,+BAA+BrK,KAE3DwlB,GAAWxlB,EACX3I,EAAYZ,KAAKuJ,EACrB,CACJ,CACA,IAAsB,IAAlBylB,EAAqB,CACrB,GAAID,GAAW,EACX,MAAM,IAAIvsB,MAAM,iHAIpB,MAAMysB,EAAUtwB,KAAK6tB,MAAMoC,EAAYG,GACvC,GAAIA,EAAUE,IAAYL,EACtB,MAAM,IAAIpsB,MAAM,2CAA2CosB,6EACEG,iBAAuBlH,kBAA2BjnB,KAEnHA,EAAYouB,GAAgBC,CAChC,CACA,MAAMtL,EAAa,EAAAlmB,KAAA,cAAmBmD,GACtC,GAAI+iB,IAAeiL,EACf,MAAM,IAAIpsB,MAAM,qCAAqCosB,+CAAuDjL,iBAA0BkE,iBAA0BjnB,KAEpK,MAAMsuB,EAAYrH,EAAW3pB,OACvBixB,EAAe,GACrB,GAAID,EAAY,EAAG,CACfC,EAAaD,EAAY,GAAK,EAC9B,IAAK,IAAItb,EAAIsb,EAAY,EAAGtb,GAAK,IAAKA,EAClCub,EAAavb,GAAKub,EAAavb,EAAI,GAAKiU,EAAWjU,EAAI,EAE/D,CACA,MAAMwb,EAAgB,GACtB,GAAIN,EAAa,EAAG,CAChBM,EAAcN,EAAa,GAAK,EAChC,IAAK,IAAIlb,EAAIkb,EAAa,EAAGlb,GAAK,IAAKA,EACnCwb,EAAcxb,GAAKwb,EAAcxb,EAAI,GAAKhT,EAAYgT,EAAI,EAElE,CACA,MAAMsU,EAAa,EAAAzqB,KAAA,kBAAuBkxB,EAAYE,EAAMC,GAC5D,IAAK,IAAI7wB,EAAI,EAAGA,EAAI4wB,IAAO5wB,EAAG,CAC1B,IAAIoxB,EAAK,EACT,IAAK,IAAIhuB,EAAI,EAAGA,EAAI6tB,IAAa7tB,EAE7BguB,GAAMzH,EAAa3pB,EAAIixB,EAAY7tB,GAAK8tB,EAAa9tB,GAEzD,IAAK,IAAIA,EAAI,EAAGA,EAAIytB,IAAcztB,EAE9B6mB,EAAWjqB,EAAI6wB,EAAaztB,GAAK1C,KAAK6tB,MAAM6C,EAAKD,EAAc/tB,IAC/DguB,GAAMD,EAAc/tB,EAE5B,CACA,MAAO,CAAC6mB,EAAY,CAAC2G,EAAKC,GAAaluB,EAC3C,C","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LeakyRelu.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Rsqrt.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reshape.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sub.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sum.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Neg.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Less.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Minimum.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prelu.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Prod.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Relu6.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RealDiv.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sigmoid.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multiply.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Maximum.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Relu.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transpose.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Real.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Slice.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/_FusedMatMul.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LessEqual.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LinSpace.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Log1p.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalAnd.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalNot.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LogicalOr.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Max.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool3D.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPool3DGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MaxPoolWithArgmax_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Mean.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Min.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/MirrorPad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Mod.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Softmax.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Multinomial.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV3.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV4.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NonMaxSuppressionV5.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/NotEqual.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/OneHot.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ZerosLike.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/OnesLike.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Pack.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/PadV2.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Pow.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Range.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reciprocal.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeBilinear.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeBilinearGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeNearestNeighbor.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ResizeNearestNeighborGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Reverse.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/RotateWithOffset.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Round.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Scatter_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ScatterNd.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Select.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Selu.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sign.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sin.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sinh.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Softplus.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SpaceToBatchND.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseFillEmptyRows.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseToDense.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SplitV.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Sqrt.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Square.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SquaredDifference.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Step.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/StridedSlice.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tan.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tanh.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Tile.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/TopK.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Transform.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unique.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Unpack.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/UnsortedSegmentSum.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/register_all_kernels.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/SparseReshape_impl.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LeakyRelu, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function leakyRelu(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { alpha } = attrs;\n    assertNotComplex([x], 'leakyRelu');\n    const xSize = util.sizeFromShape(x.shape);\n    const xVals = backend.data.get(x.dataId).values;\n    const outVals = util.getTypedArrayFromDType('float32', xSize);\n    for (let i = 0; i < xVals.length; i++) {\n        outVals[i] = xVals[i] < 0 ? alpha * xVals[i] : xVals[i];\n    }\n    return backend.makeTensorInfo(x.shape, 'float32', outVals);\n}\nexport const leakyReluConfig = {\n    kernelName: LeakyRelu,\n    backendName: 'cpu',\n    kernelFunc: leakyRelu\n};\n//# sourceMappingURL=LeakyRelu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const logImpl = createSimpleUnaryImpl((xi) => Math.log(xi));\nexport const log = unaryKernelFuncFromImpl(Log, logImpl);\nexport const logConfig = {\n    kernelName: Log,\n    backendName: 'cpu',\n    kernelFunc: log,\n};\n//# sourceMappingURL=Log.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TensorBuffer, util } from '@tensorflow/tfjs-core';\nexport function uniqueImpl(values, axis, shape, dtype) {\n    // Normalize and validate axis.\n    const $axis = util.parseAxisParam(axis, shape)[0];\n    // Calculate the new shape that is suitable for extracting data along the\n    // given axis.\n    //\n    // The rank is 3.\n    // The size of the 1st dimension is the size of all the axes < the given axis.\n    // The size of the 2nd dimension is the same as the size of the given axis.\n    // The size of the 3rd dimension is the size of all the axes > the given axis.\n    //\n    // For example, for a 4D tensor with shape=[2, 3, 5, 4] and axis=2, the\n    // newShape would be: [2*3, 5, 4].\n    //\n    // Note that this is not the final output shape. This will be the shape for an\n    // intermediate TensorBuffer (see inputBuffer below) to allow us to extract\n    // values along the given axis. To demonstrate how it works, consider the\n    // following example:\n    //\n    // Input: a 3D tensor, with shape [1, 2, 3]\n    // [\n    //   [\n    //      [1,2,3],\n    //      [4,5,6]\n    //   ]\n    // ]\n    // Axis: 2 (the last axis).\n    // Along axis 2, we expect to extract 3 tensors: [1,4], [2,5], [3,6].\n    //\n    // For this example, newShape would be: [2, 3, 1], where 2 is calculated from\n    // 1*2. The re-shaped data would look like:\n    //\n    // [\n    //   [\n    //     [1], [2], [3]\n    //   ],\n    //   [\n    //     [4], [5], [6]\n    //   ]\n    // ]\n    //\n    // Then, we can construct a 3-level nested loop by the following dimension\n    // order to extract the values along the axis (dimension1):\n    // i: dimension1       // 0,1,2 (newShape[1])\n    //   m: dimension0     // 0,1   (newShape[0])\n    //     n: dimension2   // 0     (newShape[2])\n    //\n    //                       m, i, n\n    //                      ---------\n    // Iteration 0: data at [0, 0, 0] => \"1\"\n    // Iteration 1: data at [1, 0, 0] => \"4\"\n    // We got [1,4].\n    // Iteration 2: data at [0, 1, 0] => \"2\"\n    // Iteration 3: data at [1, 1, 0] => \"5\"\n    // We got [2,5].\n    // Iteration 4: data at [0, 2, 0] => \"3\"\n    // Iteration 5: data at [1, 2, 0] => \"6\"\n    // We got [3,6].\n    const newShape = [1, shape[0], 1];\n    for (let i = 0; i < $axis; i++) {\n        newShape[0] *= shape[i];\n    }\n    newShape[1] = shape[$axis];\n    for (let i = $axis + 1; i < shape.length; i++) {\n        newShape[2] *= shape[i];\n    }\n    // A map from unique elements (their string representations) to their values\n    // in \"indices\" (below).\n    const uniqueElements = {};\n    // The indices of each unique element in the original tensor along the given\n    // axis. It is 1D and has the same size as the given axis.\n    const indices = new Int32Array(shape[$axis]);\n    // Create a buffer so we can easily extract value at a given location.\n    const inputBuffer = new TensorBuffer(newShape, dtype, values);\n    // The indices along the given axis that have unique elements. This is a\n    // de-duped version of \"indices\" above.\n    const uniqueIndices = [];\n    const is1DTensor = newShape[0] === 1 && newShape[2] === 1;\n    for (let i = 0; i < shape[$axis]; i++) {\n        // Extract values along the axis.\n        let element;\n        if (is1DTensor) {\n            // Fast path for 1D tensor input.\n            element = values[i].toString();\n        }\n        else {\n            const axisValues = [];\n            for (let m = 0; m < newShape[0]; m++) {\n                for (let n = 0; n < newShape[2]; n++) {\n                    axisValues.push(inputBuffer.get(m, i, n));\n                }\n            }\n            element = axisValues.join(',');\n        }\n        // Dedup and update various indices.\n        if (uniqueElements[element] !== undefined) {\n            indices[i] = uniqueElements[element];\n        }\n        else {\n            const uniqueIndex = Object.keys(uniqueElements).length;\n            uniqueElements[element] = uniqueIndex;\n            indices[i] = uniqueIndex;\n            uniqueIndices.push(i);\n        }\n    }\n    // Now we know where each of the unique elements are located along the axis\n    // (uniqueIndices). Extract them from input buffer and store them in the\n    // output buffer.\n    const outputTmpShape = newShape.slice();\n    outputTmpShape[1] = Object.keys(uniqueElements).length;\n    const outputBuffer = new TensorBuffer(outputTmpShape, dtype);\n    uniqueIndices.forEach((uniqueElementIndex, i) => {\n        for (let m = 0; m < newShape[0]; m++) {\n            for (let n = 0; n < newShape[2]; n++) {\n                outputBuffer.set(inputBuffer.get(m, uniqueElementIndex, n), m, i, n);\n            }\n        }\n    });\n    // The output shape can be calculated from the input shape with the size of\n    // the given axis replaced by the number of unique elements along that axis.\n    const outputShape = shape.slice();\n    outputShape[$axis] = outputTmpShape[1];\n    return {\n        outputValues: outputBuffer.values,\n        outputShape,\n        indices,\n    };\n}\n//# sourceMappingURL=Unique_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function maxImpl(aVals, reduceSize, outShape, dtype) {\n    const vals = util.getTypedArrayFromDType(dtype, util.sizeFromShape(outShape));\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n            }\n        }\n        vals[i] = max;\n    }\n    return vals;\n}\n//# sourceMappingURL=Max_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Rsqrt } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const rsqrtImpl = createSimpleUnaryImpl((xi) => 1 / Math.sqrt(xi));\nexport const rsqrt = unaryKernelFuncFromImpl(Rsqrt, rsqrtImpl);\nexport const rsqrtConfig = {\n    kernelName: Rsqrt,\n    backendName: 'cpu',\n    kernelFunc: rsqrt,\n};\n//# sourceMappingURL=Rsqrt.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseFillEmptyRowsImpl(indices, indicesShape, indicesDType, values, valuesDType, denseShape, defaultValue) {\n    const indicesCount = indicesShape[0];\n    const denseRows = denseShape[0];\n    const emptyRowIndicator = new Array(denseRows);\n    const reverseIndexMap = new Array(indicesCount);\n    const rank = indicesShape[1];\n    if (denseRows === 0) {\n        if (indicesCount !== 0) {\n            throw new Error(`Received SparseTensor with denseShape[0] = 0 but\n         indices.shape[0] = ${indicesCount}`);\n        }\n        const outputIndices = util.getArrayFromDType(indicesDType, 0);\n        const outputValues = util.getArrayFromDType(valuesDType, 0);\n        return [\n            outputIndices, [0, rank], outputValues, emptyRowIndicator, reverseIndexMap\n        ];\n    }\n    let rowsAreOrdered = true;\n    let lastIndicesRow = 0;\n    const csrOffset = new Array(denseRows).fill(0);\n    for (let i = 0; i < indicesCount; ++i) {\n        // indices is a 2d tensor with shape of [N, rank]\n        const row = indices[i * rank];\n        if (row < 0) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} < 0`);\n        }\n        if (row >= denseRows) {\n            throw new Error(`indices(${i}, 0) is invalid: ${row} >= ${denseRows}`);\n        }\n        ++csrOffset[row];\n        rowsAreOrdered = rowsAreOrdered && (row >= lastIndicesRow);\n        lastIndicesRow = row;\n    }\n    let allRowsFull = true;\n    for (let row = 0; row < denseRows; ++row) {\n        // csrOffset here describes the number of elements in this dense row\n        const rowEmpty = (csrOffset[row] === 0);\n        emptyRowIndicator[row] = rowEmpty;\n        allRowsFull = allRowsFull && !rowEmpty;\n        // In filled version, each row has at least one element.\n        csrOffset[row] = Math.max(csrOffset[row], 1);\n        // Update csrOffset to represent the number of elements up to and\n        // including denseRows + 1:\n        //  csrOffset[0] == #{elements of row 0}\n        //  csrOffset[1] == #{elements of row 1} + #{elements of row 0}\n        //  ..\n        //  csrOffset[i] == starting index for elements in row i + 1.\n        if (row > 0) {\n            csrOffset[row] += csrOffset[row - 1];\n        }\n    }\n    if (allRowsFull && rowsAreOrdered) {\n        const outputIndices = indices;\n        const outputValues = values;\n        for (let i = 0; i < indicesCount; ++i) {\n            reverseIndexMap[i] = i;\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n    else {\n        const fullIndicesCount = csrOffset[denseRows - 1];\n        const outputIndices = util.getArrayFromDType(indicesDType, fullIndicesCount * rank);\n        const outputValues = util.getArrayFromDType(valuesDType, fullIndicesCount);\n        const filledCount = new Array(denseRows).fill(0);\n        // Fill in values for rows that are not missing\n        for (let i = 0; i < indicesCount; ++i) {\n            // indices is a 2d tensor with shape of [N, rank]\n            const row = indices[i * rank];\n            const offset = filledCount[row];\n            const outputI = ((row === 0) ? 0 : csrOffset[row - 1]) + offset;\n            filledCount[row]++; // Increment the filled count for this row.\n            for (let j = 0; j < rank; ++j) {\n                // indices and outputIndices are 2d tensors with shape of [N, rank]\n                outputIndices[outputI * rank + j] = indices[i * rank + j];\n            }\n            outputValues[outputI] = values[i];\n            // We'll need this reverse index map to backprop correctly.\n            reverseIndexMap[i] = outputI;\n        }\n        // Fill in values for rows that are missing\n        for (let row = 0; row < denseRows; ++row) {\n            const rowCount = filledCount[row];\n            if (rowCount === 0) { // We haven't filled this row\n                const startingIndex = (row === 0) ? 0 : csrOffset[row - 1];\n                // Remaining index values were set to zero already.\n                // Just need to set the row index in the right location.\n                // outputIndices is a 2d tensor with shape of [N, rank]\n                outputIndices[startingIndex * rank + 0] = row;\n                for (let col = 1; col < rank; ++col) {\n                    outputIndices[startingIndex * rank + col] = 0;\n                }\n                outputValues[startingIndex] = defaultValue;\n            }\n        }\n        return [\n            outputIndices, [indicesCount, rank], outputValues, emptyRowIndicator,\n            reverseIndexMap\n        ];\n    }\n}\n//# sourceMappingURL=SparseFillEmptyRows_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function transposeImpl(xVals, xShape, dtype, perm, newShape) {\n    const xRank = xShape.length;\n    const xSize = util.sizeFromShape(xShape);\n    const xStrides = util.computeStrides(xShape);\n    const newStrides = util.computeStrides(newShape);\n    const result = util.getTypedArrayFromDType(dtype, util.sizeFromShape(newShape));\n    for (let i = 0; i < xSize; ++i) {\n        const loc = util.indexToLoc(i, xRank, xStrides);\n        // Permute location.\n        const newLoc = new Array(loc.length);\n        for (let i = 0; i < newLoc.length; i++) {\n            newLoc[i] = loc[perm[i]];\n        }\n        const newIndex = util.locToIndex(newLoc, xRank, newStrides);\n        result[newIndex] = xVals[i];\n    }\n    return result;\n}\n//# sourceMappingURL=Transpose_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reshape, util } from '@tensorflow/tfjs-core';\nexport function reshape(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { shape } = attrs;\n    const xSize = util.sizeFromShape(x.shape);\n    const $shape = util.inferFromImplicitShape(shape, xSize);\n    const $xSize = util.sizeFromShape($shape);\n    util.assert(xSize === $xSize, () => `The new shape (${$shape}) has ${$xSize} elements and the old ` +\n        `shape (${x.shape}) has ${xSize} elements. The new shape and old ` +\n        `shape must have the same number of elements.`);\n    backend.incRef(x.dataId);\n    const xData = backend.data.get(x.dataId);\n    if (xData.complexTensorInfos != null) {\n        const real = xData.complexTensorInfos.real;\n        const imag = xData.complexTensorInfos.imag;\n        real.shape = $shape;\n        imag.shape = $shape;\n    }\n    return { dataId: x.dataId, shape: $shape, dtype: x.dtype };\n}\nexport const reshapeConfig = {\n    kernelName: Reshape,\n    backendName: 'cpu',\n    kernelFunc: reshape\n};\n//# sourceMappingURL=Reshape.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sub } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const subImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue - bValue));\nexport const subComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal - bReal, imag: aImag - bImag };\n}));\nexport const sub = binaryKernelFunc(Sub, subImpl, subComplexImpl);\nexport const subConfig = {\n    kernelName: Sub,\n    backendName: 'cpu',\n    kernelFunc: sub\n};\n//# sourceMappingURL=Sub.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\n/**\n * An implementation of the tile kernel shared between webgl and cpu for string\n * tensors only.\n */\nexport function tileImpl(xBuf, reps) {\n    const newShape = new Array(xBuf.rank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = xBuf.shape[i] * reps[i];\n    }\n    const result = buffer(newShape, xBuf.dtype);\n    for (let i = 0; i < result.values.length; ++i) {\n        const newLoc = result.indexToLoc(i);\n        const originalLoc = new Array(xBuf.rank);\n        for (let j = 0; j < originalLoc.length; j++) {\n            originalLoc[j] = newLoc[j] % xBuf.shape[j];\n        }\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        result.values[i] = xBuf.values[originalIndex];\n    }\n    return result;\n}\n//# sourceMappingURL=Tile_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Sum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { zeros } from '../utils/zeros_impl';\nimport { cast } from './Cast';\nimport { identity } from './Identity';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function sum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'sum');\n    let $x;\n    if (x.dtype === 'bool') {\n        $x = cast({ inputs: { x }, backend, attrs: { dtype: 'int32' } });\n    }\n    else {\n        $x = identity({ inputs: { x }, backend });\n    }\n    const xRank = $x.shape.length;\n    const axes = util.parseAxisParam(axis, $x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = $x;\n    if (permutation != null) {\n        permutedX =\n            transpose({ inputs: { x: $x }, backend, attrs: { perm: permutation } });\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    backend_util.assertAxesAreInnerMostDims('sum', reductionAxes, permutedX.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(permutedX.shape, reductionAxes);\n    const resultDtype = backend_util.upcastType(permutedX.dtype, 'int32');\n    let result = zeros(backend, outShape, resultDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = backend.data.get(result.dataId).values;\n    const aVals = backend.data.get(permutedX.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let sum = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            sum += aVals[offset + j];\n        }\n        vals[i] = sum;\n    }\n    if (keepDims) {\n        const newShape = backend_util.expandShapeToKeepDim(result.shape, axes);\n        const oldResult = result;\n        result = reshape({ inputs: { x: result }, backend, attrs: { shape: newShape } });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    backend.disposeIntermediateTensorInfo($x);\n    if (permutation != null) {\n        backend.disposeIntermediateTensorInfo(permutedX);\n    }\n    return result;\n}\nexport const sumConfig = {\n    kernelName: Sum,\n    backendName: 'cpu',\n    kernelFunc: sum\n};\n//# sourceMappingURL=Sum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Neg, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { multiplyImpl } from './Multiply';\nexport function negImpl(xVals, xShape, xDtype) {\n    const minusOne = util.createScalarValue(-1, xDtype);\n    return multiplyImpl([], xShape, minusOne, xVals, xDtype);\n}\nexport function neg(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'neg');\n    const xVals = backend.data.get(x.dataId).values;\n    const [res, newShape] = negImpl(xVals, x.shape, x.dtype);\n    return backend.makeTensorInfo(newShape, x.dtype, res);\n}\nexport const negConfig = {\n    kernelName: Neg,\n    backendName: 'cpu',\n    kernelFunc: neg\n};\n//# sourceMappingURL=Neg.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Less } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessImpl = createSimpleBinaryKernelImpl((a, b) => (a < b) ? 1 : 0);\nexport const less = binaryKernelFunc(Less, lessImpl, null /* complexImpl */, 'bool');\nexport const lessConfig = {\n    kernelName: Less,\n    backendName: 'cpu',\n    kernelFunc: less\n};\n//# sourceMappingURL=Less.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Minimum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const minimumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.min(aValue, bValue)));\nexport const minimum = binaryKernelFunc(Minimum, minimumImpl);\nexport const minimumConfig = {\n    kernelName: Minimum,\n    backendName: 'cpu',\n    kernelFunc: minimum\n};\n//# sourceMappingURL=Minimum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Prelu } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nconst preluImpl = createSimpleBinaryKernelImpl((xValue, aValue) => xValue < 0 ? aValue * xValue : xValue);\nexport function prelu(args) {\n    const { inputs, backend } = args;\n    const { x, alpha } = inputs;\n    assertNotComplex([x, alpha], 'prelu');\n    const aVals = backend.data.get(x.dataId).values;\n    const bVals = backend.data.get(alpha.dataId).values;\n    const [resultData, resultShape] = preluImpl(x.shape, alpha.shape, aVals, bVals, x.dtype);\n    return backend.makeTensorInfo(resultShape, x.dtype, resultData);\n}\nexport const preluConfig = {\n    kernelName: Prelu,\n    backendName: 'cpu',\n    kernelFunc: prelu,\n};\n//# sourceMappingURL=Prelu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Prod, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function prodImpl(xShape, xDtype, xVals, reductionAxes) {\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, reductionAxes);\n    const outDtype = upcastType(xDtype, 'int32');\n    const outVals = util.makeZerosTypedArray(util.sizeFromShape(outShape), outDtype);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    for (let i = 0; i < outVals.length; ++i) {\n        const offset = i * reduceSize;\n        let prod = 1;\n        for (let j = 0; j < reduceSize; ++j) {\n            prod *= xVals[offset + j];\n        }\n        outVals[i] = prod;\n    }\n    return { outVals, outShape, outDtype };\n}\nexport function prod(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'prod');\n    const xRank = x.shape.length;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const permutation = backend_util.getAxesPermutation(axes, xRank);\n    let reductionAxes = axes;\n    let permutedX = x;\n    const intermediateTensorInfos = [];\n    if (permutation != null) {\n        permutedX = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n        intermediateTensorInfos.push(permutedX);\n        reductionAxes = backend_util.getInnerMostAxes(reductionAxes.length, xRank);\n    }\n    const xVals = backend.data.get(permutedX.dataId).values;\n    const { outVals, outShape, outDtype } = prodImpl(permutedX.shape, permutedX.dtype, xVals, reductionAxes);\n    let resultShape = outShape;\n    if (keepDims) {\n        resultShape = backend_util.expandShapeToKeepDim(outShape, axes);\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(resultShape, outDtype, outVals);\n}\nexport const prodConfig = {\n    kernelName: Prod,\n    backendName: 'cpu',\n    kernelFunc: prod\n};\n//# sourceMappingURL=Prod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function rangeImpl(start, stop, step, dtype) {\n    const sameStartStop = start === stop;\n    const increasingRangeNegativeStep = start < stop && step < 0;\n    const decreasingRangePositiveStep = stop < start && step > 1;\n    if (sameStartStop || increasingRangeNegativeStep ||\n        decreasingRangePositiveStep) {\n        return util.makeZerosTypedArray(0, dtype);\n    }\n    const numElements = Math.abs(Math.ceil((stop - start) / step));\n    const values = util.makeZerosTypedArray(numElements, dtype);\n    if (stop < start && step === 1) {\n        // Auto adjust the step's sign if it hasn't been set\n        // (or was set to 1)\n        step = -1;\n    }\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=Range_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/** An implementation of the TopK kernel shared between webgl and cpu. */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function topKImpl(x, xShape, xDtype, k, sorted) {\n    // Reshape into a 2d tensor [batch, lastDim] and compute topk along lastDim.\n    const lastDim = xShape[xShape.length - 1];\n    const [batch, size] = [x.length / lastDim, lastDim];\n    const allTopKVals = util.getTypedArrayFromDType(xDtype, batch * k);\n    const allTopKIndices = util.getTypedArrayFromDType('int32', batch * k);\n    for (let b = 0; b < batch; b++) {\n        const offset = b * size;\n        const vals = x.subarray(offset, offset + size);\n        const valAndInd = [];\n        for (let i = 0; i < vals.length; i++) {\n            valAndInd.push({ value: vals[i], index: i });\n        }\n        valAndInd.sort((a, b) => b.value - a.value);\n        const outOffset = b * k;\n        const topKVals = allTopKVals.subarray(outOffset, outOffset + k);\n        const topKIndices = allTopKIndices.subarray(outOffset, outOffset + k);\n        for (let i = 0; i < k; i++) {\n            topKVals[i] = valAndInd[i].value;\n            topKIndices[i] = valAndInd[i].index;\n        }\n    }\n    // Reshape back to the original input shape, except that the last\n    // dimension is k.\n    const outputShape = xShape.slice();\n    outputShape[outputShape.length - 1] = k;\n    return [\n        buffer(outputShape, xDtype, allTopKVals),\n        buffer(outputShape, 'int32', allTopKIndices)\n    ];\n}\n//# sourceMappingURL=TopK_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu6 } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const relu6 = unaryKernelFunc(Relu6, (xi) => Math.min(Math.max(0, xi), 6));\nexport const relu6Config = {\n    kernelName: Relu6,\n    backendName: 'cpu',\n    kernelFunc: relu6,\n};\n//# sourceMappingURL=Relu6.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { RealDiv } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const realDivImpl = createSimpleBinaryKernelImpl((a, b) => a / b);\nexport const div = binaryKernelFunc(RealDiv, realDivImpl);\nexport const realDivConfig = {\n    kernelName: RealDiv,\n    backendName: 'cpu',\n    kernelFunc: div\n};\n//# sourceMappingURL=RealDiv.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function linSpaceImpl(start, stop, num) {\n    const step = (stop - start) / (num - 1);\n    const values = util.makeZerosTypedArray(num, 'float32');\n    values[0] = start;\n    for (let i = 1; i < values.length; i++) {\n        values[i] = values[i - 1] + step;\n    }\n    return values;\n}\n//# sourceMappingURL=LinSpace_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sigmoid } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sigmoid = unaryKernelFunc(Sigmoid, (xi) => 1 / (1 + Math.exp(-xi)));\nexport const sigmoidConfig = {\n    kernelName: Sigmoid,\n    backendName: 'cpu',\n    kernelFunc: sigmoid,\n};\n//# sourceMappingURL=Sigmoid.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multiply } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const multiplyImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => aValue * bValue));\nexport const multiplyComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return {\n        real: aReal * bReal - aImag * bImag,\n        imag: aReal * bImag + aImag * bReal\n    };\n}));\nexport const multiply = binaryKernelFunc(Multiply, multiplyImpl, multiplyComplexImpl);\nexport const multiplyConfig = {\n    kernelName: Multiply,\n    backendName: 'cpu',\n    kernelFunc: multiply\n};\n//# sourceMappingURL=Multiply.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Maximum } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const maximumImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => Math.max(aValue, bValue)));\nexport const maximum = binaryKernelFunc(Maximum, maximumImpl);\nexport const maximumConfig = {\n    kernelName: Maximum,\n    backendName: 'cpu',\n    kernelFunc: maximum\n};\n//# sourceMappingURL=Maximum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function stridedSliceImpl(outShape, xBuf, strides, begin) {\n    const outBuf = buffer(outShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; i++) {\n        const loc = outBuf.indexToLoc(i);\n        const newLoc = new Array(loc.length);\n        for (let j = 0; j < newLoc.length; j++) {\n            newLoc[j] = loc[j] * strides[j] + begin[j];\n        }\n        outBuf.set(xBuf.get(...newLoc), ...loc);\n    }\n    return outBuf;\n}\n//# sourceMappingURL=StridedSlice_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Relu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const relu = unaryKernelFunc(Relu, (xi) => Math.max(0, xi));\nexport const reluConfig = {\n    kernelName: Relu,\n    backendName: 'cpu',\n    kernelFunc: relu,\n};\n//# sourceMappingURL=Relu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transpose } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transposeImpl } from './Transpose_impl';\nexport function transpose(args) {\n    const { inputs, attrs, backend } = args;\n    const { x } = inputs;\n    const { perm } = attrs;\n    assertNotComplex(x, 'transpose');\n    const xRank = x.shape.length;\n    const newShape = new Array(xRank);\n    for (let i = 0; i < newShape.length; i++) {\n        newShape[i] = x.shape[perm[i]];\n    }\n    const values = backend.data.get(x.dataId).values;\n    const result = transposeImpl(values, x.shape, x.dtype, perm, newShape);\n    const dataId = backend.write(result, newShape, x.dtype);\n    return { dataId, shape: newShape, dtype: x.dtype };\n}\nexport const transposeConfig = {\n    kernelName: Transpose,\n    backendName: 'cpu',\n    kernelFunc: transpose\n};\n//# sourceMappingURL=Transpose.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Real } from '@tensorflow/tfjs-core';\nexport function real(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const real = backend.data.get(input.dataId).complexTensorInfos.real;\n    const realVal = backend.data.get(real.dataId).values;\n    // When complex tensor is disposed, its underlying parts will be disposed too.\n    // Make new tensor out of the real value of the complex. This makes sure the\n    // value is still accessible even if complex tensor is disposed.\n    return backend.makeTensorInfo(real.shape, real.dtype, realVal);\n}\nexport const realConfig = {\n    kernelName: Real,\n    backendName: 'cpu',\n    kernelFunc: real\n};\n//# sourceMappingURL=Real.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, Slice, slice_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function sliceImpl(vals, begin, size, shape, dtype) {\n    const isContinous = slice_util.isSliceContinous(shape, begin, size);\n    const length = util.sizeFromShape(size);\n    const xStrides = util.computeStrides(shape);\n    if (isContinous) {\n        const flatOffset = slice_util.computeFlatOffset(begin, xStrides);\n        if (dtype === 'string') {\n            return vals.slice(flatOffset, flatOffset + length);\n        }\n        return vals.subarray(flatOffset, flatOffset + length);\n    }\n    const decodedData = dtype === 'string' ?\n        backend_util.fromUint8ToStringArray(vals) :\n        vals;\n    const inBuf = buffer(shape, dtype, decodedData);\n    const outBuf = buffer(size, dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.map((idx, j) => idx + begin[j]);\n        outBuf.set(inBuf.get(...inLoc), ...outLoc);\n    }\n    if (dtype === 'string') {\n        return backend_util.fromStringArrayToUint8(outBuf.values);\n    }\n    return outBuf.values;\n}\nexport function slice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, size } = attrs;\n    assertNotComplex(x, 'slice');\n    const [$begin, $size] = slice_util.parseSliceParams(x, begin, size);\n    slice_util.assertParamsValid(x, $begin, $size);\n    const vals = backend.data.get(x.dataId).values;\n    const outVals = sliceImpl(vals, $begin, $size, x.shape, x.dtype);\n    return backend.makeTensorInfo($size, x.dtype, outVals);\n}\nexport const sliceConfig = {\n    kernelName: Slice,\n    backendName: 'cpu',\n    kernelFunc: slice\n};\n//# sourceMappingURL=Slice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { _FusedMatMul } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { batchMatMul } from './BatchMatMul';\nexport function _fusedMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b, bias, preluActivationWeights } = inputs;\n    const { transposeA, transposeB, activation, leakyreluAlpha } = attrs;\n    let current;\n    let addRes;\n    let activationRes;\n    const intermediates = [];\n    const matMulRes = batchMatMul({ inputs: { a, b }, attrs: { transposeA, transposeB }, backend });\n    current = matMulRes;\n    if (bias) {\n        addRes = add({ inputs: { a: current, b: bias }, backend });\n        intermediates.push(current);\n        current = addRes;\n    }\n    if (activation) {\n        activationRes = applyActivation(backend, current, activation, preluActivationWeights, leakyreluAlpha);\n        intermediates.push(current);\n        current = activationRes;\n    }\n    for (const i of intermediates) {\n        backend.disposeIntermediateTensorInfo(i);\n    }\n    return current;\n}\nexport const _fusedMatMulConfig = {\n    kernelName: _FusedMatMul,\n    backendName: 'cpu',\n    kernelFunc: _fusedMatMul,\n};\n//# sourceMappingURL=_FusedMatMul.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LessEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const lessEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a <= b) ? 1 : 0);\nexport const lessEqual = binaryKernelFunc(LessEqual, lessEqualImpl, null /* complexImpl */, 'bool');\nexport const lessEqualConfig = {\n    kernelName: LessEqual,\n    backendName: 'cpu',\n    kernelFunc: lessEqual\n};\n//# sourceMappingURL=LessEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LinSpace } from '@tensorflow/tfjs-core';\nimport { linSpaceImpl } from './LinSpace_impl';\nexport function linSpace(args) {\n    const { backend, attrs } = args;\n    const { start, stop, num } = attrs;\n    const outVals = linSpaceImpl(start, stop, num);\n    return backend.makeTensorInfo([outVals.length], 'float32', outVals);\n}\nexport const linSpaceConfig = {\n    kernelName: LinSpace,\n    backendName: 'cpu',\n    kernelFunc: linSpace\n};\n//# sourceMappingURL=LinSpace.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Log1p } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const log1p = unaryKernelFunc(Log1p, (xi) => Math.log1p(xi));\nexport const log1pConfig = {\n    kernelName: Log1p,\n    backendName: 'cpu',\n    kernelFunc: log1p,\n};\n//# sourceMappingURL=Log1p.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalAnd } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const logicalAndImpl = createSimpleBinaryKernelImpl((a, b) => a && b);\nexport const logicalAnd = binaryKernelFunc(LogicalAnd, logicalAndImpl, null /* complexImpl */, 'bool');\nexport const logicalAndConfig = {\n    kernelName: LogicalAnd,\n    backendName: 'cpu',\n    kernelFunc: logicalAnd\n};\n//# sourceMappingURL=LogicalAnd.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalNot } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const logicalNot = unaryKernelFunc(LogicalNot, (xi) => xi ? 0 : 1, 'bool');\nexport const logicalNotConfig = {\n    kernelName: LogicalNot,\n    backendName: 'cpu',\n    kernelFunc: logicalNot,\n};\n//# sourceMappingURL=LogicalNot.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LogicalOr } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const logicalOrImpl = createSimpleBinaryKernelImpl((a, b) => a || b);\nexport const logicalOr = binaryKernelFunc(LogicalOr, logicalOrImpl, null /* complexImpl */, 'bool');\nexport const logicalOrConfig = {\n    kernelName: LogicalOr,\n    backendName: 'cpu',\n    kernelFunc: logicalOr\n};\n//# sourceMappingURL=LogicalOr.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Max } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxImpl } from './Max_impl';\nimport { transposeImpl } from './Transpose_impl';\nexport function max(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reductionIndices, keepDims } = attrs;\n    const cpuBackend = backend;\n    let xShape = x.shape;\n    const xRank = xShape.length;\n    const origAxes = util.parseAxisParam(reductionIndices, xShape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, xRank);\n    let xVals = cpuBackend.data.get(x.dataId).values;\n    if (permutedAxes != null) {\n        const newShape = new Array(xRank);\n        for (let i = 0; i < newShape.length; i++) {\n            newShape[i] = xShape[permutedAxes[i]];\n        }\n        xVals = transposeImpl(xVals, xShape, x.dtype, permutedAxes, newShape);\n        axes = backend_util.getInnerMostAxes(axes.length, xRank);\n        xShape = newShape;\n    }\n    assertNotComplex(x, 'max');\n    backend_util.assertAxesAreInnerMostDims('max', axes, xRank);\n    const [maxOutShape, reduceShape] = backend_util.computeOutAndReduceShapes(xShape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const result = maxImpl(xVals, reduceSize, maxOutShape, x.dtype);\n    const dataId = cpuBackend.write(result, maxOutShape, x.dtype);\n    let outShape = maxOutShape;\n    if (keepDims) {\n        // reshape\n        const newShape = backend_util.expandShapeToKeepDim(maxOutShape, origAxes);\n        outShape = newShape;\n    }\n    return { dataId, shape: outShape, dtype: x.dtype };\n}\nexport const maxConfig = {\n    kernelName: Max,\n    backendName: 'cpu',\n    kernelFunc: max\n};\n//# sourceMappingURL=Max.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function maxPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'maxPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in maxPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    let res;\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        res = identity({ inputs: { x }, backend });\n    }\n    else {\n        const xValues = backend.data.get(x.dataId).values;\n        const strides = util.computeStrides(x.shape);\n        const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'max');\n        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n    }\n    return res;\n}\nexport const maxPoolConfig = {\n    kernelName: MaxPool,\n    backendName: 'cpu',\n    kernelFunc: maxPool\n};\n//# sourceMappingURL=MaxPool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, MaxPool3D, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function maxPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    assertNotComplex(x, 'maxPool3d');\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);\n    const xValues = backend.data.get(x.dataId).values;\n    const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'max');\n    return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const maxPool3DConfig = {\n    kernelName: MaxPool3D,\n    backendName: 'cpu',\n    kernelFunc: maxPool3D\n};\n//# sourceMappingURL=MaxPool3D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPool3DGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPool3dPositions } from '../utils/pool_utils';\nexport function maxPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    assertNotComplex([dy, input], 'maxPool3DGrad');\n    const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const inputBuf = backend.bufferSync(input);\n    const maxPosBuf = maxPool3dPositions(inputBuf, convInfo);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(input.shape, 'float32');\n    const dyBuf = backend.bufferSync(dy);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                    for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                        // Shader code begins\n                        const dyDepthCorner = dxDepth - padFront;\n                        const dyRowCorner = dxRow - padTop;\n                        const dyColCorner = dxCol - padLeft;\n                        let dotProd = 0;\n                        for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                            const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                            if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                Math.floor(dyDepth) !== dyDepth) {\n                                continue;\n                            }\n                            for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                    Math.floor(dyRow) !== dyRow) {\n                                    continue;\n                                }\n                                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                        Math.floor(dyCol) !== dyCol) {\n                                        continue;\n                                    }\n                                    const maxPos = effectiveFilterDepth * effectiveFilterHeight *\n                                        effectiveFilterWidth -\n                                        1 -\n                                        maxPosBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    const curPos = wDepth * effectiveFilterHeight * effectiveFilterWidth +\n                                        wRow * effectiveFilterWidth + wCol;\n                                    const mask = maxPos === curPos ? 1 : 0;\n                                    if (mask === 0) {\n                                        continue;\n                                    }\n                                    const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    dotProd += pixel * mask;\n                                }\n                            }\n                        }\n                        dx.set(dotProd, batch, dxDepth, dxRow, dxCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPool3DGradConfig = {\n    kernelName: MaxPool3DGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPool3DGrad\n};\n//# sourceMappingURL=MaxPool3DGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, MaxPoolGrad } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolPositions } from '../utils/pool_utils';\nexport function maxPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input, output } = inputs;\n    const x = input;\n    assertNotComplex([input, output], 'maxPoolGrad');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const xValues = backend.data.get(x.dataId).values;\n    const maxPosBuf = buffer(convInfo.outShape, x.dtype, maxPoolPositions(xValues, x.shape, x.dtype, convInfo).values);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(x.shape, 'float32');\n    const dyData = backend.data.get(dy.dataId).values;\n    const dyBuf = buffer(dy.shape, 'float32', dyData);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                    // Shader code begins.\n                    const dyRCorner = dxR - padTop;\n                    const dyCCorner = dxC - padLeft;\n                    let dotProd = 0;\n                    for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                        const dyR = (dyRCorner + wR) / strideHeight;\n                        if (dyR < 0 || dyR >= convInfo.outHeight ||\n                            Math.floor(dyR) !== dyR) {\n                            continue;\n                        }\n                        for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                            const dyC = (dyCCorner + wC) / strideWidth;\n                            if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                Math.floor(dyC) !== dyC) {\n                                continue;\n                            }\n                            const maxPos = effectiveFilterHeight * effectiveFilterWidth - 1 -\n                                maxPosBuf.get(b, dyR, dyC, d);\n                            const curPos = wR * effectiveFilterWidth + wC;\n                            const mask = maxPos === curPos ? 1 : 0;\n                            if (mask === 0) {\n                                continue;\n                            }\n                            const pixel = dyBuf.get(b, dyR, dyC, d);\n                            dotProd += pixel * mask;\n                        }\n                    }\n                    dx.set(dotProd, b, dxR, dxC, d);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const maxPoolGradConfig = {\n    kernelName: MaxPoolGrad,\n    backendName: 'cpu',\n    kernelFunc: maxPoolGrad\n};\n//# sourceMappingURL=MaxPoolGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MaxPoolWithArgmax } from '@tensorflow/tfjs-core';\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { maxPoolWithArgmaxImpl } from './MaxPoolWithArgmax_impl';\nexport const maxPoolWithArgmaxConfig = {\n    kernelName: MaxPoolWithArgmax,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { x } = inputs;\n        const { filterSize, strides, pad, includeBatchInIndex } = attrs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'MaxPoolWithArgmax');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, [1, 1], pad);\n        const [pooled, indexes] = maxPoolWithArgmaxImpl(values, x.shape, x.dtype, includeBatchInIndex, convInfo);\n        const pooledDataId = cpuBackend.write(pooled, convInfo.outShape, x.dtype);\n        const indexesDataId = cpuBackend.write(indexes, convInfo.outShape, x.dtype);\n        return [\n            { dataId: pooledDataId, shape: convInfo.outShape, dtype: x.dtype },\n            { dataId: indexesDataId, shape: convInfo.outShape, dtype: 'int32' }\n        ];\n    }\n};\n//# sourceMappingURL=MaxPoolWithArgmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nimport { maxPoolPositions, pool } from '../utils/pool_utils';\nexport function maxPoolWithArgmaxImpl(xValues, xShape, dtype, includeBatchInIndex, convInfo) {\n    const strides = util.computeStrides(xShape);\n    const maxPools = pool(xValues, xShape, dtype, strides, convInfo, 'max');\n    const maxPositions = maxPoolPositions(xValues, xShape, dtype, convInfo, true, includeBatchInIndex);\n    return [maxPools.values, maxPositions.values];\n}\n//# sourceMappingURL=MaxPoolWithArgmax_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Mean, util } from '@tensorflow/tfjs-core';\nimport { cast } from './Cast';\nimport { div } from './RealDiv';\nimport { sum } from './Sum';\nexport function mean(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    const axes = util.parseAxisParam(axis, x.shape);\n    const shapes = backend_util.computeOutAndReduceShapes(x.shape, axes);\n    const reduceShape = shapes[1];\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const toDispose = [];\n    const reduceSizeScalar = backend.makeTensorInfo([], 'float32', new Float32Array([reduceSize]));\n    toDispose.push(reduceSizeScalar);\n    const $x = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n    toDispose.push($x);\n    const res = div({ inputs: { a: $x, b: reduceSizeScalar }, backend });\n    toDispose.push(res);\n    const result = sum({ inputs: { x: res }, backend, attrs: { axis, keepDims } });\n    toDispose.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const meanConfig = {\n    kernelName: Mean,\n    backendName: 'cpu',\n    kernelFunc: mean\n};\n//# sourceMappingURL=Mean.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Min, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function min(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'min');\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('min', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let min = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value < min) {\n                min = value;\n            }\n        }\n        vals[i] = min;\n    }\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo($x);\n    }\n    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n    if (keepDims) {\n        const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        const reshapedResult = reshape({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });\n        backend.disposeIntermediateTensorInfo(result);\n        return reshapedResult;\n    }\n    return result;\n}\nexport const minConfig = {\n    kernelName: Min,\n    backendName: 'cpu',\n    kernelFunc: min\n};\n//# sourceMappingURL=Min.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { MirrorPad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function mirrorPad(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, mode } = attrs;\n    assertNotComplex(x, 'mirrorPad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const end = paddings.map((p, i) => p[0] + x.shape[i]);\n    const offset = mode === 'reflect' ? 0 : 1;\n    const xVals = backend.data.get(x.dataId).values;\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    for (let i = 0; i < resultSize; i++) {\n        let coords = util.indexToLoc(i, resultRank, resultStrides);\n        for (let i = 0; i < resultRank; i++) {\n            if (coords[i] < start[i]) {\n                coords[i] = start[i] * 2 - coords[i] - offset;\n            }\n            else if (coords[i] >= end[i]) {\n                coords[i] = (end[i] - 1) * 2 - coords[i] + offset;\n            }\n        }\n        coords = coords.map((c, i) => c - start[i]);\n        const inIndex = util.locToIndex(coords, xRank, xStrides);\n        resVals[i] = xVals[inIndex];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const mirrorPadConfig = {\n    kernelName: MirrorPad,\n    backendName: 'cpu',\n    kernelFunc: mirrorPad\n};\n//# sourceMappingURL=MirrorPad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Mod } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const modImpl = createSimpleBinaryKernelImpl(((aValue, bValue) => {\n    const rem = aValue % bValue;\n    if ((aValue < 0 && bValue < 0) || (aValue >= 0 && bValue >= 0)) {\n        return rem;\n    }\n    else {\n        return (rem + bValue) % bValue;\n    }\n}));\nexport const mod = binaryKernelFunc(Mod, modImpl);\nexport const modConfig = {\n    kernelName: Mod,\n    backendName: 'cpu',\n    kernelFunc: mod\n};\n//# sourceMappingURL=Mod.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Softmax, util } from '@tensorflow/tfjs-core';\nimport { exp } from './Exp';\nimport { max } from './Max';\nimport { div } from './RealDiv';\nimport { reshape } from './Reshape';\nimport { sub } from './Sub';\nimport { sum } from './Sum';\nexport function softmax(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { dim } = attrs;\n    const logitsRank = logits.shape.length;\n    let $dim = dim;\n    if ($dim === -1) {\n        $dim = logitsRank - 1;\n    }\n    if ($dim !== logitsRank - 1) {\n        throw Error('Softmax along a non-last dimension is not yet supported. ' +\n            `Logits was rank ${logitsRank} and dim was ${$dim}`);\n    }\n    const axes = util.parseAxisParam([$dim], logits.shape);\n    const maxLogit = max({\n        inputs: { x: logits },\n        backend,\n        attrs: { reductionIndices: axes, keepDims: false }\n    });\n    const expandedShape = backend_util.expandShapeToKeepDim(maxLogit.shape, axes);\n    const maxLogitReshaped = reshape({ inputs: { x: maxLogit }, backend, attrs: { shape: expandedShape } });\n    const a = sub({ inputs: { a: logits, b: maxLogitReshaped }, backend });\n    const b = exp({ inputs: { x: a }, backend });\n    const sumExp = sum({ inputs: { x: b }, backend, attrs: { axis: axes, keepDims: false } });\n    const sumReshaped = reshape({ inputs: { x: sumExp }, backend, attrs: { shape: expandedShape } });\n    const result = div({ inputs: { a: b, b: sumReshaped }, backend });\n    backend.disposeIntermediateTensorInfo(maxLogit);\n    backend.disposeIntermediateTensorInfo(maxLogitReshaped);\n    backend.disposeIntermediateTensorInfo(a);\n    backend.disposeIntermediateTensorInfo(b);\n    backend.disposeIntermediateTensorInfo(sumExp);\n    backend.disposeIntermediateTensorInfo(sumReshaped);\n    return result;\n}\nexport const softmaxConfig = {\n    kernelName: Softmax,\n    backendName: 'cpu',\n    kernelFunc: softmax\n};\n//# sourceMappingURL=Softmax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Multinomial, util } from '@tensorflow/tfjs-core';\nimport * as seedrandom from 'seedrandom';\nimport { assertNotComplex } from '../cpu_util';\nimport { softmax } from './Softmax';\nexport function multinomial(args) {\n    const { inputs, backend, attrs } = args;\n    const { logits } = inputs;\n    const { numSamples, seed, normalized } = attrs;\n    assertNotComplex(logits, 'multinomial');\n    const probabilities = normalized ?\n        logits :\n        softmax({ inputs: { logits }, backend, attrs: { dim: -1 } });\n    const batchSize = probabilities.shape[0];\n    const numEvents = probabilities.shape[1];\n    const probVals = backend.data.get(probabilities.dataId).values;\n    const resShape = [batchSize, numSamples];\n    const resVals = util.makeZerosTypedArray(util.sizeFromShape(resShape), 'int32');\n    for (let b = 0; b < batchSize; ++b) {\n        const offset = b * numEvents;\n        // The cdf won't include the last event. It will be implicit if no other\n        // event happened.\n        const cdf = new Float32Array(numEvents - 1);\n        cdf[0] = probVals[offset];\n        for (let event = 1; event < cdf.length; ++event) {\n            cdf[event] = cdf[event - 1] + probVals[offset + event];\n        }\n        const random = seedrandom.alea(seed.toString());\n        const outOffset = b * numSamples;\n        for (let sampleId = 0; sampleId < numSamples; ++sampleId) {\n            const r = random();\n            // Assume last event happened by default.\n            resVals[outOffset + sampleId] = cdf.length;\n            for (let event = 0; event < cdf.length; event++) {\n                if (r < cdf[event]) {\n                    resVals[outOffset + sampleId] = event;\n                    break;\n                }\n            }\n        }\n    }\n    if (!normalized) {\n        backend.disposeIntermediateTensorInfo(probabilities);\n    }\n    return backend.makeTensorInfo(resShape, 'int32', resVals);\n}\nexport const multinomialConfig = {\n    kernelName: Multinomial,\n    backendName: 'cpu',\n    kernelFunc: multinomial\n};\n//# sourceMappingURL=Multinomial.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV3 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV3Impl = kernel_impls.nonMaxSuppressionV3Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV3(args) {\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold } = attrs;\n    assertNotComplex(boxes, 'NonMaxSuppression');\n    const boxesVals = backend.data.get(boxes.dataId).values;\n    const scoresVals = backend.data.get(scores.dataId).values;\n    const { selectedIndices } = nonMaxSuppressionV3Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold);\n    return backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices));\n}\nexport const nonMaxSuppressionV3Config = {\n    kernelName: NonMaxSuppressionV3,\n    backendName: 'cpu',\n    kernelFunc: nonMaxSuppressionV3\n};\n//# sourceMappingURL=NonMaxSuppressionV3.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV4 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV4Impl = kernel_impls.nonMaxSuppressionV4Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV4(args) {\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize } = attrs;\n    assertNotComplex(boxes, 'NonMaxSuppressionPadded');\n    const boxesVals = backend.data.get(boxes.dataId).values;\n    const scoresVals = backend.data.get(scores.dataId).values;\n    const { selectedIndices, validOutputs } = nonMaxSuppressionV4Impl(boxesVals, scoresVals, maxOutputSize, iouThreshold, scoreThreshold, padToMaxOutputSize);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([], 'int32', new Int32Array([validOutputs]))\n    ];\n}\nexport const nonMaxSuppressionV4Config = {\n    kernelName: NonMaxSuppressionV4,\n    backendName: 'cpu',\n    kernelFunc: nonMaxSuppressionV4\n};\n//# sourceMappingURL=NonMaxSuppressionV4.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { kernel_impls, NonMaxSuppressionV5 } from '@tensorflow/tfjs-core';\nconst nonMaxSuppressionV5Impl = kernel_impls.nonMaxSuppressionV5Impl;\nimport { assertNotComplex } from '../cpu_util';\nexport function nonMaxSuppressionV5(args) {\n    const { inputs, backend, attrs } = args;\n    const { boxes, scores } = inputs;\n    const { maxOutputSize, iouThreshold, scoreThreshold, softNmsSigma } = attrs;\n    assertNotComplex(boxes, 'NonMaxSuppressionWithScore');\n    const boxesVals = backend.data.get(boxes.dataId).values;\n    const scoresVals = backend.data.get(scores.dataId).values;\n    const maxOutputSizeVal = maxOutputSize;\n    const iouThresholdVal = iouThreshold;\n    const scoreThresholdVal = scoreThreshold;\n    const softNmsSigmaVal = softNmsSigma;\n    const { selectedIndices, selectedScores } = nonMaxSuppressionV5Impl(boxesVals, scoresVals, maxOutputSizeVal, iouThresholdVal, scoreThresholdVal, softNmsSigmaVal);\n    return [\n        backend.makeTensorInfo([selectedIndices.length], 'int32', new Int32Array(selectedIndices)),\n        backend.makeTensorInfo([selectedScores.length], 'float32', new Float32Array(selectedScores))\n    ];\n}\nexport const nonMaxSuppressionV5Config = {\n    kernelName: NonMaxSuppressionV5,\n    backendName: 'cpu',\n    kernelFunc: nonMaxSuppressionV5\n};\n//# sourceMappingURL=NonMaxSuppressionV5.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { NotEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const notEqualImpl = createSimpleBinaryKernelImpl(((a, b) => (a !== b) ? 1 : 0));\nexport const notEqual = binaryKernelFunc(NotEqual, notEqualImpl, null /* complexOp */, 'bool');\nexport const notEqualConfig = {\n    kernelName: NotEqual,\n    backendName: 'cpu',\n    kernelFunc: notEqual\n};\n//# sourceMappingURL=NotEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OneHot, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function oneHot(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices } = inputs;\n    const { depth, onValue, offValue } = attrs;\n    assertNotComplex(indices, 'oneHot');\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const res = new Float32Array(indicesSize * depth);\n    res.fill(offValue);\n    const indicesVal = backend.data.get(indices.dataId).values;\n    for (let event = 0; event < indicesSize; ++event) {\n        if (indicesVal[event] >= 0 && indicesVal[event] < depth) {\n            res[event * depth + indicesVal[event]] = onValue;\n        }\n    }\n    return backend.makeTensorInfo([...indices.shape, depth], 'int32', res);\n}\nexport const oneHotConfig = {\n    kernelName: OneHot,\n    backendName: 'cpu',\n    kernelFunc: oneHot\n};\n//# sourceMappingURL=OneHot.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ZerosLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nexport function zerosLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('zerosLike is not supported for string tensors');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = zerosLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({ backend, attrs: { shape: x.shape, value: 0, dtype: x.dtype } });\n    }\n}\nexport const zerosLikeConfig = {\n    kernelName: ZerosLike,\n    backendName: 'cpu',\n    kernelFunc: zerosLike\n};\n//# sourceMappingURL=ZerosLike.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { OnesLike } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { fill } from './Fill';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { zerosLike } from './ZerosLike';\nexport function onesLike(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    if (x.dtype === 'string') {\n        throw new Error('onesLike is not supported for string tensors');\n    }\n    else if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const r = onesLike({ inputs: { x: realPart }, backend });\n        const imagPart = imag({ inputs: { input: x }, backend });\n        const i = zerosLike({ inputs: { x: imagPart }, backend });\n        const result = complex({ inputs: { real: r, imag: i }, backend });\n        backend.disposeIntermediateTensorInfo(realPart);\n        backend.disposeIntermediateTensorInfo(r);\n        backend.disposeIntermediateTensorInfo(imagPart);\n        backend.disposeIntermediateTensorInfo(i);\n        return result;\n    }\n    else {\n        return fill({ backend, attrs: { shape: x.shape, value: 1, dtype: x.dtype } });\n    }\n}\nexport const onesLikeConfig = {\n    kernelName: OnesLike,\n    backendName: 'cpu',\n    kernelFunc: onesLike\n};\n//# sourceMappingURL=OnesLike.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pack, util } from '@tensorflow/tfjs-core';\nimport { concat } from './Concat';\nimport { expandDims } from './ExpandDims';\nexport function pack(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    if (inputs.length === 1) {\n        return expandDims({ inputs: { input: inputs[0] }, backend, attrs: { dim: axis } });\n    }\n    const shape = inputs[0].shape;\n    const dtype = inputs[0].dtype;\n    inputs.forEach(t => {\n        util.assertShapesMatch(shape, t.shape, 'All tensors passed to stack must have matching shapes');\n        util.assert(dtype === t.dtype, () => 'All tensors passed to stack must have matching dtypes');\n    });\n    const intermediateTensorInfos = [];\n    const expandedTensors = inputs.map(t => {\n        const expandedT = expandDims({ inputs: { input: t }, backend, attrs: { dim: axis } });\n        intermediateTensorInfos.push(expandedT);\n        return expandedT;\n    });\n    const result = concat({ inputs: expandedTensors, backend, attrs: { axis } });\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const packConfig = {\n    kernelName: Pack,\n    backendName: 'cpu',\n    kernelFunc: pack\n};\n//# sourceMappingURL=Pack.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { PadV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function padV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { paddings, constantValue } = attrs;\n    assertNotComplex(x, 'pad');\n    const outShape = paddings.map((p, i) => p[0] /* beforePad */ + x.shape[i] + p[1] /* afterPad */);\n    const start = paddings.map(p => p[0]);\n    const xVals = backend.data.get(x.dataId).values;\n    const xSize = util.sizeFromShape(x.shape);\n    const xRank = x.shape.length;\n    const xStrides = util.computeStrides(x.shape);\n    const resultSize = util.sizeFromShape(outShape);\n    const resultRank = outShape.length;\n    const resultStrides = util.computeStrides(outShape);\n    const resVals = util.getTypedArrayFromDType(x.dtype, resultSize);\n    if (constantValue !== 0) {\n        resVals.fill(constantValue);\n    }\n    for (let i = 0; i < xSize; i++) {\n        const coords = util.indexToLoc(i, xRank, xStrides);\n        const outCoords = coords.map((c, i) => c + start[i]);\n        const outIndex = util.locToIndex(outCoords, resultRank, resultStrides);\n        resVals[outIndex] = xVals[i];\n    }\n    const outId = backend.write(resVals, outShape, x.dtype);\n    return { dataId: outId, shape: outShape, dtype: x.dtype };\n}\nexport const padV2Config = {\n    kernelName: PadV2,\n    backendName: 'cpu',\n    kernelFunc: padV2\n};\n//# sourceMappingURL=PadV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Pow } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const powImpl = createSimpleBinaryKernelImpl((a, b) => Math.pow(a, b));\nexport const pow = binaryKernelFunc(Pow, powImpl);\nexport const powConfig = {\n    kernelName: Pow,\n    backendName: 'cpu',\n    kernelFunc: pow\n};\n//# sourceMappingURL=Pow.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Range } from '@tensorflow/tfjs-core';\nimport { rangeImpl } from './Range_impl';\nexport function range(args) {\n    const { backend, attrs } = args;\n    const { start, stop, dtype, step } = attrs;\n    const values = rangeImpl(start, stop, step, dtype);\n    return backend.makeTensorInfo([values.length], dtype, values);\n}\nexport const rangeConfig = {\n    kernelName: Range,\n    backendName: 'cpu',\n    kernelFunc: range\n};\n//# sourceMappingURL=Range.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reciprocal } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const reciprocal = unaryKernelFunc(Reciprocal, (xi) => 1 / xi);\nexport const reciprocalConfig = {\n    kernelName: Reciprocal,\n    backendName: 'cpu',\n    kernelFunc: reciprocal,\n};\n//# sourceMappingURL=Reciprocal.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinear, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeBilinear(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    assertNotComplex(images, 'resizeBilinear');\n    const imagesStrides = util.computeStrides(images.shape);\n    const [newHeight, newWidth] = size;\n    const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n    const xValues = backend.data.get(images.dataId).values;\n    const result = new Float32Array(util.sizeFromShape([batch, newHeight, newWidth, numChannels]));\n    const effectiveInputSize = [\n        (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n        (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutputSize = [\n        (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n        (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    let outputIdx = 0;\n    const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n    for (let b = 0; b < batch; b++) {\n        for (let r = 0; r < newHeight; r++) {\n            let sourceFracRow;\n            if (halfPixelCenters) {\n                sourceFracRow = effectiveRowSizeRatio * (r + 0.5) - 0.5;\n            }\n            else {\n                sourceFracRow = effectiveRowSizeRatio * r;\n            }\n            const sourceRowFloor = Math.max(0, Math.floor(sourceFracRow));\n            const rowFrac = sourceFracRow - sourceRowFloor;\n            const sourceRowCeil = Math.min(oldHeight - 1, Math.ceil(sourceFracRow));\n            const topRowOffset = b * imagesStrides[0] + sourceRowFloor * imagesStrides[1];\n            const botRowOffset = b * imagesStrides[0] + sourceRowCeil * imagesStrides[1];\n            for (let c = 0; c < newWidth; c++) {\n                let sourceFracCol;\n                if (halfPixelCenters) {\n                    sourceFracCol = effectiveColSizeRatio * (c + 0.5) - 0.5;\n                }\n                else {\n                    sourceFracCol = effectiveColSizeRatio * c;\n                }\n                const sourceColFloor = Math.max(0, Math.floor(sourceFracCol));\n                const colFrac = sourceFracCol - sourceColFloor;\n                const sourceColCeil = Math.min(oldWidth - 1, Math.ceil(sourceFracCol));\n                const topLeftOffest = topRowOffset + sourceColFloor * imagesStrides[2];\n                const botLeftOffset = botRowOffset + sourceColFloor * imagesStrides[2];\n                const topRightOffset = topRowOffset + sourceColCeil * imagesStrides[2];\n                const botRightOffest = botRowOffset + sourceColCeil * imagesStrides[2];\n                for (let d = 0; d < numChannels; d++) {\n                    // Begin shader.\n                    // Compute the fractional index of the source.\n                    const topLeft = xValues[topLeftOffest + d];\n                    const bottomLeft = xValues[botLeftOffset + d];\n                    const topRight = xValues[topRightOffset + d];\n                    const bottomRight = xValues[botRightOffest + d];\n                    const top = topLeft + (topRight - topLeft) * colFrac;\n                    const bottom = bottomLeft + (bottomRight - bottomLeft) * colFrac;\n                    const newValue = top + (bottom - top) * rowFrac;\n                    result[outputIdx++] = newValue;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], 'float32', result);\n}\nexport const resizeBilinearConfig = {\n    kernelName: ResizeBilinear,\n    backendName: 'cpu',\n    kernelFunc: resizeBilinear\n};\n//# sourceMappingURL=ResizeBilinear.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeBilinearGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeBilinearGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    assertNotComplex([dy, images], 'resizeBilinearGrad');\n    const imagesStrides = util.computeStrides(images.shape);\n    const [batch, xHeight, xWidth, depth] = images.shape;\n    const [, yHeight, yWidth] = dy.shape;\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass and add the\n    // corresponding coefficient from dy to the gradient (with some\n    // interpolation).\n    const effectiveXSize = [\n        (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n        (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n    const effectiveYSize = [\n        (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n        (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/3039375c86a5bbc9610c7725dcaa95d635f87ba2/tensorflow/core/kernels/resize_bilinear_op.cc#L275\n    const dyValues = backend.data.get(dy.dataId).values;\n    let offset = 0;\n    for (let b = 0; b < batch; b++) {\n        const bOffset = b * imagesStrides[0];\n        for (let r = 0; r < yHeight; r++) {\n            const dxR = r * heightScale;\n            const topDxRIndex = Math.floor(dxR);\n            const bottomDxRIndex = Math.min(Math.ceil(dxR), xHeight - 1);\n            const topDxROffset = bOffset + topDxRIndex * imagesStrides[1];\n            const bottomDxROffset = bOffset + bottomDxRIndex * imagesStrides[1];\n            const dxRLerp = dxR - topDxRIndex;\n            const inverseDxRLerp = 1.0 - dxRLerp;\n            for (let c = 0; c < yWidth; c++) {\n                const dxC = c * widthScale;\n                const leftDxCIndex = Math.floor(dxC);\n                const rightDxCIndex = Math.min(Math.ceil(dxC), xWidth - 1);\n                const dxCLerp = dxC - leftDxCIndex;\n                const inverseDxCLerp = 1.0 - dxCLerp;\n                const topLeftRCOffset = topDxROffset + leftDxCIndex * imagesStrides[2];\n                const topRightRCOffset = topDxROffset + rightDxCIndex * imagesStrides[2];\n                const bottomLeftRCOffset = bottomDxROffset + leftDxCIndex * imagesStrides[2];\n                const bottomRightRCOffset = bottomDxROffset + rightDxCIndex * imagesStrides[2];\n                const inverseDxRLerpTimesInverseDxCLerp = inverseDxRLerp * inverseDxCLerp;\n                const inverseDxRLerpTimesDxCLerp = inverseDxRLerp * dxCLerp;\n                const dxRLerpTimesInverseDxCLerp = dxRLerp * inverseDxCLerp;\n                const dxRLerpTimesDxCLerp = dxRLerp * dxCLerp;\n                for (let d = 0; d < depth; d++) {\n                    const dyVal = dyValues[offset++];\n                    output[topLeftRCOffset + d] +=\n                        dyVal * inverseDxRLerpTimesInverseDxCLerp;\n                    output[topRightRCOffset + d] += dyVal * inverseDxRLerpTimesDxCLerp;\n                    output[bottomLeftRCOffset + d] += dyVal * dxRLerpTimesInverseDxCLerp;\n                    output[bottomRightRCOffset + d] += dyVal * dxRLerpTimesDxCLerp;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batch, xWidth, xHeight, depth], 'float32', output);\n}\nexport const resizeBilinearGradConfig = {\n    kernelName: ResizeBilinearGrad,\n    backendName: 'cpu',\n    kernelFunc: resizeBilinearGrad\n};\n//# sourceMappingURL=ResizeBilinearGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighbor, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeNearestNeighbor(args) {\n    const { inputs, backend, attrs } = args;\n    const { images } = inputs;\n    const { alignCorners, halfPixelCenters, size } = attrs;\n    assertNotComplex(images, 'resizeNearestNeighbor');\n    const imagesStrides = util.computeStrides(images.shape);\n    const [newHeight, newWidth] = size;\n    const [batch, oldHeight, oldWidth, numChannels] = images.shape;\n    const xValues = backend.data.get(images.dataId).values;\n    const output = new Float32Array(batch * newHeight * newWidth * numChannels);\n    const effectiveInputSize = [\n        (alignCorners && newHeight > 1) ? oldHeight - 1 : oldHeight,\n        (alignCorners && newWidth > 1) ? oldWidth - 1 : oldWidth\n    ];\n    const effectiveOutputSize = [\n        (alignCorners && newHeight > 1) ? newHeight - 1 : newHeight,\n        (alignCorners && newWidth > 1) ? newWidth - 1 : newWidth\n    ];\n    const effectiveRowSizeRatio = effectiveInputSize[0] / effectiveOutputSize[0];\n    const effectiveColSizeRatio = effectiveInputSize[1] / effectiveOutputSize[1];\n    let outputOffset = 0;\n    for (let b = 0; b < batch; b++) {\n        const batchOffset = b * imagesStrides[0];\n        for (let r = 0; r < newHeight; r++) {\n            const sourceFracRow = halfPixelCenters ?\n                effectiveRowSizeRatio * (r + 0.5) :\n                effectiveRowSizeRatio * r;\n            let sourceNearestRow = Math.min(oldHeight - 1, alignCorners ? Math.round(sourceFracRow) : Math.floor(sourceFracRow));\n            if (halfPixelCenters) {\n                sourceNearestRow = Math.max(0, sourceNearestRow);\n            }\n            const rowOffset = batchOffset + sourceNearestRow * imagesStrides[1];\n            for (let c = 0; c < newWidth; c++) {\n                const sourceFracCol = halfPixelCenters ?\n                    effectiveColSizeRatio * (c + 0.5) :\n                    effectiveColSizeRatio * c;\n                let sourceNearestCol = Math.min(oldWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                    Math.floor(sourceFracCol));\n                if (halfPixelCenters) {\n                    sourceNearestCol = Math.max(0, sourceNearestCol);\n                }\n                const colOffset = rowOffset + sourceNearestCol * imagesStrides[2];\n                for (let d = 0; d < numChannels; d++) {\n                    // Begin shader.\n                    // Compute the fractional index of the source.\n                    const newVal = xValues[colOffset + d];\n                    output[outputOffset++] = newVal;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batch, newHeight, newWidth, numChannels], images.dtype, output);\n}\nexport const resizeNearestNeighborConfig = {\n    kernelName: ResizeNearestNeighbor,\n    backendName: 'cpu',\n    kernelFunc: resizeNearestNeighbor\n};\n//# sourceMappingURL=ResizeNearestNeighbor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ResizeNearestNeighborGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function resizeNearestNeighborGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { images, dy } = inputs;\n    const { alignCorners } = attrs;\n    assertNotComplex([dy, images], 'resizeNearestNeighborGrad');\n    const imagesStrides = util.computeStrides(images.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    const [batch, xHeight, xWidth, depth] = images.shape;\n    const [, yHeight, yWidth] = dy.shape;\n    const output = new Float32Array(batch * xHeight * xWidth * depth);\n    const dyValues = backend.data.get(dy.dataId).values;\n    // In the backwards pass, we want to find the pixels that were generated\n    // for each pixel in the input image the forward pass\n    const effectiveXSize = [\n        (alignCorners && yHeight > 1) ? xHeight - 1 : xHeight,\n        (alignCorners && yWidth > 1) ? xWidth - 1 : xWidth\n    ];\n    const effectiveYSize = [\n        (alignCorners && yHeight > 1) ? yHeight - 1 : yHeight,\n        (alignCorners && yWidth > 1) ? yWidth - 1 : yWidth\n    ];\n    const heightScale = effectiveXSize[0] / effectiveYSize[0];\n    const widthScale = effectiveXSize[1] / effectiveYSize[1];\n    const invHeightScale = 1 / heightScale;\n    const invWidthScale = 1 / widthScale;\n    // This defines the size of the window of values around a particular\n    // index in dy that we want to search for contributions to dx.\n    const winHeight = (Math.ceil(invHeightScale) * 2) + 2;\n    const winWidth = (Math.ceil(invWidthScale) * 2) + 2;\n    // Loop over the output space.\n    for (let b = 0; b < batch; b++) {\n        const batchOffset = b * imagesStrides[0];\n        for (let r = 0; r < xHeight; r++) {\n            const rowOffset = batchOffset + r * imagesStrides[1];\n            // Compute bounds for where in dy we will look\n            const startRLerp = Math.floor(r * invHeightScale);\n            const startDyR = Math.floor(startRLerp - (winHeight / 2));\n            for (let c = 0; c < xWidth; c++) {\n                const colOffset = rowOffset + c * imagesStrides[2];\n                // Compute bounds for where in dy we will look\n                const startCLerp = Math.floor(c * invWidthScale);\n                const startDyC = Math.floor(startCLerp - (winWidth / 2));\n                for (let d = 0; d < depth; d++) {\n                    let accum = 0;\n                    // loop over dy\n                    for (let dyRIndex = 0; dyRIndex < winHeight; dyRIndex++) {\n                        const dyR = dyRIndex + startDyR;\n                        // Guard against the window exceeding the bounds of dy\n                        if (dyR < 0 || dyR >= yHeight) {\n                            continue;\n                        }\n                        const dyROffset = batchOffset + dyR * dyStrides[1];\n                        const sourceFracRow = dyR * heightScale;\n                        const sourceNearestRow = Math.min(xHeight - 1, alignCorners ? Math.round(sourceFracRow) :\n                            Math.floor(sourceFracRow));\n                        if (r !== sourceNearestRow) {\n                            continue;\n                        }\n                        for (let dyCIndex = 0; dyCIndex < winWidth; dyCIndex++) {\n                            const dyC = dyCIndex + startDyC;\n                            // Guard against the window exceeding the bounds of dy\n                            if (dyC < 0 || dyC >= yWidth) {\n                                continue;\n                            }\n                            const dyCOffset = dyROffset + dyC * dyStrides[2];\n                            const sourceFracCol = dyC * widthScale;\n                            const sourceNearestCol = Math.min(xWidth - 1, alignCorners ? Math.round(sourceFracCol) :\n                                Math.floor(sourceFracCol));\n                            if (c === sourceNearestCol) {\n                                accum += dyValues[dyCOffset + d];\n                            }\n                        }\n                    }\n                    output[colOffset + d] = accum;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(images.shape, images.dtype, output);\n}\nexport const resizeNearestNeighborGradConfig = {\n    kernelName: ResizeNearestNeighborGrad,\n    backendName: 'cpu',\n    kernelFunc: resizeNearestNeighborGrad\n};\n//# sourceMappingURL=ResizeNearestNeighborGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Reverse, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { identity } from './Identity';\nexport function reverse(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dims } = attrs;\n    assertNotComplex(x, 'reverse');\n    const xRank = x.shape.length;\n    const $dims = util.parseAxisParam(dims, x.shape);\n    if (xRank === 0) {\n        return identity({ inputs: { x }, backend });\n    }\n    const outBuf = new TensorBuffer(x.shape, x.dtype);\n    const xBuf = backend.bufferSync(x);\n    for (let i = 0; i < outBuf.size; i++) {\n        const outLoc = outBuf.indexToLoc(i);\n        const inLoc = outLoc.slice();\n        $dims.forEach(d => inLoc[d] = x.shape[d] - 1 - inLoc[d]);\n        outBuf.set(xBuf.get(...inLoc), ...outLoc);\n    }\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const reverseConfig = {\n    kernelName: Reverse,\n    backendName: 'cpu',\n    kernelFunc: reverse\n};\n//# sourceMappingURL=Reverse.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, RotateWithOffset, util } from '@tensorflow/tfjs-core';\nexport const rotateWithOffsetConfig = {\n    kernelName: RotateWithOffset,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const { radians, fillValue, center } = attrs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const [centerX, centerY] = backend_util.getImageCenter(center, imageHeight, imageWidth);\n        const fullOpacityValue = 255;\n        const sinFactor = Math.sin(radians);\n        const cosFactor = Math.cos(radians);\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const y = coords[1];\n                        // coordX/coordY are the result of rotating and translating x/y.\n                        let coordX = (x - centerX) * cosFactor - (y - centerY) * sinFactor;\n                        let coordY = (x - centerX) * sinFactor + (y - centerY) * cosFactor;\n                        coordX = Math.round(coordX + centerX);\n                        coordY = Math.round(coordY + centerY);\n                        let outputValue = fillValue;\n                        if (typeof fillValue !== 'number') {\n                            if (channel === 3) {\n                                outputValue = fullOpacityValue;\n                            }\n                            else {\n                                outputValue = fillValue[channel];\n                            }\n                        }\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth && coordY >= 0 &&\n                            coordY < imageHeight) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedRowOffset = coordY * (imageWidth * numChannels);\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rotatedRowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=RotateWithOffset.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Round } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const round = unaryKernelFunc(Round, (xi) => {\n    // The algorithm is based on banker's rounding.\n    const base = Math.floor(xi);\n    if (xi - base < 0.5) {\n        return Math.floor(xi);\n    }\n    else if (xi - base > 0.5) {\n        return Math.ceil(xi);\n    }\n    else {\n        if (base % 2.0 === 0.0) {\n            return base;\n        }\n        else {\n            return base + 1.0;\n        }\n    }\n});\nexport const roundConfig = {\n    kernelName: Round,\n    backendName: 'cpu',\n    kernelFunc: round,\n};\n//# sourceMappingURL=Round.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function scatterImpl(indices, updates, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, defaultValue, sumDupeIndices) {\n    const flattenShape = [outputSize / sliceSize, sliceSize];\n    const indicesData = indices.values;\n    const updatesData = updates.values;\n    if (outputSize === 0) {\n        return buffer(shape, updates.dtype);\n    }\n    const outBuf = buffer(flattenShape, updates.dtype);\n    outBuf.values.fill(defaultValue);\n    for (let i = 0; i < numUpdates; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            index.push(dim);\n            flattenIndex += dim * strides[j];\n        }\n        if (flattenIndex < 0 || flattenIndex >= outputSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${shape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            if (sumDupeIndices) {\n                outBuf.values[flattenIndex * sliceSize + k] +=\n                    updatesData[i * sliceSize + k];\n            }\n            else {\n                outBuf.values[flattenIndex * sliceSize + k] = updates.rank === 0 ?\n                    updatesData[0] :\n                    updatesData[i * sliceSize + k];\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Scatter_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, ScatterNd } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function scatterNd(args) {\n    const { inputs, backend, attrs } = args;\n    const { indices, updates } = inputs;\n    const { shape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(updates, indices, shape);\n    const sumDupeIndices = true;\n    const indicesBuf = backend.bufferSync(indices);\n    const updatesBuf = backend.bufferSync(updates);\n    const outBuf = scatterImpl(indicesBuf, updatesBuf, shape, outputSize, sliceSize, numUpdates, sliceRank, strides, 0 /* defaultValue */, sumDupeIndices);\n    return backend.makeTensorInfo(shape, outBuf.dtype, outBuf.values);\n}\nexport const scatterNdConfig = {\n    kernelName: ScatterNd,\n    backendName: 'cpu',\n    kernelFunc: scatterNd\n};\n//# sourceMappingURL=ScatterNd.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Select, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function select(args) {\n    const { inputs, backend } = args;\n    const { condition, t, e } = inputs;\n    assertNotComplex([condition, t, e], 'select');\n    const conditionRank = condition.shape.length;\n    const values = backend.data.get(condition.dataId).values;\n    const tValues = backend.data.get(t.dataId).values;\n    const eValues = backend.data.get(e.dataId).values;\n    const resultDtype = upcastType(t.dtype, e.dtype);\n    const newValues = util.makeZerosTypedArray(util.sizeFromShape(t.shape), resultDtype);\n    let index = 0;\n    const offset = conditionRank === 0 || conditionRank > 1 || t.shape.length === 1 ?\n        1 :\n        util.sizeFromShape(t.shape.slice(1));\n    for (let i = 0; i < values.length; i++) {\n        for (let j = 0; j < offset; j++) {\n            if (values[i] === 1) {\n                newValues[index++] = tValues[i];\n            }\n            else {\n                newValues[index++] = eValues[i];\n            }\n        }\n    }\n    return backend.makeTensorInfo(t.shape, resultDtype, newValues);\n}\nexport const selectConfig = {\n    kernelName: Select,\n    backendName: 'cpu',\n    kernelFunc: select\n};\n//# sourceMappingURL=Select.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Selu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nconst scaleAlpha = backend_util.SELU_SCALEALPHA;\nconst scale = backend_util.SELU_SCALE;\nexport const selu = unaryKernelFunc(Selu, (xi) => {\n    if (xi >= 0) {\n        return scale * xi;\n    }\n    else {\n        return scaleAlpha * (Math.exp(xi) - 1);\n    }\n});\nexport const seluConfig = {\n    kernelName: Selu,\n    backendName: 'cpu',\n    kernelFunc: selu,\n};\n//# sourceMappingURL=Selu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sign } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sign = unaryKernelFunc(Sign, (xi) => {\n    if (xi < 0) {\n        return -1;\n    }\n    else if (xi > 0) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n});\nexport const signConfig = {\n    kernelName: Sign,\n    backendName: 'cpu',\n    kernelFunc: sign,\n};\n//# sourceMappingURL=Sign.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sin = unaryKernelFunc(Sin, (xi) => Math.sin(xi));\nexport const sinConfig = {\n    kernelName: Sin,\n    backendName: 'cpu',\n    kernelFunc: sin,\n};\n//# sourceMappingURL=Sin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sinh = unaryKernelFunc(Sinh, (xi) => Math.sinh(xi));\nexport const sinhConfig = {\n    kernelName: Sinh,\n    backendName: 'cpu',\n    kernelFunc: sinh,\n};\n//# sourceMappingURL=Sinh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Softplus } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\n// mirrors the implementation of tf.nn.softplus: https://goo.gl/vkcvwX\n// epsilon is the difference between 1.0 and the next representable float.\n// For a single precision 32 bit float this should be 2^-23, see:\n// https://math.byu.edu/~schow/work/IEEEFloatingPoint.htm\nconst epsilon = 1.1920928955078125e-7;\nconst threshold = Math.log(epsilon) + 2.0;\nexport const softplus = unaryKernelFunc(Softplus, (xi) => {\n    // Value above which exp(x) may overflow, but softplus(x) == x\n    // is within machine epsilon.\n    const tooLarge = xi > -threshold;\n    // Value below which exp(x) may underflow, but softplus(x) == exp(x)\n    // is within machine epsilon.\n    const tooSmall = xi < threshold;\n    const expX = Math.exp(xi);\n    let result;\n    if (tooSmall) {\n        result = expX;\n    }\n    else if (tooLarge) {\n        result = xi;\n    }\n    else {\n        result = Math.log(1.0 + expX);\n    }\n    return result;\n});\nexport const softplusConfig = {\n    kernelName: Softplus,\n    backendName: 'cpu',\n    kernelFunc: softplus,\n};\n//# sourceMappingURL=Softplus.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SpaceToBatchND, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { padV2Config } from './PadV2';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function spaceToBatchND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, paddings } = attrs;\n    assertNotComplex([x], 'spaceToBatchND');\n    const prod = util.sizeFromShape(blockShape);\n    const completePaddings = [[0, 0]];\n    completePaddings.push(...paddings);\n    for (let i = 1 + blockShape.length; i < x.shape.length; ++i) {\n        completePaddings.push([0, 0]);\n    }\n    const paddedX = padV2Config.kernelFunc({\n        inputs: { x },\n        backend,\n        attrs: { paddings: completePaddings, constantValue: 0 }\n    });\n    const reshapedPaddedShape = backend_util.getReshaped(paddedX.shape, blockShape, prod, false);\n    const permutedReshapedPaddedPermutation = backend_util.getPermuted(reshapedPaddedShape.length, blockShape.length, false);\n    const flattenShape = backend_util.getReshapedPermuted(paddedX.shape, blockShape, prod, false);\n    const reshapeInputs = { x: paddedX };\n    const reshapeAttrs = { shape: reshapedPaddedShape };\n    const paddedXReshaped = reshape({ inputs: reshapeInputs, backend, attrs: reshapeAttrs });\n    const transposeInputs = { x: paddedXReshaped };\n    const transposeAttrs = { perm: permutedReshapedPaddedPermutation };\n    const paddedXT = transpose({ inputs: transposeInputs, backend, attrs: transposeAttrs });\n    const resultReshapeInputs = { x: paddedXT };\n    const resultReshapeAttrs = { shape: flattenShape };\n    const result = reshape({ inputs: resultReshapeInputs, backend, attrs: resultReshapeAttrs });\n    backend.disposeIntermediateTensorInfo(paddedX);\n    backend.disposeIntermediateTensorInfo(paddedXReshaped);\n    backend.disposeIntermediateTensorInfo(paddedXT);\n    return result;\n}\nexport const spaceToBatchNDConfig = {\n    kernelName: SpaceToBatchND,\n    backendName: 'cpu',\n    kernelFunc: spaceToBatchND\n};\n//# sourceMappingURL=SpaceToBatchND.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseFillEmptyRows } from '@tensorflow/tfjs-core';\nimport { sparseFillEmptyRowsImpl } from './SparseFillEmptyRows_impl';\nexport function sparseFillEmptyRows(args) {\n    const { inputs, backend } = args;\n    const { indices, values, denseShape, defaultValue } = inputs;\n    if (denseShape.shape.length !== 1) {\n        throw new Error(`Dense shape must be a vector, saw:\n        ${denseShape.shape}`);\n    }\n    if (indices.shape.length !== 2) {\n        throw new Error(`Indices must be a matrix, saw:\n        ${indices.shape}`);\n    }\n    if (values.shape.length !== 1) {\n        throw new Error(`Values must be a vector, saw:\n        ${values.shape}`);\n    }\n    if (defaultValue.shape.length !== 0) {\n        throw new Error(`Default value must be a scalar, saw:\n        ${defaultValue.shape}`);\n    }\n    const $indices = backend.data.get(indices.dataId).values;\n    const $values = backend.data.get(values.dataId).values;\n    const $denseShape = backend.data.get(denseShape.dataId).values;\n    const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n    const [outputIndices, outputIndicesShape, outputValues, emptyRowIndicator, reverseIndexMap] = sparseFillEmptyRowsImpl($indices, indices.shape, indices.dtype, $values, values.dtype, $denseShape, $defaultValue);\n    return [\n        backend.makeTensorInfo(outputIndicesShape, indices.dtype, outputIndices),\n        backend.makeTensorInfo([outputIndicesShape[0]], values.dtype, outputValues),\n        backend.makeTensorInfo([emptyRowIndicator.length], 'bool', new Uint8Array(emptyRowIndicator.map((value) => Number(value)))),\n        backend.makeTensorInfo([reverseIndexMap.length], indices.dtype, new Int32Array(reverseIndexMap)),\n    ];\n}\nexport const sparseFillEmptyRowsConfig = {\n    kernelName: SparseFillEmptyRows,\n    backendName: 'cpu',\n    kernelFunc: sparseFillEmptyRows,\n};\n//# sourceMappingURL=SparseFillEmptyRows.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SparseReshape } from '@tensorflow/tfjs-core';\nimport { sparseReshapeImpl } from './SparseReshape_impl';\nexport function sparseReshape(args) {\n    const { inputs, backend } = args;\n    const { inputIndices, inputShape, newShape } = inputs;\n    if (inputIndices.shape.length !== 2) {\n        throw new Error(`Input indices should be a matrix but received shape\n        ${inputIndices.shape}`);\n    }\n    if (inputShape.shape.length !== 1) {\n        throw new Error(`Input shape should be a vector but received shape\n        ${inputShape.shape}`);\n    }\n    if (newShape.shape.length !== 1) {\n        throw new Error(`Target shape should be a vector but received shape ${newShape.shape}`);\n    }\n    const $inputShape = Array.from(backend.data.get(inputShape.dataId).values);\n    const $inputIndices = backend.data.get(inputIndices.dataId).values;\n    const targetShape = Array.from(backend.data.get(newShape.dataId).values);\n    const [newIndices, indicesShape, outputShape] = sparseReshapeImpl($inputIndices, inputIndices.shape, inputIndices.dtype, $inputShape, targetShape);\n    return [\n        backend.makeTensorInfo(indicesShape, inputIndices.dtype, newIndices),\n        backend.makeTensorInfo([outputShape.length], newShape.dtype, new Int32Array(outputShape)),\n    ];\n}\nexport const sparseReshapeConfig = {\n    kernelName: SparseReshape,\n    backendName: 'cpu',\n    kernelFunc: sparseReshape,\n};\n//# sourceMappingURL=SparseReshape.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, SparseToDense } from '@tensorflow/tfjs-core';\nimport { scatterImpl } from './Scatter_impl';\nexport function sparseToDense(args) {\n    const { inputs, backend, attrs } = args;\n    const { sparseIndices, sparseValues, defaultValue } = inputs;\n    const { outputShape } = attrs;\n    const { sliceRank, numUpdates, sliceSize, strides, outputSize } = backend_util.calculateShapes(sparseValues, sparseIndices, outputShape);\n    const sumDupeIndices = false;\n    const indicesBuf = backend.bufferSync(sparseIndices);\n    const updatesBuf = backend.bufferSync(sparseValues);\n    const $defaultValue = backend.data.get(defaultValue.dataId).values[0];\n    const outBuf = scatterImpl(indicesBuf, updatesBuf, outputShape, outputSize, sliceSize, numUpdates, sliceRank, strides, $defaultValue, sumDupeIndices);\n    return backend.makeTensorInfo(outputShape, outBuf.dtype, outBuf.values);\n}\nexport const sparseToDenseConfig = {\n    kernelName: SparseToDense,\n    backendName: 'cpu',\n    kernelFunc: sparseToDense\n};\n//# sourceMappingURL=SparseToDense.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util } from '@tensorflow/tfjs-core';\nimport { SplitV, util } from '@tensorflow/tfjs-core';\nimport { slice } from './Slice';\nexport function splitV(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { numOrSizeSplits, axis } = attrs;\n    const $axis = util.parseAxisParam(axis, x.shape)[0];\n    const splitSizes = backend_util.prepareSplitSize(x, numOrSizeSplits, $axis);\n    const begin = new Array(x.shape.length).fill(0);\n    const size = x.shape.slice();\n    return splitSizes.map(s => {\n        const sliceSize = [...size];\n        sliceSize[$axis] = s;\n        const sliceT = slice({ inputs: { x }, backend, attrs: { begin, size: sliceSize } });\n        begin[$axis] += s;\n        return sliceT;\n    });\n}\nexport const splitVConfig = {\n    kernelName: SplitV,\n    backendName: 'cpu',\n    kernelFunc: splitV\n};\n//# sourceMappingURL=SplitV.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Sqrt } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const sqrt = unaryKernelFunc(Sqrt, (xi) => Math.sqrt(xi));\nexport const sqrtConfig = {\n    kernelName: Sqrt,\n    backendName: 'cpu',\n    kernelFunc: sqrt,\n};\n//# sourceMappingURL=Sqrt.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Square } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport const squareConfig = {\n    kernelName: Square,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend }) => {\n        const { x } = inputs;\n        const cpuBackend = backend;\n        assertNotComplex(x, 'square');\n        const values = cpuBackend.data.get(x.dataId).values;\n        const newValues = new Float32Array(values.length);\n        for (let i = 0; i < values.length; ++i) {\n            const value = values[i];\n            newValues[i] = value * value;\n        }\n        const dataId = cpuBackend.write(newValues, x.shape, x.dtype);\n        return { dataId, shape: x.shape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Square.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { SquaredDifference } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const squaredDifferenceImpl = createSimpleBinaryKernelImpl(((a, b) => {\n    const diff = a - b;\n    return diff * diff;\n}));\nexport const squaredDifference = binaryKernelFunc(SquaredDifference, squaredDifferenceImpl);\nexport const squaredDifferenceConfig = {\n    kernelName: SquaredDifference,\n    backendName: 'cpu',\n    kernelFunc: squaredDifference\n};\n//# sourceMappingURL=SquaredDifference.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Step } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const step = unaryKernelFunc(Step, (xi, attrs) => {\n    const stepAttrs = attrs;\n    if (isNaN(xi)) {\n        return NaN;\n    }\n    else {\n        return xi > 0 ? 1 : stepAttrs.alpha;\n    }\n});\nexport const stepConfig = {\n    kernelName: Step,\n    backendName: 'cpu',\n    kernelFunc: step,\n};\n//# sourceMappingURL=Step.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { slice_util, StridedSlice } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { stridedSliceImpl } from './StridedSlice_impl';\nexport function stridedSlice(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask } = attrs;\n    assertNotComplex(x, 'stridedSlice');\n    const { nonStrided, $begin, $strides, size, newShape, outShape } = slice_util.sliceInfo(x.shape, begin, end, strides, beginMask, endMask, ellipsisMask, newAxisMask, shrinkAxisMask);\n    const $x = reshape({ inputs: { x }, backend, attrs: { shape: newShape } });\n    let result;\n    if (nonStrided) {\n        const sliced = slice({ inputs: { x: $x }, backend, attrs: { begin: $begin, size } });\n        result = reshape({ inputs: { x: sliced }, backend, attrs: { shape: outShape } });\n        backend.disposeIntermediateTensorInfo(sliced);\n    }\n    else if (outShape.some(axis => axis === 0)) {\n        result = backend.makeTensorInfo(outShape, x.dtype, []);\n    }\n    else {\n        const xBuf = backend.bufferSync($x);\n        const outBuf = stridedSliceImpl(outShape, xBuf, $strides, $begin);\n        result = backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n    }\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: outShape } });\n    backend.disposeIntermediateTensorInfo($x);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const stridedSliceConfig = {\n    kernelName: StridedSlice,\n    backendName: 'cpu',\n    kernelFunc: stridedSlice\n};\n//# sourceMappingURL=StridedSlice.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const tan = unaryKernelFunc(Tan, (xi) => Math.tan(xi));\nexport const tanConfig = {\n    kernelName: Tan,\n    backendName: 'cpu',\n    kernelFunc: tan,\n};\n//# sourceMappingURL=Tan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const tanh = unaryKernelFunc(Tanh, (xi) => Math.tanh(xi));\nexport const tanhConfig = {\n    kernelName: Tanh,\n    backendName: 'cpu',\n    kernelFunc: tanh,\n};\n//# sourceMappingURL=Tanh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tile } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { tileImpl } from './Tile_impl';\nexport function tile(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { reps } = attrs;\n    assertNotComplex(x, 'tile');\n    const outBuf = tileImpl(backend.bufferSync(x), reps);\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const tileConfig = {\n    kernelName: Tile,\n    backendName: 'cpu',\n    kernelFunc: tile\n};\n//# sourceMappingURL=Tile.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { TopK } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { topKImpl } from './TopK_impl';\nexport function topK(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { k, sorted } = attrs;\n    assertNotComplex(x, 'topk');\n    const xVals = backend.data.get(x.dataId).values;\n    const [allTopKVals, allTopKIndices] = topKImpl(xVals, x.shape, x.dtype, k, sorted);\n    return [\n        backend.makeTensorInfo(allTopKVals.shape, allTopKVals.dtype, allTopKVals.values),\n        backend.makeTensorInfo(allTopKIndices.shape, allTopKIndices.dtype, allTopKIndices.values)\n    ];\n}\nexport const topKConfig = {\n    kernelName: TopK,\n    backendName: 'cpu',\n    kernelFunc: topK\n};\n//# sourceMappingURL=TopK.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Transform, util } from '@tensorflow/tfjs-core';\nexport function transform(args) {\n    const { inputs, attrs, backend } = args;\n    const { image, transforms } = inputs;\n    const { interpolation, fillMode, fillValue, outputShape } = attrs;\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const [outHeight, outWidth] = outputShape != null ? outputShape : [imageHeight, imageWidth];\n    const outShape = [batch, outHeight, outWidth, numChannels];\n    const strides = util.computeStrides(image.shape);\n    const batchStride = strides[0];\n    const rowStride = strides[1];\n    const colStride = strides[2];\n    const outVals = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(outShape));\n    outVals.fill(fillValue);\n    const imageVals = backend.data.get(image.dataId).values;\n    const transformVals = backend.data.get(transforms.dataId).values;\n    // Ref TF implementation:\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/image/image_ops.h\n    for (let b = 0; b < batch; ++b) {\n        const transform = transforms.shape[0] === 1 ?\n            transformVals :\n            transformVals.subarray(b * 8, b * 8 + 8);\n        for (let outY = 0; outY < outHeight; ++outY) {\n            for (let outX = 0; outX < outWidth; ++outX) {\n                for (let channel = 0; channel < numChannels; ++channel) {\n                    let val;\n                    const projection = transform[6] * outX + transform[7] * outY + 1;\n                    if (projection === 0) {\n                        // Return the fill value for infinite coordinates,\n                        // which are outside the input image\n                        continue;\n                    }\n                    const inX = (transform[0] * outX + transform[1] * outY + transform[2]) /\n                        projection;\n                    const inY = (transform[3] * outX + transform[4] * outY + transform[5]) /\n                        projection;\n                    const x = mapCoord(inX, imageWidth, fillMode);\n                    const y = mapCoord(inY, imageHeight, fillMode);\n                    switch (interpolation) {\n                        case 'nearest':\n                            val = nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);\n                            break;\n                        case 'bilinear':\n                            val = bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, b, y, x, channel, fillValue);\n                            break;\n                        default:\n                            throw new Error(`Error in Transform: Expect 'nearest' or ` +\n                                `'bilinear', but got ${interpolation}`);\n                    }\n                    const ind = b * batchStride + outY * rowStride + outX * colStride + channel;\n                    outVals[ind] = val;\n                }\n            }\n        }\n        return backend.makeTensorInfo(outShape, image.dtype, outVals);\n    }\n    const dataId = backend.write(outVals, outShape, image.dtype);\n    return { dataId, shape: image.shape, dtype: image.dtype };\n}\nexport const transformConfig = {\n    kernelName: Transform,\n    backendName: 'cpu',\n    kernelFunc: transform\n};\nfunction mapCoord(outCoord, len, mode) {\n    switch (mode) {\n        case 'reflect':\n            return mapCoordReflect(outCoord, len);\n        case 'wrap':\n            return mapCoordWrap(outCoord, len);\n        case 'nearest':\n            return mapCoordNearest(outCoord, len);\n        case 'constant':\n        default:\n            return mapCoordConstant(outCoord, len);\n    }\n}\nfunction mapCoordReflect(outCoord, len) {\n    // Reflect [abcd] to [dcba|abcd|dcba].\n    let inCoord = outCoord;\n    if (inCoord < 0) {\n        if (len <= 1) {\n            inCoord = 0;\n        }\n        else {\n            const sz2 = 2 * len;\n            if (inCoord < sz2) {\n                inCoord = sz2 * Math.trunc(-inCoord / sz2) + inCoord;\n            }\n            inCoord = inCoord < -len ? inCoord + sz2 : -inCoord - 1;\n        }\n    }\n    else if (inCoord > len - 1) {\n        if (len <= 1) {\n            inCoord = 0;\n        }\n        else {\n            const sz2 = 2 * len;\n            inCoord -= sz2 * Math.trunc(inCoord / sz2);\n            if (inCoord >= len) {\n                inCoord = sz2 - inCoord - 1;\n            }\n        }\n    }\n    // clamp is necessary because when outCoord = 3.5 and len = 4,\n    // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n    return util.clamp(0, inCoord, len - 1);\n}\nfunction mapCoordWrap(outCoord, len) {\n    // Wrap [abcd] to [abcd|abcd|abcd].\n    let inCoord = outCoord;\n    if (inCoord < 0) {\n        if (len <= 1) {\n            inCoord = 0;\n        }\n        else {\n            const sz = len - 1;\n            inCoord += len * (Math.trunc(-inCoord / sz) + 1);\n        }\n    }\n    else if (inCoord > len - 1) {\n        if (len <= 1) {\n            inCoord = 0;\n        }\n        else {\n            const sz = len - 1;\n            inCoord -= len * Math.trunc(inCoord / sz);\n        }\n    }\n    // clamp is necessary because when outCoord = -0.5 and len = 4,\n    // inCoord = 3.5 and will be rounded to 4 in nearest interpolation.\n    return util.clamp(0, inCoord, len - 1);\n}\nfunction mapCoordConstant(outCoord, len) {\n    return outCoord;\n}\nfunction mapCoordNearest(outCoord, len) {\n    return util.clamp(0, outCoord, len - 1);\n}\nfunction readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n    const ind = batch * batchStride + y * rowStride + x * colStride + channel;\n    if (0 <= y && y < imageHeight && 0 <= x && x < imageWidth) {\n        return imageVals[ind];\n    }\n    else {\n        return fillValue;\n    }\n}\nfunction nearestInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n    const $y = Math.round(y);\n    const $x = Math.round(x);\n    return readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, $y, $x, channel, fillValue);\n}\nfunction bilinearInterpolation(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, y, x, channel, fillValue) {\n    const yFloor = Math.floor(y);\n    const xFloor = Math.floor(x);\n    const yCeil = yFloor + 1;\n    const xCeil = xFloor + 1;\n    // f(x, yFloor) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yFloor)\n    //               + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yFloor)\n    const valueYFloor = (xCeil - x) *\n        readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xFloor, channel, fillValue) +\n        (x - xFloor) *\n            readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yFloor, xCeil, channel, fillValue);\n    // f(x, yCeil) = (xCeil - x) / (xCeil - xFloor) * f(xFloor, yCeil)\n    //             + (x - xFloor) / (xCeil - xFloor) * f(xCeil, yCeil)\n    const valueYCeil = (xCeil - x) *\n        readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xFloor, channel, fillValue) +\n        (x - xFloor) *\n            readWithFillValue(imageVals, imageHeight, imageWidth, batchStride, rowStride, colStride, batch, yCeil, xCeil, channel, fillValue);\n    // f(x, y) = (yCeil - y) / (yCeil - yFloor) * f(x, yFloor)\n    //         + (y - yFloor) / (yCeil - yFloor) * f(x, yCeil)\n    return (yCeil - y) * valueYFloor + (y - yFloor) * valueYCeil;\n}\n//# sourceMappingURL=Transform.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unique } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { uniqueImpl } from './Unique_impl';\nexport function unique(args) {\n    const { inputs, attrs, backend } = args;\n    const { axis } = attrs;\n    const { x } = inputs;\n    assertNotComplex(x, 'unique');\n    const values = backend.data.get(x.dataId).values;\n    const { outputValues, outputShape, indices } = uniqueImpl(values, axis, x.shape, x.dtype);\n    return [\n        backend.makeTensorInfo(outputShape, x.dtype, outputValues),\n        backend.makeTensorInfo([indices.length], 'int32', indices),\n    ];\n}\nexport const uniqueConfig = {\n    kernelName: Unique,\n    backendName: 'cpu',\n    kernelFunc: unique,\n};\n//# sourceMappingURL=Unique.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Unpack } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nexport function unpack(args) {\n    const { inputs, backend, attrs } = args;\n    const { value } = inputs;\n    let { axis } = attrs;\n    if (axis < 0) {\n        axis += value.shape.length;\n    }\n    const valueRank = value.shape.length;\n    const num = value.shape[axis];\n    const outShape = new Array(valueRank - 1);\n    let outIndex = 0;\n    for (let i = 0; i < valueRank; i++) {\n        if (i !== axis) {\n            outShape[outIndex++] = value.shape[i];\n        }\n    }\n    const begin = new Array(valueRank).fill(0);\n    const size = value.shape.slice();\n    size[axis] = 1;\n    const res = new Array(num);\n    for (let i = 0; i < res.length; i++) {\n        begin[axis] = i;\n        const tempRes = slice({ inputs: { x: value }, backend, attrs: { begin, size } });\n        res[i] = reshape({ inputs: { x: tempRes }, backend, attrs: { shape: outShape } });\n        backend.disposeIntermediateTensorInfo(tempRes);\n    }\n    return res;\n}\nexport const unpackConfig = {\n    kernelName: Unpack,\n    backendName: 'cpu',\n    kernelFunc: unpack\n};\n//# sourceMappingURL=Unpack.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { UnsortedSegmentSum, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { cast } from './Cast';\nimport { equal } from './Equal';\nimport { expandDims } from './ExpandDims';\nimport { multiply } from './Multiply';\nimport { pack } from './Pack';\nimport { sum } from './Sum';\nexport function unsortedSegmentSum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, segmentIds } = inputs;\n    const { numSegments } = attrs;\n    assertNotComplex(x, 'unsortedSegmentSum');\n    const xRank = x.shape.length;\n    const segmentIdsRank = segmentIds.shape.length;\n    const res = [];\n    const intermediates = [];\n    // Reshape the segment id's so that they can be broadcast with\n    // x. The new shape should be [segmentIds.shape, 1, ..., 1]\n    const numIters = xRank - segmentIdsRank;\n    let $segmentIds = segmentIds;\n    for (let i = 0; i < numIters; ++i) {\n        const expanded = expandDims({ inputs: { input: $segmentIds }, backend, attrs: { dim: i + 1 } });\n        $segmentIds = expanded;\n        intermediates.push(expanded);\n    }\n    for (let i = 0; i < numSegments; ++i) {\n        const scalarValue = util.createScalarValue(i, 'int32');\n        const segmentId = backend.makeTensorInfo([], 'int32', scalarValue);\n        const mask = equal({ inputs: { a: segmentId, b: $segmentIds }, backend });\n        const maskCasted = cast({ inputs: { x: mask }, backend, attrs: { dtype: 'float32' } });\n        const mul = multiply({ inputs: { a: maskCasted, b: x }, backend });\n        const sumTensorInfo = sum({ inputs: { x: mul }, backend, attrs: { axis: 0, keepDims: false } });\n        res.push(sumTensorInfo);\n        intermediates.push(segmentId);\n        intermediates.push(mask);\n        intermediates.push(maskCasted);\n        intermediates.push(mul);\n        intermediates.push(sumTensorInfo);\n    }\n    const result = pack({ inputs: res, backend, attrs: { axis: 0 } });\n    intermediates.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return result;\n}\nexport const unsortedSegmentSumConfig = {\n    kernelName: UnsortedSegmentSum,\n    backendName: 'cpu',\n    kernelFunc: unsortedSegmentSum\n};\n//# sourceMappingURL=UnsortedSegmentSum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// We explicitly import the modular kernels so they get registered in the\n// global registry when we compile the library. A modular build would replace\n// the contents of this file and import only the kernels that are needed.\nimport { registerKernel } from '@tensorflow/tfjs-core';\nimport { _fusedMatMulConfig } from './kernels/_FusedMatMul';\nimport { absConfig } from './kernels/Abs';\nimport { acosConfig } from './kernels/Acos';\nimport { acoshConfig } from './kernels/Acosh';\nimport { addConfig } from './kernels/Add';\nimport { addNConfig } from './kernels/AddN';\nimport { allConfig } from './kernels/All';\nimport { anyConfig } from './kernels/Any';\nimport { argMaxConfig } from './kernels/ArgMax';\nimport { argMinConfig } from './kernels/ArgMin';\nimport { asinConfig } from './kernels/Asin';\nimport { asinhConfig } from './kernels/Asinh';\nimport { atanConfig } from './kernels/Atan';\nimport { atan2Config } from './kernels/Atan2';\nimport { atanhConfig } from './kernels/Atanh';\nimport { avgPoolConfig } from './kernels/AvgPool';\nimport { avgPool3DConfig } from './kernels/AvgPool3D';\nimport { avgPool3DGradConfig } from './kernels/AvgPool3DGrad';\nimport { avgPoolGradConfig } from './kernels/AvgPoolGrad';\nimport { batchMatMulConfig } from './kernels/BatchMatMul';\nimport { batchNormConfig } from './kernels/BatchNorm';\nimport { batchToSpaceNDConfig } from './kernels/BatchToSpaceND';\nimport { bincountConfig } from './kernels/Bincount';\nimport { castConfig } from './kernels/Cast';\nimport { ceilConfig } from './kernels/Ceil';\nimport { clipConfig } from './kernels/Clip';\nimport { complexConfig } from './kernels/Complex';\nimport { complexAbsConfig } from './kernels/ComplexAbs';\nimport { concatConfig } from './kernels/Concat';\nimport { conv2DConfig } from './kernels/Conv2D';\nimport { conv2DBackpropFilterConfig } from './kernels/Conv2DBackpropFilter';\nimport { conv2DBackpropInputConfig } from './kernels/Conv2DBackpropInput';\nimport { conv3DConfig } from './kernels/Conv3D';\nimport { conv3DBackpropFilterV2Config } from './kernels/Conv3DBackpropFilterV2';\nimport { conv3DBackpropInputV2Config } from './kernels/Conv3DBackpropInputV2';\nimport { cosConfig } from './kernels/Cos';\nimport { coshConfig } from './kernels/Cosh';\nimport { cropAndResizeConfig } from './kernels/CropAndResize';\nimport { cumsumConfig } from './kernels/Cumsum';\nimport { denseBincountConfig } from './kernels/DenseBincount';\nimport { depthToSpaceConfig } from './kernels/DepthToSpace';\nimport { depthwiseConv2dNativeConfig } from './kernels/DepthwiseConv2dNative';\nimport { depthwiseConv2dNativeBackpropFilterConfig } from './kernels/DepthwiseConv2dNativeBackpropFilter';\nimport { depthwiseConv2dNativeBackpropInputConfig } from './kernels/DepthwiseConv2dNativeBackpropInput';\nimport { diagConfig } from './kernels/Diag';\nimport { dilation2dConfig } from './kernels/Dilation2D';\nimport { dilation2dBackpropFilterConfig } from './kernels/Dilation2DBackpropFilter';\nimport { dilation2dBackpropInputConfig } from './kernels/Dilation2DBackpropInput';\nimport { einsumConfig } from './kernels/Einsum';\nimport { eluConfig } from './kernels/Elu';\nimport { eluGradConfig } from './kernels/EluGrad';\nimport { equalConfig } from './kernels/Equal';\nimport { erfConfig } from './kernels/Erf';\nimport { expConfig } from './kernels/Exp';\nimport { expandDimsConfig } from './kernels/ExpandDims';\nimport { expm1Config } from './kernels/Expm1';\nimport { fftConfig } from './kernels/FFT';\nimport { fillConfig } from './kernels/Fill';\nimport { flipLeftRightConfig } from './kernels/FlipLeftRight';\nimport { floorConfig } from './kernels/Floor';\nimport { floorDivConfig } from './kernels/FloorDiv';\nimport { fusedConv2DConfig } from './kernels/FusedConv2D';\nimport { fusedDepthwiseConv2DConfig } from './kernels/FusedDepthwiseConv2D';\nimport { gatherNdConfig } from './kernels/GatherNd';\nimport { gatherV2Config } from './kernels/GatherV2';\nimport { greaterConfig } from './kernels/Greater';\nimport { greaterEqualConfig } from './kernels/GreaterEqual';\nimport { identityConfig } from './kernels/Identity';\nimport { ifftConfig } from './kernels/IFFT';\nimport { imagConfig } from './kernels/Imag';\nimport { isFiniteConfig } from './kernels/IsFinite';\nimport { isInfConfig } from './kernels/IsInf';\nimport { isNaNConfig } from './kernels/IsNaN';\nimport { leakyReluConfig } from './kernels/LeakyRelu';\nimport { lessConfig } from './kernels/Less';\nimport { lessEqualConfig } from './kernels/LessEqual';\nimport { linSpaceConfig } from './kernels/LinSpace';\nimport { logConfig } from './kernels/Log';\nimport { log1pConfig } from './kernels/Log1p';\nimport { logicalAndConfig } from './kernels/LogicalAnd';\nimport { logicalNotConfig } from './kernels/LogicalNot';\nimport { logicalOrConfig } from './kernels/LogicalOr';\nimport { lRNConfig } from './kernels/LRN';\nimport { lRNGradConfig } from './kernels/LRNGrad';\nimport { maxConfig } from './kernels/Max';\nimport { maximumConfig } from './kernels/Maximum';\nimport { maxPoolConfig } from './kernels/MaxPool';\nimport { maxPool3DConfig } from './kernels/MaxPool3D';\nimport { maxPool3DGradConfig } from './kernels/MaxPool3DGrad';\nimport { maxPoolGradConfig } from './kernels/MaxPoolGrad';\nimport { maxPoolWithArgmaxConfig } from './kernels/MaxPoolWithArgmax';\nimport { meanConfig } from './kernels/Mean';\nimport { minConfig } from './kernels/Min';\nimport { minimumConfig } from './kernels/Minimum';\nimport { mirrorPadConfig } from './kernels/MirrorPad';\nimport { modConfig } from './kernels/Mod';\nimport { multinomialConfig } from './kernels/Multinomial';\nimport { multiplyConfig } from './kernels/Multiply';\nimport { negConfig } from './kernels/Neg';\nimport { nonMaxSuppressionV3Config } from './kernels/NonMaxSuppressionV3';\nimport { nonMaxSuppressionV4Config } from './kernels/NonMaxSuppressionV4';\nimport { nonMaxSuppressionV5Config } from './kernels/NonMaxSuppressionV5';\nimport { notEqualConfig } from './kernels/NotEqual';\nimport { oneHotConfig } from './kernels/OneHot';\nimport { onesLikeConfig } from './kernels/OnesLike';\nimport { packConfig } from './kernels/Pack';\nimport { padV2Config } from './kernels/PadV2';\nimport { powConfig } from './kernels/Pow';\nimport { preluConfig } from './kernels/Prelu';\nimport { prodConfig } from './kernels/Prod';\nimport { rangeConfig } from './kernels/Range';\nimport { realConfig } from './kernels/Real';\nimport { realDivConfig } from './kernels/RealDiv';\nimport { reciprocalConfig } from './kernels/Reciprocal';\nimport { reluConfig } from './kernels/Relu';\nimport { relu6Config } from './kernels/Relu6';\nimport { reshapeConfig } from './kernels/Reshape';\nimport { resizeBilinearConfig } from './kernels/ResizeBilinear';\nimport { resizeBilinearGradConfig } from './kernels/ResizeBilinearGrad';\nimport { resizeNearestNeighborConfig } from './kernels/ResizeNearestNeighbor';\nimport { resizeNearestNeighborGradConfig } from './kernels/ResizeNearestNeighborGrad';\nimport { reverseConfig } from './kernels/Reverse';\nimport { rotateWithOffsetConfig } from './kernels/RotateWithOffset';\nimport { roundConfig } from './kernels/Round';\nimport { rsqrtConfig } from './kernels/Rsqrt';\nimport { scatterNdConfig } from './kernels/ScatterNd';\nimport { selectConfig } from './kernels/Select';\nimport { seluConfig } from './kernels/Selu';\nimport { sigmoidConfig } from './kernels/Sigmoid';\nimport { signConfig } from './kernels/Sign';\nimport { sinConfig } from './kernels/Sin';\nimport { sinhConfig } from './kernels/Sinh';\nimport { sliceConfig } from './kernels/Slice';\nimport { softmaxConfig } from './kernels/Softmax';\nimport { softplusConfig } from './kernels/Softplus';\nimport { spaceToBatchNDConfig } from './kernels/SpaceToBatchND';\nimport { sparseFillEmptyRowsConfig } from './kernels/SparseFillEmptyRows';\nimport { sparseReshapeConfig } from './kernels/SparseReshape';\nimport { sparseToDenseConfig } from './kernels/SparseToDense';\nimport { splitVConfig } from './kernels/SplitV';\nimport { sqrtConfig } from './kernels/Sqrt';\nimport { squareConfig } from './kernels/Square';\nimport { squaredDifferenceConfig } from './kernels/SquaredDifference';\nimport { stepConfig } from './kernels/Step';\nimport { stridedSliceConfig } from './kernels/StridedSlice';\nimport { subConfig } from './kernels/Sub';\nimport { sumConfig } from './kernels/Sum';\nimport { tanConfig } from './kernels/Tan';\nimport { tanhConfig } from './kernels/Tanh';\nimport { tileConfig } from './kernels/Tile';\nimport { topKConfig } from './kernels/TopK';\nimport { transformConfig } from './kernels/Transform';\nimport { transposeConfig } from './kernels/Transpose';\nimport { uniqueConfig } from './kernels/Unique';\nimport { unpackConfig } from './kernels/Unpack';\nimport { unsortedSegmentSumConfig } from './kernels/UnsortedSegmentSum';\nimport { zerosLikeConfig } from './kernels/ZerosLike';\n// List all kernel configs here\nconst kernelConfigs = [\n    _fusedMatMulConfig,\n    absConfig,\n    acosConfig,\n    acoshConfig,\n    addConfig,\n    addNConfig,\n    allConfig,\n    anyConfig,\n    argMaxConfig,\n    argMinConfig,\n    asinConfig,\n    asinhConfig,\n    atanConfig,\n    atan2Config,\n    atanhConfig,\n    avgPoolConfig,\n    avgPool3DConfig,\n    avgPool3DGradConfig,\n    avgPoolGradConfig,\n    batchMatMulConfig,\n    batchNormConfig,\n    batchToSpaceNDConfig,\n    bincountConfig,\n    castConfig,\n    ceilConfig,\n    clipConfig,\n    complexConfig,\n    complexAbsConfig,\n    concatConfig,\n    conv2DBackpropFilterConfig,\n    conv2DBackpropInputConfig,\n    conv2DConfig,\n    conv3DBackpropFilterV2Config,\n    conv3DBackpropInputV2Config,\n    conv3DConfig,\n    cosConfig,\n    coshConfig,\n    cropAndResizeConfig,\n    cumsumConfig,\n    denseBincountConfig,\n    depthToSpaceConfig,\n    depthwiseConv2dNativeConfig,\n    depthwiseConv2dNativeBackpropFilterConfig,\n    depthwiseConv2dNativeBackpropInputConfig,\n    diagConfig,\n    dilation2dConfig,\n    dilation2dBackpropInputConfig,\n    dilation2dBackpropFilterConfig,\n    realDivConfig,\n    einsumConfig,\n    eluConfig,\n    eluGradConfig,\n    equalConfig,\n    erfConfig,\n    expConfig,\n    expandDimsConfig,\n    expm1Config,\n    fftConfig,\n    fillConfig,\n    flipLeftRightConfig,\n    floorConfig,\n    floorDivConfig,\n    fusedConv2DConfig,\n    fusedDepthwiseConv2DConfig,\n    gatherNdConfig,\n    gatherV2Config,\n    greaterConfig,\n    greaterEqualConfig,\n    identityConfig,\n    ifftConfig,\n    imagConfig,\n    isFiniteConfig,\n    isInfConfig,\n    isNaNConfig,\n    leakyReluConfig,\n    lessConfig,\n    lessEqualConfig,\n    linSpaceConfig,\n    logConfig,\n    log1pConfig,\n    logicalAndConfig,\n    logicalNotConfig,\n    logicalOrConfig,\n    lRNConfig,\n    lRNGradConfig,\n    maximumConfig,\n    maxPoolConfig,\n    maxPool3DConfig,\n    maxPool3DGradConfig,\n    maxPoolGradConfig,\n    maxPoolWithArgmaxConfig,\n    maxConfig,\n    meanConfig,\n    minConfig,\n    minimumConfig,\n    mirrorPadConfig,\n    modConfig,\n    multinomialConfig,\n    multiplyConfig,\n    negConfig,\n    nonMaxSuppressionV3Config,\n    nonMaxSuppressionV4Config,\n    nonMaxSuppressionV5Config,\n    notEqualConfig,\n    oneHotConfig,\n    onesLikeConfig,\n    packConfig,\n    padV2Config,\n    powConfig,\n    preluConfig,\n    prodConfig,\n    rangeConfig,\n    realConfig,\n    reciprocalConfig,\n    reluConfig,\n    relu6Config,\n    reshapeConfig,\n    resizeBilinearConfig,\n    resizeBilinearGradConfig,\n    resizeNearestNeighborConfig,\n    resizeNearestNeighborGradConfig,\n    reverseConfig,\n    rotateWithOffsetConfig,\n    roundConfig,\n    rsqrtConfig,\n    scatterNdConfig,\n    selectConfig,\n    seluConfig,\n    sigmoidConfig,\n    signConfig,\n    sinConfig,\n    sinhConfig,\n    sliceConfig,\n    softmaxConfig,\n    softplusConfig,\n    spaceToBatchNDConfig,\n    sparseFillEmptyRowsConfig,\n    sparseReshapeConfig,\n    sparseToDenseConfig,\n    splitVConfig,\n    sqrtConfig,\n    squareConfig,\n    squaredDifferenceConfig,\n    stepConfig,\n    stridedSliceConfig,\n    subConfig,\n    sumConfig,\n    tanConfig,\n    tanhConfig,\n    tileConfig,\n    topKConfig,\n    transposeConfig,\n    transformConfig,\n    uniqueConfig,\n    unpackConfig,\n    unsortedSegmentSumConfig,\n    zerosLikeConfig\n];\nfor (const kernelConfig of kernelConfigs) {\n    registerKernel(kernelConfig);\n}\n//# sourceMappingURL=register_all_kernels.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function sparseReshapeImpl(inputIndices, inputIndicesShape, inputDType, inputShape, targetShape) {\n    const denseSize = util.sizeFromShape(inputShape);\n    const nnz = inputIndicesShape[0];\n    const outputRank = targetShape.length;\n    // Compute the output shape. Determine product of specified dimensions, and\n    // find the index of the unspecified one.\n    const outputShape = [];\n    let product = 1;\n    let unknownIndex = -1;\n    for (let d = 0; d < outputRank; ++d) {\n        const size = targetShape[d];\n        if (size === -1) {\n            if (unknownIndex !== -1) {\n                throw new Error(`only one output dimension may be -1, not both ${unknownIndex} and ${d}`);\n            }\n            unknownIndex = d;\n            outputShape.push(1);\n        }\n        else {\n            if (size < 0) {\n                throw new Error(`size ${d} must be non-negative, not ${size}`);\n            }\n            product *= size;\n            outputShape.push(size);\n        }\n    }\n    if (unknownIndex !== -1) {\n        if (product <= 0) {\n            throw new Error('reshape cannot infer the missing ' +\n                'input size for an empty tensor unless all ' +\n                'specified input sizes are non-zero');\n        }\n        const missing = Math.trunc(denseSize / product);\n        if (product * missing !== denseSize) {\n            throw new Error(`Input to reshape is a SparseTensor with ${denseSize}\n          dense values, but the requested shape requires a multiple of ${product}. inputShape=${inputShape} outputShape= ${outputShape}`);\n        }\n        outputShape[unknownIndex] = missing;\n    }\n    const outputSize = util.sizeFromShape(outputShape);\n    if (outputSize !== denseSize) {\n        throw new Error(`Input to reshape is a tensor with ${denseSize} dense values, but the requested shape has ${outputSize}. inputShape=${inputShape} outputShape=${outputShape}`);\n    }\n    const inputRank = inputShape.length;\n    const inputStrides = [];\n    if (inputRank > 0) {\n        inputStrides[inputRank - 1] = 1;\n        for (let d = inputRank - 2; d >= 0; --d) {\n            inputStrides[d] = inputStrides[d + 1] * inputShape[d + 1];\n        }\n    }\n    const outputStrides = [];\n    if (outputRank > 0) {\n        outputStrides[outputRank - 1] = 1;\n        for (let d = outputRank - 2; d >= 0; --d) {\n            outputStrides[d] = outputStrides[d + 1] * outputShape[d + 1];\n        }\n    }\n    const newIndices = util.getArrayFromDType(inputDType, nnz * outputRank);\n    for (let i = 0; i < nnz; ++i) {\n        let id = 0;\n        for (let j = 0; j < inputRank; ++j) {\n            // inputIndices is a 2d tensor with shape of [nnz, inputRank]\n            id += inputIndices[i * inputRank + j] * inputStrides[j];\n        }\n        for (let j = 0; j < outputRank; ++j) {\n            // newIndices is a 2d tensor with shape of [nnz, outputRank]\n            newIndices[i * outputRank + j] = Math.trunc(id / outputStrides[j]);\n            id %= outputStrides[j];\n        }\n    }\n    return [newIndices, [nnz, outputRank], outputShape];\n}\n//# sourceMappingURL=SparseReshape_impl.js.map"],"names":["leakyRelu","args","inputs","backend","attrs","x","alpha","xSize","util","shape","xVals","data","get","dataId","values","outVals","i","length","makeTensorInfo","leakyReluConfig","kernelName","LeakyRelu","backendName","kernelFunc","logImpl","xi","Math","log","Log","logConfig","uniqueImpl","axis","dtype","$axis","newShape","uniqueElements","indices","Int32Array","inputBuffer","TensorBuffer","uniqueIndices","is1DTensor","element","toString","axisValues","m","n","push","join","undefined","uniqueIndex","Object","keys","outputTmpShape","slice","outputBuffer","forEach","uniqueElementIndex","set","outputShape","outputValues","maxImpl","aVals","reduceSize","outShape","vals","offset","max","j","value","rsqrtImpl","sqrt","rsqrt","Rsqrt","rsqrtConfig","sparseFillEmptyRowsImpl","indicesShape","indicesDType","valuesDType","denseShape","defaultValue","indicesCount","denseRows","emptyRowIndicator","Array","reverseIndexMap","rank","Error","rowsAreOrdered","lastIndicesRow","csrOffset","fill","row","allRowsFull","rowEmpty","outputIndices","fullIndicesCount","filledCount","outputI","startingIndex","col","transposeImpl","xShape","perm","xRank","xStrides","newStrides","result","loc","newLoc","reshape","$shape","$xSize","incRef","xData","complexTensorInfos","real","imag","reshapeConfig","Reshape","subImpl","aValue","bValue","subComplexImpl","aReal","aImag","bReal","bImag","sub","Sub","subConfig","tileImpl","xBuf","reps","buffer","indexToLoc","originalLoc","originalIndex","locToIndex","sum","keepDims","$x","axes","permutation","backend_util","reductionAxes","permutedX","reduceShape","resultDtype","oldResult","disposeIntermediateTensorInfo","sumConfig","Sum","negImpl","xDtype","minusOne","negConfig","Neg","res","lessImpl","a","b","less","Less","lessConfig","minimumImpl","min","minimum","Minimum","minimumConfig","preluImpl","xValue","prelu","bVals","resultData","resultShape","preluConfig","Prelu","prodImpl","outDtype","upcastType","prod","prodConfig","Prod","intermediateTensorInfos","t","rangeImpl","start","stop","step","numElements","abs","ceil","topKImpl","k","sorted","lastDim","batch","size","allTopKVals","allTopKIndices","subarray","valAndInd","index","sort","outOffset","topKVals","topKIndices","relu6","Relu6","relu6Config","realDivImpl","div","RealDiv","realDivConfig","linSpaceImpl","num","sigmoid","Sigmoid","exp","sigmoidConfig","multiplyImpl","multiplyComplexImpl","multiply","Multiply","multiplyConfig","maximumImpl","maximum","Maximum","maximumConfig","stridedSliceImpl","strides","begin","outBuf","relu","Relu","reluConfig","transpose","write","transposeConfig","Transpose","input","realVal","realConfig","Real","sliceImpl","isContinous","slice_util","flatOffset","decodedData","inBuf","outLoc","inLoc","map","idx","$begin","$size","sliceConfig","Slice","_fusedMatMulConfig","_FusedMatMul","bias","preluActivationWeights","transposeA","transposeB","activation","leakyreluAlpha","current","addRes","activationRes","intermediates","lessEqualImpl","lessEqual","LessEqual","lessEqualConfig","linSpaceConfig","LinSpace","log1p","Log1p","log1pConfig","logicalAndImpl","logicalAnd","LogicalAnd","logicalAndConfig","logicalNot","LogicalNot","logicalNotConfig","logicalOrImpl","logicalOr","LogicalOr","logicalOrConfig","reductionIndices","cpuBackend","origAxes","permutedAxes","maxOutShape","maxConfig","Max","maxPoolConfig","MaxPool","filterSize","pad","dimRoundingMode","convInfo","filterWidth","filterHeight","inShape","xValues","maxPool3DConfig","MaxPool3D","dataFormat","maxPool3DGradConfig","MaxPool3DGrad","dy","inputBuf","bufferSync","maxPosBuf","strideDepth","strideHeight","strideWidth","dilationDepth","dilationHeight","dilationWidth","effectiveFilterDepth","effectiveFilterHeight","effectiveFilterWidth","padFront","padInfo","front","padLeft","left","padTop","top","dx","dyBuf","batchSize","channel","inChannels","dxDepth","inDepth","dxRow","inHeight","dxCol","inWidth","dyDepthCorner","dyRowCorner","dyColCorner","dotProd","wDepth","dyDepth","outDepth","floor","wRow","dyRow","outHeight","wCol","dyCol","outWidth","mask","maxPoolGradConfig","MaxPoolGrad","output","dyData","d","dxR","dxC","dyRCorner","dyCCorner","wR","dyR","wC","dyC","maxPoolWithArgmaxConfig","MaxPoolWithArgmax","includeBatchInIndex","pooled","indexes","maxPools","maxPositions","maxPoolWithArgmaxImpl","pooledDataId","indexesDataId","meanConfig","Mean","toDispose","reduceSizeScalar","Float32Array","minConfig","Min","expandedShape","reshapedResult","mirrorPadConfig","MirrorPad","paddings","mode","p","end","resultSize","resultRank","resultStrides","resVals","coords","c","inIndex","modImpl","rem","mod","Mod","modConfig","softmax","logits","dim","logitsRank","$dim","maxLogit","maxLogitReshaped","sumExp","sumReshaped","softmaxConfig","Softmax","multinomialConfig","Multinomial","numSamples","seed","normalized","probabilities","numEvents","probVals","resShape","cdf","event","random","seedrandom","alea","sampleId","r","nonMaxSuppressionV3Impl","kernel_impls","nonMaxSuppressionV3Config","NonMaxSuppressionV3","boxes","scores","maxOutputSize","iouThreshold","scoreThreshold","boxesVals","scoresVals","selectedIndices","nonMaxSuppressionV4Impl","nonMaxSuppressionV4Config","NonMaxSuppressionV4","padToMaxOutputSize","validOutputs","nonMaxSuppressionV5Impl","nonMaxSuppressionV5Config","NonMaxSuppressionV5","softNmsSigma","maxOutputSizeVal","iouThresholdVal","scoreThresholdVal","softNmsSigmaVal","selectedScores","notEqualImpl","notEqual","NotEqual","notEqualConfig","oneHotConfig","OneHot","depth","onValue","offValue","indicesSize","indicesVal","zerosLike","realPart","imagPart","zerosLikeConfig","ZerosLike","onesLikeConfig","OnesLike","onesLike","pack","expandedTensors","expandedT","packConfig","Pack","padV2Config","PadV2","constantValue","outCoords","powImpl","pow","Pow","powConfig","rangeConfig","Range","reciprocal","Reciprocal","reciprocalConfig","resizeBilinearConfig","ResizeBilinear","images","alignCorners","halfPixelCenters","imagesStrides","newHeight","newWidth","oldHeight","oldWidth","numChannels","effectiveInputSize","effectiveOutputSize","outputIdx","effectiveRowSizeRatio","effectiveColSizeRatio","sourceFracRow","sourceRowFloor","rowFrac","sourceRowCeil","topRowOffset","botRowOffset","sourceFracCol","sourceColFloor","colFrac","sourceColCeil","topLeftOffest","botLeftOffset","topRightOffset","botRightOffest","topLeft","bottomLeft","newValue","resizeBilinearGradConfig","ResizeBilinearGrad","xHeight","xWidth","yHeight","yWidth","effectiveXSize","effectiveYSize","heightScale","widthScale","dyValues","bOffset","topDxRIndex","bottomDxRIndex","topDxROffset","bottomDxROffset","dxRLerp","inverseDxRLerp","leftDxCIndex","rightDxCIndex","dxCLerp","inverseDxCLerp","topLeftRCOffset","topRightRCOffset","bottomLeftRCOffset","bottomRightRCOffset","inverseDxRLerpTimesInverseDxCLerp","inverseDxRLerpTimesDxCLerp","dxRLerpTimesInverseDxCLerp","dxRLerpTimesDxCLerp","dyVal","resizeNearestNeighborConfig","ResizeNearestNeighbor","outputOffset","batchOffset","sourceNearestRow","round","rowOffset","sourceNearestCol","colOffset","newVal","resizeNearestNeighborGradConfig","ResizeNearestNeighborGrad","dyStrides","invHeightScale","invWidthScale","winHeight","winWidth","startRLerp","startDyR","startCLerp","startDyC","accum","dyRIndex","dyROffset","dyCIndex","dyCOffset","reverseConfig","Reverse","dims","$dims","rotateWithOffsetConfig","RotateWithOffset","image","radians","fillValue","center","imageHeight","imageWidth","centerX","centerY","sinFactor","sin","cosFactor","cos","imageVals","batchIdx","y","coordX","coordY","outputValue","Round","base","roundConfig","scatterImpl","updates","outputSize","sliceSize","numUpdates","sliceRank","sumDupeIndices","flattenShape","indicesData","updatesData","flattenIndex","scatterNdConfig","ScatterNd","selectConfig","Select","condition","e","conditionRank","tValues","eValues","newValues","scaleAlpha","scale","selu","Selu","seluConfig","sign","Sign","signConfig","Sin","sinConfig","sinh","Sinh","sinhConfig","threshold","softplus","Softplus","tooLarge","tooSmall","expX","softplusConfig","spaceToBatchNDConfig","SpaceToBatchND","blockShape","completePaddings","paddedX","reshapedPaddedShape","permutedReshapedPaddedPermutation","reshapeInputs","reshapeAttrs","paddedXReshaped","transposeInputs","transposeAttrs","paddedXT","resultReshapeInputs","resultReshapeAttrs","sparseFillEmptyRowsConfig","SparseFillEmptyRows","$indices","$values","$denseShape","$defaultValue","outputIndicesShape","Uint8Array","Number","sparseReshapeConfig","SparseReshape","inputIndices","inputShape","$inputShape","from","$inputIndices","targetShape","newIndices","sparseToDenseConfig","SparseToDense","sparseIndices","sparseValues","splitVConfig","SplitV","numOrSizeSplits","splitSizes","s","sliceT","Sqrt","sqrtConfig","squareConfig","Square","squaredDifferenceImpl","diff","squaredDifference","SquaredDifference","squaredDifferenceConfig","Step","stepAttrs","isNaN","NaN","stepConfig","stridedSliceConfig","StridedSlice","beginMask","endMask","ellipsisMask","newAxisMask","shrinkAxisMask","nonStrided","$strides","sliced","some","resultReshaped","tan","Tan","tanConfig","tanh","Tanh","tanhConfig","tileConfig","Tile","topKConfig","TopK","transformConfig","Transform","transforms","interpolation","fillMode","batchStride","rowStride","colStride","transformVals","transform","outY","outX","val","projection","inX","inY","mapCoord","nearestInterpolation","bilinearInterpolation","outCoord","len","inCoord","sz2","trunc","mapCoordReflect","sz","mapCoordWrap","mapCoordNearest","mapCoordConstant","readWithFillValue","yFloor","xFloor","yCeil","xCeil","uniqueConfig","Unique","unpackConfig","Unpack","valueRank","outIndex","tempRes","unsortedSegmentSumConfig","UnsortedSegmentSum","segmentIds","numSegments","numIters","$segmentIds","expanded","scalarValue","segmentId","maskCasted","mul","sumTensorInfo","kernelConfigs","kernelConfig","registerKernel","sparseReshapeImpl","inputIndicesShape","inputDType","denseSize","nnz","outputRank","product","unknownIndex","missing","inputRank","inputStrides","outputStrides","id"],"sourceRoot":""}