{"version":3,"file":"stylist-embed.da9751882088b9cdd456.js","mappings":"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","sources":["webpack://StylistWidget/webpack/universalModuleDefinition","webpack://StylistWidget/./src/store/tryOnStore.ts","webpack://StylistWidget/./src/store/recommendationStore.ts","webpack://StylistWidget/./src/types/chat.ts","webpack://StylistWidget/./src/embed.ts","webpack://StylistWidget/./src/types/tryOn.ts","webpack://StylistWidget/./src/store/userStore.ts","webpack://StylistWidget/./src/utils/localStorage.ts","webpack://StylistWidget/./src/store/feedbackStore.ts","webpack://StylistWidget/./src/store/chatStore.ts","webpack://StylistWidget/./src/services/image-processing/imagePositioning.ts"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"StylistWidget\"] = factory();\n\telse\n\t\troot[\"StylistWidget\"] = factory();\n})(self, function() {\nreturn ","// Store for managing virtual try-on state\nimport { create } from 'zustand';\nimport { devtools, persist } from 'zustand/middleware';\nimport { BackgroundRemovalMethod, GarmentType } from '../types/tryOn';\nimport { getDefaultBodyPosition } from '../services/image-processing/imagePositioning';\n// Default settings\nconst DEFAULT_SETTINGS = {\n    preferredBackgroundRemovalMethod: BackgroundRemovalMethod.TENSORFLOW,\n    removeBackgroundAutomatically: true,\n    showGuidelines: true,\n    highQualityRendering: true,\n    defaultGarmentScale: {\n        [GarmentType.TOP]: 0.8,\n        [GarmentType.BOTTOM]: 0.7,\n        [GarmentType.DRESS]: 0.9,\n        [GarmentType.OUTERWEAR]: 0.85,\n        [GarmentType.SHOES]: 0.5,\n        [GarmentType.ACCESSORY]: 0.4\n    },\n    defaultGarmentOffset: {\n        [GarmentType.TOP]: { x: 0, y: -50 },\n        [GarmentType.BOTTOM]: { x: 0, y: 100 },\n        [GarmentType.DRESS]: { x: 0, y: 0 },\n        [GarmentType.OUTERWEAR]: { x: 0, y: -30 },\n        [GarmentType.SHOES]: { x: 0, y: 200 },\n        [GarmentType.ACCESSORY]: { x: 0, y: -150 }\n    }\n};\nexport const useTryOnStore = create()(devtools(persist((set, get) => ({\n    // Current try-on state\n    currentOutfit: null,\n    userImage: null,\n    isLoading: false,\n    error: null,\n    // Settings\n    settings: DEFAULT_SETTINGS,\n    // Saved results\n    savedResults: [],\n    // Canvas state\n    canvasWidth: 600,\n    canvasHeight: 800,\n    // Modal state\n    isTryOnModalOpen: false,\n    isUploadModalOpen: false,\n    // Actions\n    setCurrentOutfit: (outfit) => {\n        set({ currentOutfit: outfit });\n    },\n    addGarmentToOutfit: (garment) => {\n        const { currentOutfit } = get();\n        if (!currentOutfit) {\n            // Create a new outfit if none exists\n            const newOutfit = {\n                id: `outfit_${Date.now()}`,\n                garments: [garment],\n                createdAt: new Date()\n            };\n            set({ currentOutfit: newOutfit });\n        }\n        else {\n            // Remove any existing garment of the same type if it has the same body position\n            const filteredGarments = currentOutfit.garments.filter((g) => !(g.type === garment.type && g.bodyPosition === garment.bodyPosition));\n            // Add the new garment\n            set({\n                currentOutfit: Object.assign(Object.assign({}, currentOutfit), { garments: [...filteredGarments, garment] })\n            });\n        }\n    },\n    removeGarmentFromOutfit: (garmentId) => {\n        const { currentOutfit } = get();\n        if (currentOutfit) {\n            const updatedGarments = currentOutfit.garments.filter((g) => g.id !== garmentId);\n            set({\n                currentOutfit: Object.assign(Object.assign({}, currentOutfit), { garments: updatedGarments })\n            });\n        }\n    },\n    updateGarment: (garmentId, updates) => {\n        const { currentOutfit } = get();\n        if (currentOutfit) {\n            const updatedGarments = currentOutfit.garments.map((g) => g.id === garmentId ? Object.assign(Object.assign({}, g), updates) : g);\n            set({\n                currentOutfit: Object.assign(Object.assign({}, currentOutfit), { garments: updatedGarments })\n            });\n        }\n    },\n    setUserImage: (image) => {\n        set({ userImage: image });\n        // Also update the current outfit if it exists\n        const { currentOutfit } = get();\n        if (currentOutfit) {\n            // Cast image to UserImageInfo | undefined to match the expected type\n            const userImageForOutfit = image;\n            set({\n                currentOutfit: Object.assign(Object.assign({}, currentOutfit), { userImage: userImageForOutfit })\n            });\n        }\n    },\n    updateUserImage: (updates) => {\n        const { userImage } = get();\n        if (userImage) {\n            const updatedImage = Object.assign(Object.assign({}, userImage), updates);\n            set({ userImage: updatedImage });\n            // Also update the current outfit if it exists\n            const { currentOutfit } = get();\n            if (currentOutfit) {\n                set({\n                    currentOutfit: Object.assign(Object.assign({}, currentOutfit), { userImage: updatedImage })\n                });\n            }\n        }\n    },\n    clearUserImage: () => {\n        set({ userImage: null });\n        // Also update the current outfit if it exists\n        const { currentOutfit } = get();\n        if (currentOutfit) {\n            // Set to undefined to match expected type\n            const updatedOutfit = Object.assign(Object.assign({}, currentOutfit), { userImage: undefined });\n            set({ currentOutfit: updatedOutfit });\n        }\n    },\n    updateOutfit: (updates) => {\n        const { currentOutfit } = get();\n        if (currentOutfit) {\n            set({\n                currentOutfit: Object.assign(Object.assign({}, currentOutfit), updates)\n            });\n        }\n    },\n    setSettings: (settings) => {\n        set({\n            settings: Object.assign(Object.assign({}, get().settings), settings)\n        });\n    },\n    setLoading: (isLoading) => {\n        set({ isLoading });\n    },\n    setError: (error) => {\n        set({ error });\n    },\n    saveResult: (result) => {\n        const results = [...get().savedResults];\n        // Check if this result already exists\n        const existingIndex = results.findIndex((r) => r.id === result.id);\n        if (existingIndex >= 0) {\n            // Update existing result\n            results[existingIndex] = result;\n        }\n        else {\n            // Add new result\n            results.push(result);\n        }\n        set({ savedResults: results });\n    },\n    deleteSavedResult: (resultId) => {\n        const filteredResults = get().savedResults.filter((r) => r.id !== resultId);\n        set({ savedResults: filteredResults });\n    },\n    setCanvasDimensions: (width, height) => {\n        set({ canvasWidth: width, canvasHeight: height });\n    },\n    openTryOnModal: () => {\n        set({ isTryOnModalOpen: true });\n    },\n    closeTryOnModal: () => {\n        set({ isTryOnModalOpen: false });\n    },\n    openUploadModal: () => {\n        set({ isUploadModalOpen: true });\n    },\n    closeUploadModal: () => {\n        set({ isUploadModalOpen: false });\n    },\n    reset: () => {\n        set({\n            currentOutfit: null,\n            userImage: null,\n            isLoading: false,\n            error: null\n        });\n    },\n    // Integration methods\n    startNewTryOn: (productImage, productType) => {\n        const { settings } = get();\n        const state = get();\n        // Create a new outfit if none exists\n        const outfit = state.currentOutfit || {\n            id: crypto.randomUUID(),\n            garments: [],\n            createdAt: new Date()\n        };\n        // Create a garment info object\n        const newGarment = {\n            id: crypto.randomUUID(),\n            type: productType,\n            url: typeof productImage === 'string' ? productImage : URL.createObjectURL(productImage),\n            bodyPosition: getDefaultBodyPosition(productType),\n            zIndex: outfit.garments.length + 1,\n            layerIndex: outfit.garments.length,\n            scale: settings.defaultGarmentScale[productType] || 1,\n            offset: settings.defaultGarmentOffset[productType] || { x: 0, y: 0 },\n            rotation: 0,\n            withoutBackground: true\n        };\n        // Add the garment to the outfit\n        const updatedGarments = [...(outfit.garments || []), newGarment];\n        set({\n            currentOutfit: Object.assign(Object.assign({}, outfit), { garments: updatedGarments })\n        });\n    },\n    tryOnOutfit: (outfit) => {\n        set({ currentOutfit: outfit });\n    }\n}), {\n    name: 'stylist-try-on-storage',\n    // Only persist settings and saved results\n    partialize: (state) => ({\n        settings: state.settings,\n        savedResults: state.savedResults\n    })\n}), { name: 'try-on-store' }));\n","// Recommendation state management\nimport { create } from 'zustand';\nexport const useRecommendationStore = create((set, get) => ({\n    recommendedItems: [],\n    recommendedOutfits: [],\n    savedOutfits: [],\n    wishlistItems: [],\n    cartItems: [],\n    viewedItems: [],\n    context: null,\n    loading: false,\n    error: null,\n    setRecommendedItems: (items) => {\n        set({ recommendedItems: items });\n    },\n    setRecommendedOutfits: (outfits) => {\n        set({ recommendedOutfits: outfits });\n    },\n    setSavedOutfits: (outfits) => {\n        set({ savedOutfits: outfits });\n    },\n    addRecommendedItem: (item) => {\n        set((state) => ({\n            recommendedItems: [...state.recommendedItems, item]\n        }));\n    },\n    addRecommendedOutfit: (outfit) => {\n        set((state) => ({\n            recommendedOutfits: [...state.recommendedOutfits, outfit]\n        }));\n    },\n    addToWishlist: (item) => {\n        // Check if item is already in wishlist\n        const exists = get().wishlistItems.some((wishlistItem) => wishlistItem.itemId === item.itemId);\n        if (!exists) {\n            set((state) => ({\n                wishlistItems: [...state.wishlistItems, item]\n            }));\n        }\n    },\n    removeFromWishlist: (itemId) => {\n        set((state) => ({\n            wishlistItems: state.wishlistItems.filter((item) => item.itemId !== itemId)\n        }));\n    },\n    addToCart: (item) => {\n        // Check if item is already in cart\n        const existingItemIndex = get().cartItems.findIndex((cartItem) => cartItem.itemId === item.itemId);\n        if (existingItemIndex >= 0) {\n            // Update quantity if already in cart\n            set((state) => {\n                const updatedCartItems = [...state.cartItems];\n                updatedCartItems[existingItemIndex].quantity += item.quantity;\n                return { cartItems: updatedCartItems };\n            });\n        }\n        else {\n            // Add new item to cart\n            set((state) => ({\n                cartItems: [...state.cartItems, item]\n            }));\n        }\n    },\n    removeFromCart: (itemId) => {\n        set((state) => ({\n            cartItems: state.cartItems.filter((item) => item.itemId !== itemId)\n        }));\n    },\n    updateCartItemQuantity: (itemId, quantity) => {\n        set((state) => ({\n            cartItems: state.cartItems.map((item) => item.itemId === itemId ? Object.assign(Object.assign({}, item), { quantity }) : item)\n        }));\n    },\n    addViewedItem: (itemId) => {\n        if (!get().viewedItems.includes(itemId)) {\n            set((state) => ({\n                viewedItems: [...state.viewedItems, itemId]\n            }));\n        }\n    },\n    saveOutfit: (outfit) => {\n        // Check if outfit is already saved\n        const exists = get().savedOutfits.some((savedOutfit) => savedOutfit.outfitId === outfit.outfitId);\n        if (!exists) {\n            set((state) => ({\n                savedOutfits: [...state.savedOutfits, outfit]\n            }));\n        }\n    },\n    removeSavedOutfit: (outfitId) => {\n        set((state) => ({\n            savedOutfits: state.savedOutfits.filter((outfit) => outfit.outfitId !== outfitId)\n        }));\n    },\n    setContext: (context) => {\n        set({ context });\n    },\n    clearRecommendations: () => {\n        set({\n            recommendedItems: [],\n            recommendedOutfits: [],\n            context: null\n        });\n    },\n    setLoading: (loading) => {\n        set({ loading });\n    },\n    setError: (error) => {\n        set({ error });\n    },\n    getItemsByCategory: (category) => {\n        return get().recommendedItems.filter(item => item.category === category);\n    },\n    getItemsSortedByMatchScore: () => {\n        return [...get().recommendedItems].sort((a, b) => b.matchScore - a.matchScore);\n    },\n    getOutfitById: (id) => {\n        return get().recommendedOutfits.find(outfit => outfit.id === id);\n    },\n    getItemById: (id) => {\n        return get().recommendedItems.find(item => item.id === id);\n    },\n    updateItem: (id, updates) => {\n        set((state) => ({\n            recommendedItems: state.recommendedItems.map(item => item.id === id ? Object.assign(Object.assign({}, item), updates) : item)\n        }));\n    }\n}));\nexport default useRecommendationStore;\n","// Chat-related types for the widget\nexport var MessageType;\n(function (MessageType) {\n    MessageType[\"TEXT\"] = \"text\";\n    MessageType[\"RECOMMENDATION\"] = \"recommendation\";\n    MessageType[\"OUTFIT\"] = \"outfit\";\n    MessageType[\"QUIZ\"] = \"quiz\";\n    MessageType[\"LOADING\"] = \"loading\";\n    MessageType[\"ERROR\"] = \"error\";\n})(MessageType || (MessageType = {}));\nexport var MessageSender;\n(function (MessageSender) {\n    MessageSender[\"USER\"] = \"user\";\n    MessageSender[\"ASSISTANT\"] = \"assistant\";\n    MessageSender[\"SYSTEM\"] = \"system\";\n})(MessageSender || (MessageSender = {}));\n","// Embed script for retailers to include the full-featured widget on their site\nimport { useChatStore } from '@store/index';\n// Map window.STYLIST_CONFIG values to a global config object\n// This is only needed for the standalone full-widget.html file\nif (typeof window !== 'undefined' && window.STYLIST_CONFIG) {\n    const config = window.STYLIST_CONFIG;\n    // Create a global runtime config object instead of modifying process.env\n    window.__STYLIST_RUNTIME_CONFIG = {\n        FORCE_DEMO_MODE: typeof config.forceDemoMode === 'boolean' ? config.forceDemoMode : false,\n        USE_CLAUDE_DEMO: typeof config.useClaudeDemo === 'boolean' ? config.useClaudeDemo : false,\n        USE_MOCK_RETAILER: typeof config.useMockRetailer === 'boolean' ? config.useMockRetailer : true,\n        ANTHROPIC_API_KEY: config.anthropicApiKey || ''\n    };\n    // Log configuration\n    console.log('Stylist widget runtime configuration loaded');\n}\n// Initialize the widget with all features enabled\nfunction init(config) {\n    try {\n        // Store configuration\n        window.__StylistWidgetConfig = config;\n        // Set widget to automatically open\n        const store = useChatStore.getState();\n        store.setCurrentView('chat');\n        // Log initialization\n        console.log('The Stylist widget initialized successfully with all features.');\n        return {\n            success: true,\n            message: 'The Stylist widget initialized successfully with all features.'\n        };\n    }\n    catch (error) {\n        console.error('Error initializing widget:', error);\n        return {\n            success: false,\n            message: `Initialization failed: ${error instanceof Error ? error.message : String(error)}`\n        };\n    }\n}\n// Open the widget\nfunction open() {\n    try {\n        useChatStore.getState().toggleOpen();\n        return true;\n    }\n    catch (error) {\n        console.error('Error opening widget:', error);\n        return false;\n    }\n}\n// Close the widget\nfunction close() {\n    try {\n        const { isOpen } = useChatStore.getState();\n        if (isOpen) {\n            useChatStore.getState().toggleOpen();\n        }\n        return true;\n    }\n    catch (error) {\n        console.error('Error closing widget:', error);\n        return false;\n    }\n}\n// Minimize the widget\nfunction minimize() {\n    try {\n        useChatStore.getState().toggleMinimize();\n        return true;\n    }\n    catch (error) {\n        console.error('Error minimizing widget:', error);\n        return false;\n    }\n}\n// Switch view between chat and lookbook\nfunction switchView(view) {\n    try {\n        useChatStore.getState().setCurrentView(view);\n        return true;\n    }\n    catch (error) {\n        console.error('Error switching view:', error);\n        return false;\n    }\n}\n// Start the style quiz\nfunction openStyleQuiz() {\n    try {\n        // This function will be used by the ChatWidget component to show the quiz\n        // Set the flag without resetting it - the component will handle state\n        window.__StylistShowStyleQuiz = true;\n        // Emit an event if the event system is available\n        if (window.__StylistWidgetEvents) {\n            window.__StylistWidgetEvents.emit('styleQuiz:open');\n        }\n        return true;\n    }\n    catch (error) {\n        console.error('Error opening style quiz:', error);\n        return false;\n    }\n}\n// Open virtual try-on\nfunction openVirtualTryOn() {\n    try {\n        // Set the flag without resetting it - the component will handle state\n        window.__StylistShowVirtualTryOn = true;\n        // Emit an event if the event system is available\n        if (window.__StylistWidgetEvents) {\n            window.__StylistWidgetEvents.emit('virtualTryOn:open');\n        }\n        return true;\n    }\n    catch (error) {\n        console.error('Error opening virtual try-on:', error);\n        return false;\n    }\n}\n// Export the API\nconst widgetAPI = {\n    init,\n    open,\n    close,\n    minimize,\n    switchView,\n    openStyleQuiz,\n    openVirtualTryOn,\n    __debug: {\n        addMockItems: () => ({\n            success: false,\n            message: 'Mock items not available in embed version'\n        }),\n        getDiagnostics: () => ({\n            logs: [],\n            flags: {\n                initialized: false,\n                mounted: false,\n                renderComplete: false,\n                storesInitialized: false,\n                backgroundInitComplete: false\n            }\n        }),\n        clearDiagnostics: () => ({\n            success: false,\n            message: 'Diagnostics not available in embed version'\n        })\n    }\n};\n// Add to window object\nif (typeof window !== 'undefined' && !window.StylistWidget) {\n    // Use type assertion to ensure TypeScript knows this is a valid operation\n    window.StylistWidget = widgetAPI;\n}\nexport { init, open, close, minimize, switchView, openStyleQuiz, openVirtualTryOn };\n","// Types for the virtual try-on feature\nexport var GarmentType;\n(function (GarmentType) {\n    GarmentType[\"TOP\"] = \"top\";\n    GarmentType[\"BOTTOM\"] = \"bottom\";\n    GarmentType[\"DRESS\"] = \"dress\";\n    GarmentType[\"OUTERWEAR\"] = \"outerwear\";\n    GarmentType[\"SHOES\"] = \"shoes\";\n    GarmentType[\"ACCESSORY\"] = \"accessory\";\n})(GarmentType || (GarmentType = {}));\nexport var BodyPosition;\n(function (BodyPosition) {\n    BodyPosition[\"UPPER_BODY\"] = \"upper_body\";\n    BodyPosition[\"LOWER_BODY\"] = \"lower_body\";\n    BodyPosition[\"FULL_BODY\"] = \"full_body\";\n    BodyPosition[\"HEAD\"] = \"head\";\n    BodyPosition[\"FEET\"] = \"feet\";\n    BodyPosition[\"HANDS\"] = \"hands\";\n    BodyPosition[\"NECK\"] = \"neck\";\n    BodyPosition[\"WAIST\"] = \"waist\";\n})(BodyPosition || (BodyPosition = {}));\nexport var ProcessingStatus;\n(function (ProcessingStatus) {\n    ProcessingStatus[\"IDLE\"] = \"idle\";\n    ProcessingStatus[\"UPLOADING\"] = \"uploading\";\n    ProcessingStatus[\"PROCESSING\"] = \"processing\";\n    ProcessingStatus[\"REMOVING_BACKGROUND\"] = \"removing_background\";\n    ProcessingStatus[\"COMPLETED\"] = \"completed\";\n    ProcessingStatus[\"FAILED\"] = \"failed\";\n})(ProcessingStatus || (ProcessingStatus = {}));\nexport var BackgroundRemovalMethod;\n(function (BackgroundRemovalMethod) {\n    BackgroundRemovalMethod[\"REMOVE_BG_API\"] = \"remove_bg_api\";\n    BackgroundRemovalMethod[\"TENSORFLOW\"] = \"tensorflow\";\n    BackgroundRemovalMethod[\"MANUAL\"] = \"manual\";\n})(BackgroundRemovalMethod || (BackgroundRemovalMethod = {}));\n","// User state management\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nexport const useUserStore = create()(persist((set, get) => ({\n    user: null,\n    styleQuizResult: null,\n    isLoading: false,\n    error: null,\n    setUser: (user) => {\n        set({ user });\n    },\n    updateUser: (updates) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        set({\n            user: Object.assign(Object.assign({}, currentUser), updates)\n        });\n    },\n    setStyleQuizResult: (result) => {\n        set({ styleQuizResult: result });\n    },\n    addToCloset: (item) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        set({\n            user: Object.assign(Object.assign({}, currentUser), { closet: [...currentUser.closet, item] })\n        });\n    },\n    removeFromCloset: (itemId) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        set({\n            user: Object.assign(Object.assign({}, currentUser), { closet: currentUser.closet.filter((item) => item.id !== itemId) })\n        });\n    },\n    toggleItemFavorite: (itemId, favorite) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        set({\n            user: Object.assign(Object.assign({}, currentUser), { closet: currentUser.closet.map((item) => item.id === itemId ? Object.assign(Object.assign({}, item), { favorite }) : item) })\n        });\n    },\n    addLikedItem: (itemId) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        // Add to liked items if not already there\n        if (!currentUser.feedback.likedItems.includes(itemId)) {\n            set({\n                user: Object.assign(Object.assign({}, currentUser), { feedback: Object.assign(Object.assign({}, currentUser.feedback), { likedItems: [...currentUser.feedback.likedItems, itemId], \n                        // If it was previously disliked, remove from disliked\n                        dislikedItems: currentUser.feedback.dislikedItems.filter((id) => id !== itemId), lastInteraction: new Date() }) })\n            });\n        }\n    },\n    addDislikedItem: (itemId) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        // Add to disliked items if not already there\n        if (!currentUser.feedback.dislikedItems.includes(itemId)) {\n            set({\n                user: Object.assign(Object.assign({}, currentUser), { feedback: Object.assign(Object.assign({}, currentUser.feedback), { dislikedItems: [...currentUser.feedback.dislikedItems, itemId], \n                        // If it was previously liked, remove from liked\n                        likedItems: currentUser.feedback.likedItems.filter((id) => id !== itemId), lastInteraction: new Date() }) })\n            });\n        }\n    },\n    removeLikedItem: (itemId) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        set({\n            user: Object.assign(Object.assign({}, currentUser), { feedback: Object.assign(Object.assign({}, currentUser.feedback), { likedItems: currentUser.feedback.likedItems.filter((id) => id !== itemId), lastInteraction: new Date() }) })\n        });\n    },\n    removeDislikedItem: (itemId) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        set({\n            user: Object.assign(Object.assign({}, currentUser), { feedback: Object.assign(Object.assign({}, currentUser.feedback), { dislikedItems: currentUser.feedback.dislikedItems.filter((id) => id !== itemId), lastInteraction: new Date() }) })\n        });\n    },\n    addViewedItem: (itemId) => {\n        const currentUser = get().user;\n        if (!currentUser)\n            return;\n        // Add to viewed items if not already there\n        if (!currentUser.feedback.viewedItems.includes(itemId)) {\n            set({\n                user: Object.assign(Object.assign({}, currentUser), { feedback: Object.assign(Object.assign({}, currentUser.feedback), { viewedItems: [...currentUser.feedback.viewedItems, itemId], lastInteraction: new Date() }) })\n            });\n        }\n    },\n    setLoading: (isLoading) => {\n        set({ isLoading });\n    },\n    setError: (error) => {\n        set({ error });\n    },\n    logout: () => {\n        set({\n            user: null,\n            styleQuizResult: null\n        });\n    }\n}), {\n    name: 'stylist-user-storage',\n    partialize: (state) => ({\n        user: state.user,\n        styleQuizResult: state.styleQuizResult\n    })\n}));\n","// Utility functions for working with localStorage\n// Check if localStorage is available\nexport const isLocalStorageAvailable = () => {\n    const test = 'test';\n    try {\n        localStorage.setItem(test, test);\n        localStorage.removeItem(test);\n        return true;\n    }\n    catch (_a) {\n        return false;\n    }\n};\n// Get item from localStorage with expiry check\nexport const getWithExpiry = (key) => {\n    if (!isLocalStorageAvailable())\n        return null;\n    const itemStr = localStorage.getItem(key);\n    if (!itemStr)\n        return null;\n    try {\n        const item = JSON.parse(itemStr);\n        // Check if item has expiry\n        if (item.expiry && new Date().getTime() > item.expiry) {\n            localStorage.removeItem(key);\n            return null;\n        }\n        return item.value;\n    }\n    catch (_a) {\n        return null;\n    }\n};\n// Set item in localStorage with expiry\nexport const setWithExpiry = (key, value, expiryInSeconds) => {\n    if (!isLocalStorageAvailable())\n        return;\n    const item = {\n        value,\n        expiry: new Date().getTime() + expiryInSeconds * 1000\n    };\n    localStorage.setItem(key, JSON.stringify(item));\n};\n// Remove item from localStorage\nexport const removeItem = (key) => {\n    if (!isLocalStorageAvailable())\n        return;\n    localStorage.removeItem(key);\n};\n// Get user ID from localStorage or create a new one\nexport const getUserId = () => {\n    if (!isLocalStorageAvailable()) {\n        return `anonymous_${Date.now()}`;\n    }\n    let userId = localStorage.getItem('stylist_user_id');\n    if (!userId) {\n        userId = `user_${Date.now()}_${Math.random().toString(36).substring(2, 9)}`;\n        localStorage.setItem('stylist_user_id', userId);\n    }\n    return userId;\n};\n// Set user ID in localStorage\nexport const setUserId = (userId) => {\n    if (!isLocalStorageAvailable())\n        return;\n    localStorage.setItem('stylist_user_id', userId);\n};\n// Clear all Stylist-related localStorage items\nexport const clearStylistStorage = () => {\n    if (!isLocalStorageAvailable())\n        return;\n    const stylistKeys = [];\n    for (let i = 0; i < localStorage.length; i++) {\n        const key = localStorage.key(i);\n        if (key && key.startsWith('stylist_')) {\n            stylistKeys.push(key);\n        }\n    }\n    stylistKeys.forEach((key) => localStorage.removeItem(key));\n};\n","// Feedback state management\nimport { create } from 'zustand';\nimport { persist } from 'zustand/middleware';\nimport { getUserId } from '@/utils/localStorage';\n// Helper to convert sets to arrays for persistence\nconst setToArray = (set) => Array.from(set);\nconst arrayToSet = (array) => new Set(array);\nexport const useFeedbackStore = create()(persist((set, get) => ({\n    likedItems: new Set(),\n    dislikedItems: new Set(),\n    likedOutfits: new Set(),\n    dislikedOutfits: new Set(),\n    thumbsUpMessages: new Set(),\n    feedbackHistory: [],\n    pendingSync: [],\n    isSyncing: false,\n    lastSyncedAt: null,\n    addItemFeedback: (itemId, type) => {\n        const userId = getUserId();\n        const timestamp = new Date();\n        const feedbackItem = {\n            id: `item_${type}_${itemId}_${timestamp.getTime()}`,\n            type,\n            timestamp,\n            entityType: 'item',\n            metadata: { itemId, userId }\n        };\n        if (type === 'like') {\n            set((state) => ({\n                likedItems: new Set(state.likedItems).add(itemId),\n                dislikedItems: new Set(state.dislikedItems).delete(itemId) ?\n                    new Set(state.dislikedItems) : state.dislikedItems,\n                feedbackHistory: [...state.feedbackHistory, feedbackItem],\n                pendingSync: [...state.pendingSync, feedbackItem]\n            }));\n        }\n        else {\n            set((state) => ({\n                dislikedItems: new Set(state.dislikedItems).add(itemId),\n                likedItems: new Set(state.likedItems).delete(itemId) ?\n                    new Set(state.likedItems) : state.likedItems,\n                feedbackHistory: [...state.feedbackHistory, feedbackItem],\n                pendingSync: [...state.pendingSync, feedbackItem]\n            }));\n        }\n    },\n    addOutfitFeedback: (outfitId, type) => {\n        const userId = getUserId();\n        const timestamp = new Date();\n        const feedbackItem = {\n            id: `outfit_${type}_${outfitId}_${timestamp.getTime()}`,\n            type,\n            timestamp,\n            entityType: 'outfit',\n            metadata: { outfitId, userId }\n        };\n        if (type === 'like') {\n            set((state) => ({\n                likedOutfits: new Set(state.likedOutfits).add(outfitId),\n                dislikedOutfits: new Set(state.dislikedOutfits).delete(outfitId) ?\n                    new Set(state.dislikedOutfits) : state.dislikedOutfits,\n                feedbackHistory: [...state.feedbackHistory, feedbackItem],\n                pendingSync: [...state.pendingSync, feedbackItem]\n            }));\n        }\n        else {\n            set((state) => ({\n                dislikedOutfits: new Set(state.dislikedOutfits).add(outfitId),\n                likedOutfits: new Set(state.likedOutfits).delete(outfitId) ?\n                    new Set(state.likedOutfits) : state.likedOutfits,\n                feedbackHistory: [...state.feedbackHistory, feedbackItem],\n                pendingSync: [...state.pendingSync, feedbackItem]\n            }));\n        }\n    },\n    addMessageThumbsUp: (messageId) => {\n        const userId = getUserId();\n        const timestamp = new Date();\n        const feedbackItem = {\n            id: `message_thumbsUp_${messageId}_${timestamp.getTime()}`,\n            type: 'thumbsUp',\n            timestamp,\n            entityType: 'recommendation',\n            metadata: { messageId, userId }\n        };\n        set((state) => ({\n            thumbsUpMessages: new Set(state.thumbsUpMessages).add(messageId),\n            feedbackHistory: [...state.feedbackHistory, feedbackItem],\n            pendingSync: [...state.pendingSync, feedbackItem]\n        }));\n    },\n    removeItemFeedback: (itemId) => {\n        set((state) => ({\n            likedItems: new Set(state.likedItems).delete(itemId) ?\n                new Set(state.likedItems) : state.likedItems,\n            dislikedItems: new Set(state.dislikedItems).delete(itemId) ?\n                new Set(state.dislikedItems) : state.dislikedItems\n        }));\n    },\n    removeOutfitFeedback: (outfitId) => {\n        set((state) => ({\n            likedOutfits: new Set(state.likedOutfits).delete(outfitId) ?\n                new Set(state.likedOutfits) : state.likedOutfits,\n            dislikedOutfits: new Set(state.dislikedOutfits).delete(outfitId) ?\n                new Set(state.dislikedOutfits) : state.dislikedOutfits\n        }));\n    },\n    removeMessageThumbsUp: (messageId) => {\n        set((state) => ({\n            thumbsUpMessages: new Set(state.thumbsUpMessages).delete(messageId) ?\n                new Set(state.thumbsUpMessages) : state.thumbsUpMessages\n        }));\n    },\n    markAsSynced: (feedbackIds) => {\n        set((state) => ({\n            pendingSync: state.pendingSync.filter(item => !feedbackIds.includes(item.id)),\n            lastSyncedAt: new Date()\n        }));\n    },\n    setIsSyncing: (isSyncing) => {\n        set({ isSyncing });\n    },\n    getItemFeedbackStatus: (itemId) => {\n        const state = get();\n        return {\n            liked: state.likedItems.has(itemId),\n            disliked: state.dislikedItems.has(itemId)\n        };\n    },\n    getOutfitFeedbackStatus: (outfitId) => {\n        const state = get();\n        return {\n            liked: state.likedOutfits.has(outfitId),\n            disliked: state.dislikedOutfits.has(outfitId)\n        };\n    },\n    isMessageThumbedUp: (messageId) => {\n        return get().thumbsUpMessages.has(messageId);\n    },\n    getPendingSyncItems: () => {\n        return get().pendingSync;\n    },\n    clearSyncedItems: () => {\n        set({\n            pendingSync: [],\n            lastSyncedAt: new Date()\n        });\n    }\n}), {\n    name: 'stylist-feedback-storage',\n    // Custom serialization for Set objects (which aren't serializable by default)\n    partialize: (state) => ({\n        likedItems: setToArray(state.likedItems),\n        dislikedItems: setToArray(state.dislikedItems),\n        likedOutfits: setToArray(state.likedOutfits),\n        dislikedOutfits: setToArray(state.dislikedOutfits),\n        thumbsUpMessages: setToArray(state.thumbsUpMessages),\n        feedbackHistory: state.feedbackHistory,\n        pendingSync: state.pendingSync,\n        lastSyncedAt: state.lastSyncedAt\n    }),\n    // Custom deserialization to convert arrays back to Set objects\n    onRehydrateStorage: () => (state) => {\n        if (state) {\n            state.likedItems = arrayToSet(state.likedItems);\n            state.dislikedItems = arrayToSet(state.dislikedItems);\n            state.likedOutfits = arrayToSet(state.likedOutfits);\n            state.dislikedOutfits = arrayToSet(state.dislikedOutfits);\n            state.thumbsUpMessages = arrayToSet(state.thumbsUpMessages);\n        }\n    }\n}));\nexport default useFeedbackStore;\n","// Chat state management\nimport { create } from 'zustand';\nimport { v4 as uuidv4 } from 'uuid';\nimport { MessageType } from '../types/index';\nexport const useChatStore = create((set, get) => ({\n    messages: [],\n    isOpen: true,\n    isMinimized: false,\n    isLoading: false,\n    error: null,\n    currentView: 'chat',\n    addMessage: (message) => {\n        const id = uuidv4();\n        const timestamp = new Date();\n        const newMessage = Object.assign(Object.assign({}, message), { id, timestamp });\n        // Using type assertion to work around type compatibility issues\n        set((state) => ({\n            messages: [...state.messages, newMessage]\n        }));\n        return id;\n    },\n    addTextMessage: (text, sender) => {\n        const senderValue = typeof sender === 'string' ? sender : sender;\n        const message = {\n            type: MessageType.TEXT,\n            sender: senderValue,\n            text\n        };\n        return get().addMessage(message);\n    },\n    updateMessage: (id, updates) => {\n        // Using type assertion to work around type compatibility issues\n        set((state) => ({\n            messages: state.messages.map((msg) => msg.id === id ? Object.assign(Object.assign({}, msg), updates) : msg)\n        }));\n    },\n    removeMessage: (id) => {\n        set((state) => ({\n            messages: state.messages.filter((msg) => msg.id !== id)\n        }));\n    },\n    clearMessages: () => {\n        set({ messages: [] });\n    },\n    toggleOpen: () => {\n        const isCurrentlyOpen = get().isOpen;\n        set({\n            isOpen: !isCurrentlyOpen,\n            isMinimized: false\n        });\n    },\n    toggleMinimize: () => {\n        const isCurrentlyMinimized = get().isMinimized;\n        set({ isMinimized: !isCurrentlyMinimized });\n    },\n    setLoading: (isLoading) => {\n        set({ isLoading });\n    },\n    setError: (error) => {\n        set({ error });\n    },\n    setCurrentView: (view) => {\n        set({ currentView: view });\n    },\n    setIsOpen: (isOpen) => {\n        set({ isOpen });\n    }\n}));\n","// Utilities for positioning images on canvas\nimport { GarmentType, BodyPosition } from '@/types/tryOn';\n/**\n * Calculate the center point of a rectangle\n */\nexport const calculateCenter = (rect) => {\n    return {\n        x: rect.x + rect.width / 2,\n        y: rect.y + rect.height / 2\n    };\n};\n/**\n * Calculate the positioning rectangle for a garment based on body position\n */\nexport const calculateGarmentPosition = (containerDimensions, garmentDimensions, bodyPosition, offset = { x: 0, y: 0 }) => {\n    // Default positioning is centered\n    let x = (containerDimensions.width - garmentDimensions.width) / 2;\n    let y = (containerDimensions.height - garmentDimensions.height) / 2;\n    // Adjust based on body position\n    switch (bodyPosition) {\n        case BodyPosition.UPPER_BODY:\n            y = containerDimensions.height * 0.25 - garmentDimensions.height / 2;\n            break;\n        case BodyPosition.LOWER_BODY:\n            y = containerDimensions.height * 0.65 - garmentDimensions.height / 2;\n            break;\n        case BodyPosition.FEET:\n            y = containerDimensions.height - garmentDimensions.height;\n            break;\n        case BodyPosition.HEAD:\n            y = 0;\n            break;\n        case BodyPosition.NECK:\n            y = containerDimensions.height * 0.15 - garmentDimensions.height / 2;\n            break;\n        case BodyPosition.WAIST:\n            y = containerDimensions.height * 0.5 - garmentDimensions.height / 2;\n            break;\n        case BodyPosition.HANDS:\n            // This depends on whether it's left or right hand\n            // We'll use offset for this\n            break;\n        case BodyPosition.FULL_BODY:\n            // Already centered\n            break;\n    }\n    // Apply offset\n    x += offset.x;\n    y += offset.y;\n    return {\n        x,\n        y,\n        width: garmentDimensions.width,\n        height: garmentDimensions.height\n    };\n};\n/**\n * Get default body position for a garment type\n */\nexport const getDefaultBodyPosition = (garmentType) => {\n    switch (garmentType) {\n        case GarmentType.TOP:\n            return BodyPosition.UPPER_BODY;\n        case GarmentType.BOTTOM:\n            return BodyPosition.LOWER_BODY;\n        case GarmentType.DRESS:\n            return BodyPosition.FULL_BODY;\n        case GarmentType.OUTERWEAR:\n            return BodyPosition.UPPER_BODY;\n        case GarmentType.SHOES:\n            return BodyPosition.FEET;\n        case GarmentType.ACCESSORY:\n            return BodyPosition.HEAD; // Default, should be specified\n        default:\n            return BodyPosition.FULL_BODY;\n    }\n};\n/**\n * Get default z-index for garment type (for layering)\n */\nexport const getDefaultZIndex = (garmentType) => {\n    switch (garmentType) {\n        case GarmentType.TOP:\n            return 10;\n        case GarmentType.BOTTOM:\n            return 5;\n        case GarmentType.DRESS:\n            return 10;\n        case GarmentType.OUTERWEAR:\n            return 15;\n        case GarmentType.SHOES:\n            return 5;\n        case GarmentType.ACCESSORY:\n            return 20;\n        default:\n            return 10;\n    }\n};\n/**\n * Get recommended scale for garment type\n */\nexport const getRecommendedScale = (garmentType, containerDimensions) => {\n    // These are approximate values and should be adjusted based on actual garment images\n    switch (garmentType) {\n        case GarmentType.TOP:\n            return containerDimensions.width * 0.7 / 600; // Assuming 600px is the \"standard\" width\n        case GarmentType.BOTTOM:\n            return containerDimensions.width * 0.6 / 500;\n        case GarmentType.DRESS:\n            return containerDimensions.width * 0.8 / 500;\n        case GarmentType.OUTERWEAR:\n            return containerDimensions.width * 0.75 / 600;\n        case GarmentType.SHOES:\n            return containerDimensions.width * 0.4 / 400;\n        case GarmentType.ACCESSORY:\n            return containerDimensions.width * 0.3 / 300;\n        default:\n            return 1.0;\n    }\n};\n"],"names":["root","factory","exports","module","define","amd","self","DEFAULT_SETTINGS","preferredBackgroundRemovalMethod","TENSORFLOW","removeBackgroundAutomatically","showGuidelines","highQualityRendering","defaultGarmentScale","TOP","BOTTOM","DRESS","OUTERWEAR","SHOES","ACCESSORY","defaultGarmentOffset","x","y","useTryOnStore","set","get","currentOutfit","userImage","isLoading","error","settings","savedResults","canvasWidth","canvasHeight","isTryOnModalOpen","isUploadModalOpen","setCurrentOutfit","outfit","addGarmentToOutfit","garment","filteredGarments","garments","filter","g","type","bodyPosition","Object","assign","newOutfit","id","Date","now","createdAt","removeGarmentFromOutfit","garmentId","updatedGarments","updateGarment","updates","map","setUserImage","image","userImageForOutfit","updateUserImage","updatedImage","clearUserImage","updatedOutfit","undefined","updateOutfit","setSettings","setLoading","setError","saveResult","result","results","existingIndex","findIndex","r","push","deleteSavedResult","resultId","filteredResults","setCanvasDimensions","width","height","openTryOnModal","closeTryOnModal","openUploadModal","closeUploadModal","reset","startNewTryOn","productImage","productType","crypto","randomUUID","newGarment","url","URL","createObjectURL","zIndex","length","layerIndex","scale","offset","rotation","withoutBackground","tryOnOutfit","name","partialize","state","useRecommendationStore","recommendedItems","recommendedOutfits","savedOutfits","wishlistItems","cartItems","viewedItems","context","loading","setRecommendedItems","items","setRecommendedOutfits","outfits","setSavedOutfits","addRecommendedItem","item","addRecommendedOutfit","addToWishlist","some","wishlistItem","itemId","removeFromWishlist","addToCart","existingItemIndex","cartItem","updatedCartItems","quantity","removeFromCart","updateCartItemQuantity","addViewedItem","includes","saveOutfit","savedOutfit","outfitId","removeSavedOutfit","setContext","clearRecommendations","getItemsByCategory","category","getItemsSortedByMatchScore","sort","a","b","matchScore","getOutfitById","find","getItemById","updateItem","MessageType","MessageSender","window","STYLIST_CONFIG","config","__STYLIST_RUNTIME_CONFIG","FORCE_DEMO_MODE","forceDemoMode","USE_CLAUDE_DEMO","useClaudeDemo","USE_MOCK_RETAILER","useMockRetailer","ANTHROPIC_API_KEY","anthropicApiKey","init","__StylistWidgetConfig","getState","setCurrentView","success","message","Error","String","open","toggleOpen","close","isOpen","minimize","toggleMinimize","switchView","view","openStyleQuiz","__StylistShowStyleQuiz","__StylistWidgetEvents","emit","openVirtualTryOn","__StylistShowVirtualTryOn","widgetAPI","__debug","addMockItems","getDiagnostics","logs","flags","initialized","mounted","renderComplete","storesInitialized","backgroundInitComplete","clearDiagnostics","StylistWidget","GarmentType","BodyPosition","ProcessingStatus","BackgroundRemovalMethod","useUserStore","user","styleQuizResult","setUser","updateUser","currentUser","setStyleQuizResult","addToCloset","closet","removeFromCloset","toggleItemFavorite","favorite","addLikedItem","feedback","likedItems","dislikedItems","lastInteraction","addDislikedItem","removeLikedItem","removeDislikedItem","logout","isLocalStorageAvailable","test","localStorage","setItem","removeItem","_a","getUserId","userId","getItem","Math","random","toString","substring","setToArray","Array","from","arrayToSet","array","Set","useFeedbackStore","likedOutfits","dislikedOutfits","thumbsUpMessages","feedbackHistory","pendingSync","isSyncing","lastSyncedAt","addItemFeedback","timestamp","feedbackItem","getTime","entityType","metadata","add","delete","addOutfitFeedback","addMessageThumbsUp","messageId","removeItemFeedback","removeOutfitFeedback","removeMessageThumbsUp","markAsSynced","feedbackIds","setIsSyncing","getItemFeedbackStatus","liked","has","disliked","getOutfitFeedbackStatus","isMessageThumbedUp","getPendingSyncItems","clearSyncedItems","onRehydrateStorage","useChatStore","messages","isMinimized","currentView","addMessage","newMessage","addTextMessage","text","sender","senderValue","TEXT","updateMessage","msg","removeMessage","clearMessages","isCurrentlyOpen","isCurrentlyMinimized","setIsOpen","getDefaultBodyPosition","garmentType","UPPER_BODY","LOWER_BODY","FULL_BODY","FEET","HEAD","getDefaultZIndex"],"sourceRoot":""}