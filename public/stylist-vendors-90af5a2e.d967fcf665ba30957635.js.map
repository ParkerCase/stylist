{"version":3,"file":"stylist-vendors-90af5a2e.d967fcf665ba30957635.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Greater.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Imag.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsNaN.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FusedConv2D.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRN.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherV2_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Identity.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/LRNGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GatherNd.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IFFT.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FlipLeftRight.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsFinite.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/IsInf.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Fill.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Floor.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/GreaterEqual.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FFT.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FloorDiv.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/FusedDepthwiseConv2D.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, GatherV2, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { gatherV2Impl } from './GatherV2_impl';\nimport { reshape } from './Reshape';\nexport function gatherV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, indices } = inputs;\n    const { axis, batchDims } = attrs;\n    assertNotComplex([x, indices], 'gatherV2');\n    let $batchDims = batchDims;\n    if (batchDims == null) {\n        $batchDims = 0;\n    }\n    const indicesSize = util.sizeFromShape(indices.shape);\n    const parsedAxis = util.parseAxisParam(axis, x.shape)[0];\n    const shapeInfo = backend_util.segment_util.collectGatherOpShapeInfo(x, indices, parsedAxis, $batchDims);\n    const flattenX = reshape({\n        inputs: { x },\n        backend,\n        attrs: {\n            shape: [\n                shapeInfo.batchSize, shapeInfo.outerSize, shapeInfo.dimSize,\n                shapeInfo.sliceSize\n            ]\n        }\n    });\n    const flattenIndex = reshape({\n        inputs: { x: indices },\n        backend,\n        attrs: { shape: [shapeInfo.batchSize, indicesSize / shapeInfo.batchSize] }\n    });\n    const flattenOutputShape = [\n        shapeInfo.batchSize, shapeInfo.outerSize, indicesSize / shapeInfo.batchSize,\n        shapeInfo.sliceSize\n    ];\n    const indicesBuf = backend.bufferSync(flattenIndex);\n    const xBuf = backend.bufferSync(flattenX);\n    const outBuf = gatherV2Impl(xBuf, indicesBuf, flattenOutputShape);\n    backend.disposeIntermediateTensorInfo(flattenX);\n    backend.disposeIntermediateTensorInfo(flattenIndex);\n    return backend.makeTensorInfo(shapeInfo.outputShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherV2Config = {\n    kernelName: GatherV2,\n    backendName: 'cpu',\n    kernelFunc: gatherV2\n};\n//# sourceMappingURL=GatherV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Greater } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterImpl = createSimpleBinaryKernelImpl((a, b) => (a > b) ? 1 : 0);\nexport const greater = binaryKernelFunc(Greater, greaterImpl, null /* complexImpl */, 'bool');\nexport const greaterConfig = {\n    kernelName: Greater,\n    backendName: 'cpu',\n    kernelFunc: greater\n};\n//# sourceMappingURL=Greater.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Imag } from '@tensorflow/tfjs-core';\nexport function imag(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const imag = backend.data.get(input.dataId).complexTensorInfos.imag;\n    const imagVal = backend.data.get(imag.dataId).values;\n    // When complex tensor is disposed, its underlying parts will be disposed too.\n    // Make new tensor out of the imag value of the complex. This makes sure the\n    // value is still accessible even if complex tensor is disposed.\n    return backend.makeTensorInfo(imag.shape, imag.dtype, imagVal);\n}\nexport const imagConfig = {\n    kernelName: Imag,\n    backendName: 'cpu',\n    kernelFunc: imag\n};\n//# sourceMappingURL=Imag.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsNan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const isNaN = unaryKernelFunc(IsNan, (xi) => Number.isNaN(xi) ? 1 : 0, 'bool');\nexport const isNaNConfig = {\n    kernelName: IsNan,\n    backendName: 'cpu',\n    kernelFunc: isNaN,\n};\n//# sourceMappingURL=IsNaN.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { conv2D } from './Conv2D';\nexport function fusedConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    let result = conv2D({\n        inputs: { x, filter },\n        backend,\n        attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }\n    });\n    if (bias) {\n        const resultOld = result;\n        result = add({ inputs: { a: result, b: bias }, backend });\n        backend.disposeIntermediateTensorInfo(resultOld);\n    }\n    if (activation) {\n        const resultOld = result;\n        result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n        backend.disposeIntermediateTensorInfo(resultOld);\n    }\n    return result;\n}\nexport const fusedConv2DConfig = {\n    kernelName: FusedConv2D,\n    backendName: 'cpu',\n    kernelFunc: fusedConv2D\n};\n//# sourceMappingURL=FusedConv2D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRN, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRN(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    assertNotComplex(x, 'LRN');\n    const channels = x.shape[3];\n    const maxD = channels - 1;\n    const xValues = backend.data.get(x.dataId).values;\n    const size = util.sizeFromShape(x.shape);\n    const result = new Float32Array(size);\n    function sumAcrossChannels(offset) {\n        const currentChannel = offset % channels;\n        let beginSumOffset = offset - currentChannel + Math.max(0, currentChannel - depthRadius);\n        const endSumOffset = offset - currentChannel + Math.min(currentChannel + depthRadius, maxD);\n        let sum = 0.0;\n        for (; beginSumOffset <= endSumOffset; beginSumOffset++) {\n            const z = xValues[beginSumOffset];\n            sum += z * z;\n        }\n        return sum;\n    }\n    for (let offset = 0; offset < size; offset++) {\n        const sum = sumAcrossChannels(offset);\n        const val = xValues[offset] * Math.pow(bias + alpha * sum, -beta);\n        result[offset] = val;\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, result);\n}\nexport const lRNConfig = {\n    kernelName: LRN,\n    backendName: 'cpu',\n    kernelFunc: lRN\n};\n//# sourceMappingURL=LRN.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer } from '@tensorflow/tfjs-core';\nexport function gatherV2Impl(xBuf, indicesBuf, flattenOutputShape) {\n    const outBuf = buffer(flattenOutputShape, xBuf.dtype);\n    for (let i = 0; i < outBuf.size; ++i) {\n        const newLoc = outBuf.indexToLoc(i);\n        const originalLoc = newLoc.slice();\n        const batchIdx = originalLoc[0];\n        const indicesIdx = originalLoc[2];\n        const indicesIndex = indicesBuf.locToIndex([batchIdx, indicesIdx]);\n        originalLoc[2] = indicesBuf.values[indicesIndex];\n        const originalIndex = xBuf.locToIndex(originalLoc);\n        outBuf.values[i] = xBuf.values[originalIndex];\n    }\n    return outBuf;\n}\n//# sourceMappingURL=GatherV2_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Identity } from '@tensorflow/tfjs-core';\nexport function identity(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    backend.incRef(x.dataId);\n    return { dataId: x.dataId, shape: x.shape, dtype: x.dtype };\n}\nexport const identityConfig = {\n    kernelName: Identity,\n    backendName: 'cpu',\n    kernelFunc: identity\n};\n//# sourceMappingURL=Identity.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { LRNGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function lRNGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, y, dy } = inputs;\n    const { depthRadius, bias, alpha, beta } = attrs;\n    assertNotComplex(dy, 'LRNGrad');\n    const dySize = util.sizeFromShape(dy.shape);\n    const channels = dy.shape[3];\n    const dyValues = backend.data.get(dy.dataId).values;\n    const xValues = backend.data.get(x.dataId).values;\n    const yValues = backend.data.get(y.dataId).values;\n    const result = new Float32Array(dySize);\n    const size = dySize;\n    for (let offset = 0; offset < size; offset++) {\n        const currentChannel = offset % channels;\n        const depthBegin = (offset - currentChannel) + Math.max(0, currentChannel - depthRadius);\n        const depthEnd = (offset - currentChannel) +\n            Math.min(channels, currentChannel + depthRadius + 1);\n        let norm = 0;\n        for (let k = depthBegin; k < depthEnd; k++) {\n            norm += Math.pow(xValues[k], 2);\n        }\n        norm = alpha * norm + bias;\n        for (let k = depthBegin; k < depthEnd; k++) {\n            let dyi = -2 * alpha * beta * xValues[k] * yValues[offset] / norm;\n            if (offset === k) {\n                dyi += Math.pow(norm, -beta);\n            }\n            dyi *= dyValues[offset];\n            result[k] += dyi;\n        }\n    }\n    return backend.makeTensorInfo(dy.shape, x.dtype, result);\n}\nexport const lRNGradConfig = {\n    kernelName: LRNGrad,\n    backendName: 'cpu',\n    kernelFunc: lRNGrad\n};\n//# sourceMappingURL=LRNGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, GatherNd, util } from '@tensorflow/tfjs-core';\nexport function gatherNd(args) {\n    const { inputs, backend } = args;\n    const { params, indices } = inputs;\n    const paramsSize = util.sizeFromShape(params.shape);\n    const indicesShape = indices.shape;\n    const sliceRank = indicesShape[indicesShape.length - 1];\n    const [resultShape, numSlices, sliceSize, strides] = backend_util.prepareAndValidate(params, indices);\n    if (numSlices === 0) {\n        return backend.makeTensorInfo(resultShape, params.dtype, []);\n    }\n    const outBuf = buffer([numSlices, sliceSize], params.dtype);\n    const indicesData = backend.data.get(indices.dataId).values;\n    const paramsData = backend.data.get(params.dataId).values;\n    for (let i = 0; i < numSlices; i++) {\n        const index = [];\n        let flattenIndex = 0;\n        for (let j = 0; j < sliceRank; j++) {\n            const dim = indicesData[i * sliceRank + j];\n            flattenIndex += dim * strides[j];\n            index.push(dim);\n        }\n        if (flattenIndex < 0 || flattenIndex >= paramsSize / sliceSize) {\n            throw new Error(`Invalid indices: ${index} does not index into ${params.shape}`);\n        }\n        for (let k = 0; k < sliceSize; k++) {\n            outBuf.values[i * sliceSize + k] =\n                paramsData[flattenIndex * sliceSize + k];\n        }\n    }\n    return backend.makeTensorInfo(resultShape, outBuf.dtype, outBuf.values);\n}\nexport const gatherNdConfig = {\n    kernelName: GatherNd,\n    backendName: 'cpu',\n    kernelFunc: gatherNd\n};\n//# sourceMappingURL=GatherNd.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IFFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function ifft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputSize = util.sizeFromShape(input.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({\n        inputs: { x: input },\n        backend,\n        attrs: { shape: [batch, innerDimensionSize] }\n    });\n    const result = fftBatch(input2D, true, backend);\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: input.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const ifftConfig = {\n    kernelName: IFFT,\n    backendName: 'cpu',\n    kernelFunc: ifft\n};\n//# sourceMappingURL=IFFT.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FlipLeftRight, util } from '@tensorflow/tfjs-core';\nexport const flipLeftRightConfig = {\n    kernelName: FlipLeftRight,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, attrs, backend }) => {\n        const { image } = inputs;\n        const cpuBackend = backend;\n        const output = util.getTypedArrayFromDType(image.dtype, util.sizeFromShape(image.shape));\n        const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n        const imageVals = cpuBackend.data.get(image.dataId).values;\n        for (let batchIdx = 0; batchIdx < batch; batchIdx++) {\n            const batchOffset = batchIdx * imageWidth * imageHeight * numChannels;\n            for (let row = 0; row < imageHeight; row++) {\n                const rowOffset = row * (imageWidth * numChannels);\n                for (let col = 0; col < imageWidth; col++) {\n                    const colOffset = col * numChannels;\n                    for (let channel = 0; channel < numChannels; channel++) {\n                        const coords = [batch, row, col, channel];\n                        const x = coords[2];\n                        const coordX = Math.round(imageWidth - x);\n                        const outIdx = batchOffset + rowOffset + colOffset + channel;\n                        let outputValue = imageVals[outIdx];\n                        // If the coordinate position falls within the image boundaries...\n                        if (coordX >= 0 && coordX < imageWidth) {\n                            // set the output to the image value at the coordinate position.\n                            const rotatedColOffset = coordX * numChannels;\n                            const imageIdx = batchOffset + rowOffset + rotatedColOffset + channel;\n                            outputValue = imageVals[imageIdx];\n                        }\n                        output[outIdx] = outputValue;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(output, image.shape, image.dtype);\n        return { dataId, shape: image.shape, dtype: image.dtype };\n    }\n};\n//# sourceMappingURL=FlipLeftRight.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsFinite } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const isFinite = unaryKernelFunc(IsFinite, (xi) => Number.isFinite(xi) ? 1 : 0, 'bool');\nexport const isFiniteConfig = {\n    kernelName: IsFinite,\n    backendName: 'cpu',\n    kernelFunc: isFinite,\n};\n//# sourceMappingURL=IsFinite.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { IsInf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const isInf = unaryKernelFunc(IsInf, (xi) => Math.abs(xi) === Infinity ? 1 : 0, 'bool');\nexport const isInfConfig = {\n    kernelName: IsInf,\n    backendName: 'cpu',\n    kernelFunc: isInf,\n};\n//# sourceMappingURL=IsInf.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Fill, util } from '@tensorflow/tfjs-core';\nexport function fill(args) {\n    const { backend, attrs } = args;\n    const { shape, value, dtype } = attrs;\n    const $dtype = dtype || util.inferDtype(value);\n    const values = util.getArrayFromDType($dtype, util.sizeFromShape(shape));\n    fillValues(values, value, $dtype);\n    return backend.makeTensorInfo(shape, $dtype, values);\n}\nexport const fillConfig = {\n    kernelName: Fill,\n    backendName: 'cpu',\n    kernelFunc: fill\n};\nfunction fillValues(values, value, dtype) {\n    if (dtype === 'string') {\n        values.fill(value);\n    }\n    else {\n        values.fill(value);\n    }\n}\n//# sourceMappingURL=Fill.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Floor } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const floorImpl = createSimpleUnaryImpl((xi) => Math.floor(xi));\nexport const floor = unaryKernelFuncFromImpl(Floor, floorImpl);\nexport const floorConfig = {\n    kernelName: Floor,\n    backendName: 'cpu',\n    kernelFunc: floor,\n};\n//# sourceMappingURL=Floor.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { GreaterEqual } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const greaterEqualImpl = createSimpleBinaryKernelImpl((a, b) => (a >= b) ? 1 : 0);\nexport const greaterEqual = binaryKernelFunc(GreaterEqual, greaterEqualImpl, null /* complexImpl */, 'bool');\nexport const greaterEqualConfig = {\n    kernelName: GreaterEqual,\n    backendName: 'cpu',\n    kernelFunc: greaterEqual\n};\n//# sourceMappingURL=GreaterEqual.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FFT, util } from '@tensorflow/tfjs-core';\nimport { fftBatch } from '../utils/fft_utils';\nimport { reshape } from './Reshape';\nexport function fft(args) {\n    const { inputs, backend } = args;\n    const { input } = inputs;\n    const inputSize = util.sizeFromShape(input.shape);\n    // Collapse all outer dimensions to a single batch dimension.\n    const innerDimensionSize = input.shape[input.shape.length - 1];\n    const batch = inputSize / innerDimensionSize;\n    const input2D = reshape({\n        inputs: { x: input },\n        backend,\n        attrs: { shape: [batch, innerDimensionSize] }\n    });\n    const result = fftBatch(input2D, false, backend);\n    const resultReshaped = reshape({ inputs: { x: result }, backend, attrs: { shape: input.shape } });\n    backend.disposeIntermediateTensorInfo(input2D);\n    backend.disposeIntermediateTensorInfo(result);\n    return resultReshaped;\n}\nexport const fftConfig = {\n    kernelName: FFT,\n    backendName: 'cpu',\n    kernelFunc: fft\n};\n//# sourceMappingURL=FFT.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FloorDiv } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const floorDivImpl = createSimpleBinaryKernelImpl((a, b) => Math.floor(a / b));\nexport const floorDiv = binaryKernelFunc(FloorDiv, floorDivImpl, null /* complexImpl */, 'int32');\nexport const floorDivConfig = {\n    kernelName: FloorDiv,\n    backendName: 'cpu',\n    kernelFunc: floorDiv\n};\n//# sourceMappingURL=FloorDiv.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedDepthwiseConv2D } from '@tensorflow/tfjs-core';\nimport { applyActivation } from '../utils/fused_utils';\nimport { add } from './Add';\nimport { depthwiseConv2dNative } from './DepthwiseConv2dNative';\nexport function fusedDepthwiseConv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter, bias, preluActivationWeights } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode, activation, leakyreluAlpha } = attrs;\n    let result = depthwiseConv2dNative({\n        inputs: { x, filter },\n        backend,\n        attrs: { strides, pad, dataFormat, dilations, dimRoundingMode }\n    });\n    if (bias) {\n        const oldResult = result;\n        result = add({ inputs: { a: result, b: bias }, backend });\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    if (activation) {\n        const oldResult = result;\n        result = applyActivation(backend, result, activation, preluActivationWeights, leakyreluAlpha);\n        backend.disposeIntermediateTensorInfo(oldResult);\n    }\n    return result;\n}\nexport const fusedDepthwiseConv2DConfig = {\n    kernelName: FusedDepthwiseConv2D,\n    backendName: 'cpu',\n    kernelFunc: fusedDepthwiseConv2D\n};\n//# sourceMappingURL=FusedDepthwiseConv2D.js.map"],"names":["gatherV2Config","kernelName","GatherV2","backendName","kernelFunc","args","inputs","backend","attrs","x","indices","axis","batchDims","$batchDims","indicesSize","util","shape","parsedAxis","shapeInfo","backend_util","flattenX","batchSize","outerSize","dimSize","sliceSize","flattenIndex","flattenOutputShape","indicesBuf","bufferSync","xBuf","outBuf","disposeIntermediateTensorInfo","makeTensorInfo","outputShape","dtype","values","greaterImpl","a","b","greater","Greater","greaterConfig","imag","input","data","get","dataId","complexTensorInfos","imagVal","imagConfig","Imag","isNaN","IsNan","xi","Number","isNaNConfig","fusedConv2DConfig","FusedConv2D","filter","bias","preluActivationWeights","strides","pad","dataFormat","dilations","dimRoundingMode","activation","leakyreluAlpha","result","resultOld","lRNConfig","LRN","depthRadius","alpha","beta","channels","maxD","xValues","size","Float32Array","sumAcrossChannels","offset","currentChannel","beginSumOffset","Math","max","endSumOffset","min","sum","z","val","pow","gatherV2Impl","buffer","i","originalLoc","indexToLoc","slice","batchIdx","indicesIdx","indicesIndex","locToIndex","originalIndex","identity","incRef","identityConfig","Identity","lRNGradConfig","LRNGrad","y","dy","dySize","dyValues","yValues","depthBegin","depthEnd","norm","k","dyi","gatherNdConfig","GatherNd","params","paramsSize","indicesShape","sliceRank","length","resultShape","numSlices","indicesData","paramsData","index","j","dim","push","Error","ifftConfig","IFFT","inputSize","innerDimensionSize","batch","input2D","f","resultReshaped","flipLeftRightConfig","FlipLeftRight","image","cpuBackend","output","imageHeight","imageWidth","numChannels","imageVals","batchOffset","row","rowOffset","col","colOffset","channel","coordX","round","outIdx","outputValue","write","isFinite","IsFinite","isFiniteConfig","isInf","IsInf","abs","Infinity","isInfConfig","fill","value","$dtype","fillValues","fillConfig","Fill","floorImpl","floor","Floor","floorConfig","greaterEqualImpl","greaterEqual","GreaterEqual","greaterEqualConfig","fftConfig","FFT","floorDivImpl","floorDiv","FloorDiv","floorDivConfig","fusedDepthwiseConv2DConfig","FusedDepthwiseConv2D","oldResult"],"sourceRoot":""}