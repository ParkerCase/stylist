{"version":3,"file":"stylist-2931.0df909cdfe59f86b12b4.js","mappings":"kLACA,IAAIA,EAAwC,SAAUC,EAASC,EAAYC,EAAGC,GAE1E,OAAO,IAAKD,IAAMA,EAAIE,WAAU,SAAUC,EAASC,GAC/C,SAASC,EAAUC,GAAS,IAAMC,EAAKN,EAAUO,KAAKF,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC1F,SAASC,EAASJ,GAAS,IAAMC,EAAKN,EAAiB,MAAEK,GAAS,CAAE,MAAOG,GAAKL,EAAOK,EAAI,CAAE,CAC7F,SAASF,EAAKI,GAJlB,IAAeL,EAIaK,EAAOC,KAAOT,EAAQQ,EAAOL,QAJ1CA,EAIyDK,EAAOL,MAJhDA,aAAiBN,EAAIM,EAAQ,IAAIN,GAAE,SAAUG,GAAWA,EAAQG,EAAQ,KAIjBO,KAAKR,EAAWK,EAAW,CAC7GH,GAAMN,EAAYA,EAAUa,MAAMhB,EAASC,GAAc,KAAKS,OAClE,GACJ,EAEA,MAAMO,EAAc,4BACPC,EAA0B,CAEnC,aAAAC,CAAcC,GACV,OAAOrB,EAAUsB,UAAM,OAAQ,GAAQ,YACnC,IAEI,MAAMC,QAAgBD,KAAKE,kBAAkBH,GAG7C,OADAC,KAAKG,2BAA2BJ,GACzBE,CACX,CACA,MAAOG,GAIH,OADAJ,KAAKG,2BAA2BJ,IACzB,CACX,CACJ,GACJ,EAEA,iBAAAG,CAAkBH,GACd,OAAOrB,EAAUsB,UAAM,OAAQ,GAAQ,YACnC,IACI,MAAMK,QAAiBC,MAAM,qBAAsB,CAC/CC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUZ,KAEzB,IAAKM,EAASO,GACV,MAAM,IAAIC,MAAM,cAAcR,EAASS,UAE3C,OAAO,CACX,CACA,MAAOV,GAEH,OAAO,CACX,CACJ,GACJ,EAEA,0BAAAD,CAA2BJ,GACvB,IAEI,MAAMgB,EAAef,KAAKgB,+BAE1BD,EAAaE,KAAKlB,GAElBmB,aAAaC,QAAQvB,EAAac,KAAKC,UAAUI,GACrD,CACA,MAAOX,GAEP,CACJ,EAEA,4BAAAY,GACI,IACI,MAAMjB,EAAOmB,aAAaE,QAAQxB,GAClC,OAAOG,EAAOW,KAAKW,MAAMtB,GAAQ,EACrC,CACA,MAAOK,GAEH,MAAO,EACX,CACJ,EAEA,8BAAAkB,GACI,IACIJ,aAAaK,WAAW3B,EAC5B,CACA,MAAOQ,GAEP,CACJ,GAEJ,W","sources":["webpack://StylistWidget/./src/services/purchaseTrackingService.ts"],"sourcesContent":["// Purchase tracking service for the stylist widget\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n// Track purchases in localStorage\nconst STORAGE_KEY = 'stylist_purchase_tracking';\nexport const purchaseTrackingService = {\n    // Track a new purchase\n    trackPurchase(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                // Save to API\n                const success = yield this.savePurchaseToAPI(data);\n                // Always save to localStorage as backup\n                this.savePurchaseToLocalStorage(data);\n                return success;\n            }\n            catch (error) {\n                console.error('Error tracking purchase:', error);\n                // Save to localStorage on API failure\n                this.savePurchaseToLocalStorage(data);\n                return false;\n            }\n        });\n    },\n    // Save purchase tracking data to the API\n    savePurchaseToAPI(data) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const response = yield fetch('/api/trackPurchase', {\n                    method: 'POST',\n                    headers: {\n                        'Content-Type': 'application/json'\n                    },\n                    body: JSON.stringify(data)\n                });\n                if (!response.ok) {\n                    throw new Error(`API error: ${response.status}`);\n                }\n                return true;\n            }\n            catch (error) {\n                console.error('Failed to save purchase to API:', error);\n                return false;\n            }\n        });\n    },\n    // Save purchase tracking data to localStorage\n    savePurchaseToLocalStorage(data) {\n        try {\n            // Get existing data\n            const existingData = this.getPurchasesFromLocalStorage();\n            // Add new purchase tracking\n            existingData.push(data);\n            // Save back to localStorage\n            localStorage.setItem(STORAGE_KEY, JSON.stringify(existingData));\n        }\n        catch (error) {\n            console.error('Failed to save purchase to localStorage:', error);\n        }\n    },\n    // Get all tracked purchases from localStorage\n    getPurchasesFromLocalStorage() {\n        try {\n            const data = localStorage.getItem(STORAGE_KEY);\n            return data ? JSON.parse(data) : [];\n        }\n        catch (error) {\n            console.error('Failed to get purchases from localStorage:', error);\n            return [];\n        }\n    },\n    // Clear all purchase tracking data from localStorage\n    clearPurchasesFromLocalStorage() {\n        try {\n            localStorage.removeItem(STORAGE_KEY);\n        }\n        catch (error) {\n            console.error('Failed to clear purchases from localStorage:', error);\n        }\n    }\n};\nexport default purchaseTrackingService;\n"],"names":["__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","STORAGE_KEY","purchaseTrackingService","trackPurchase","data","this","success","savePurchaseToAPI","savePurchaseToLocalStorage","error","response","fetch","method","headers","body","JSON","stringify","ok","Error","status","existingData","getPurchasesFromLocalStorage","push","localStorage","setItem","getItem","parse","clearPurchasesFromLocalStorage","removeItem"],"sourceRoot":""}