{"version":3,"file":"stylist-vendors-2987836d.2750bac28c1e0b4571a2.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/activations.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n// Layer activation functions\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { serialization, tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { deserializeKerasObject } from './utils/generic_utils';\n/**\n * Base class for Activations.\n *\n * Special note: due to cross-language compatibility reasons, the\n * static readonly className field in this family of classes must be set to\n * the initialLowerCamelCase name of the activation.\n */\nexport class Activation extends serialization.Serializable {\n    getConfig() {\n        return {};\n    }\n}\n/**\n * Exponential linear unit (ELU).\n * Reference: https://arxiv.org/abs/1511.07289\n */\nclass Elu extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x: Input.\n     * @param alpha: Scaling factor the negative section.\n     * @return Output of the ELU activation.\n     */\n    apply(x, alpha = 1) {\n        return K.elu(x, alpha);\n    }\n}\n/** @nocollapse */\nElu.className = 'elu';\nexport { Elu };\nserialization.registerClass(Elu);\n/**\n * Scaled Exponential Linear Unit. (Klambauer et al., 2017).\n * Reference: Self-Normalizing Neural Networks, https://arxiv.org/abs/1706.02515\n * Notes:\n *   - To be used together with the initialization \"lecunNormal\".\n *   - To be used together with the dropout variant \"AlphaDropout\".\n */\nclass Selu extends Activation {\n    apply(x) {\n        return tfc.selu(x);\n    }\n}\n/** @nocollapse */\nSelu.className = 'selu';\nexport { Selu };\nserialization.registerClass(Selu);\n/**\n *  Rectified linear unit\n */\nclass Relu extends Activation {\n    apply(x) {\n        return tfc.relu(x);\n    }\n}\n/** @nocollapse */\nRelu.className = 'relu';\nexport { Relu };\nserialization.registerClass(Relu);\n/**\n * Rectified linear unit activation maxing out at 6.0.\n */\nclass Relu6 extends Activation {\n    apply(x) {\n        return tidy(() => tfc.minimum(6.0, tfc.relu(x)));\n    }\n}\n/** @nocollapse */\nRelu6.className = 'relu6';\nexport { Relu6 };\nserialization.registerClass(Relu6);\n//* Linear activation (no-op) */\nclass Linear extends Activation {\n    apply(x) {\n        return x;\n    }\n}\n/** @nocollapse */\nLinear.className = 'linear';\nexport { Linear };\nserialization.registerClass(Linear);\n/**\n * Sigmoid activation function.\n */\nclass Sigmoid extends Activation {\n    apply(x) {\n        return tfc.sigmoid(x);\n    }\n}\n/** @nocollapse */\nSigmoid.className = 'sigmoid';\nexport { Sigmoid };\nserialization.registerClass(Sigmoid);\n/**\n * Segment-wise linear approximation of sigmoid.\n */\nclass HardSigmoid extends Activation {\n    apply(x) {\n        return K.hardSigmoid(x);\n    }\n}\n/** @nocollapse */\nHardSigmoid.className = 'hardSigmoid';\nexport { HardSigmoid };\nserialization.registerClass(HardSigmoid);\n/**\n * Softplus activation function.\n */\nclass Softplus extends Activation {\n    apply(x) {\n        return tfc.softplus(x);\n    }\n}\n/** @nocollapse */\nSoftplus.className = 'softplus';\nexport { Softplus };\nserialization.registerClass(Softplus);\n/**\n * Softsign activation function.\n */\nclass Softsign extends Activation {\n    apply(x) {\n        return K.softsign(x);\n    }\n}\n/** @nocollapse */\nSoftsign.className = 'softsign';\nexport { Softsign };\nserialization.registerClass(Softsign);\n/**\n * Hyperbolic tangent function.\n */\nclass Tanh extends Activation {\n    apply(x) {\n        return tfc.tanh(x);\n    }\n}\n/** @nocollapse */\nTanh.className = 'tanh';\nexport { Tanh };\nserialization.registerClass(Tanh);\n/**\n * Softmax activation function\n */\nclass Softmax extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    apply(x, axis = (-1)) {\n        return tfc.softmax(x, axis);\n    }\n}\n/** @nocollapse */\nSoftmax.className = 'softmax';\nexport { Softmax };\nserialization.registerClass(Softmax);\n/**\n * Log softmax activation function\n */\nclass LogSoftmax extends Activation {\n    /**\n     * Calculate the activation function of log softmax:\n     * log( exp(x_i) / sum(exp(x)) )\n     *\n     * @param x Tensor.\n     * @param axis Integer, axis along which the softmax normalization is applied.\n     * Invalid if < 2, as softmax across 1 (the batch dimension) is assumed to be\n     * an error.\n     *\n     * @returns a Tensor of the same shape as x\n     *\n     * @throws ValueError: In case `dim(x) < 2`.\n     */\n    apply(x, axis = (-1)) {\n        return tfc.logSoftmax(x, axis);\n    }\n}\n/** @nocollapse */\nLogSoftmax.className = 'logSoftmax';\nexport { LogSoftmax };\nserialization.registerClass(LogSoftmax);\n/**\n * Gelu activation function\n */\nclass Gelu extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @returns a Tensor of the same shape as x\n     */\n    apply(x) {\n        return tidy(() => {\n            return tfc.tidy(() => {\n                const sqrtTwo = Math.sqrt(2);\n                // Compute Φ(x) using the erf function\n                const cdf = tfc.mul(0.5, tfc.add(1, tfc.erf(tfc.div(x, sqrtTwo))));\n                // Compute GELU(x) = x * Φ(x)\n                return tfc.mul(x, cdf);\n            });\n        });\n    }\n}\n/** @nocollapse */\nGelu.className = 'gelu';\nexport { Gelu };\nserialization.registerClass(Gelu);\n/**\n * GeluNew activation function\n */\nclass GeluNew extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @returns a Tensor of the same shape as x\n     */\n    apply(x) {\n        return tidy(() => {\n            return tfc.mul(0.5, tfc.mul(x, tfc.add(1, tfc.tanh(tfc.mul(tfc.sqrt(tfc.div(2, Math.PI)), tfc.add(x, tfc.mul(0.044715, tfc.pow(x, 3))))))));\n        });\n    }\n}\n/** @nocollapse */\nGeluNew.className = 'gelu_new';\nexport { GeluNew };\nserialization.registerClass(GeluNew);\n/**\n * Mish activation function\n */\nclass Mish extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @returns a Tensor of the same shape as x\n     */\n    apply(x) {\n        return tidy(() => tfc.mul(x, tfc.tanh(tfc.softplus(x))));\n    }\n}\n/** @nocollapse */\nMish.className = 'mish';\nexport { Mish };\nserialization.registerClass(Mish);\n/**\n * Swish activation function\n */\nclass Swish extends Activation {\n    /**\n     * Calculate the activation function.\n     *\n     * @param x Tensor.\n     * @param alpha Scaling factor for the sigmoid function.\n     * @returns a Tensor of the same shape as x\n     */\n    apply(x, alpha = 1) {\n        return tidy(() => tfc.mul(tfc.sigmoid(tfc.mul(x, alpha)), x));\n    }\n}\n/** @nocollapse */\nSwish.className = 'swish';\nexport { Swish };\nserialization.registerClass(Swish);\nexport function serializeActivation(activation) {\n    return activation.getClassName();\n}\nexport function deserializeActivation(config, customObjects = {}) {\n    return deserializeKerasObject(config, serialization.SerializationMap.getMap().classNameMap, customObjects, 'activation');\n}\nexport function getActivation(identifier) {\n    if (identifier == null) {\n        const config = {};\n        config['className'] = 'linear';\n        config['config'] = {};\n        return deserializeActivation(config);\n    }\n    if (typeof identifier === 'string') {\n        const config = {};\n        config['className'] = identifier;\n        config['config'] = {};\n        return deserializeActivation(config);\n    }\n    else if (identifier instanceof Activation) {\n        return identifier;\n    }\n    else {\n        return deserializeActivation(identifier);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["Activation","serialization","getConfig","Elu","apply","x","alpha","className","Selu","Relu","Relu6","tidy","Linear","Sigmoid","HardSigmoid","Softplus","Softsign","Tanh","Softmax","axis","LogSoftmax","Gelu","sqrtTwo","Math","sqrt","cdf","GeluNew","PI","Mish","Swish","serializeActivation","activation","getClassName","deserializeActivation","config","customObjects","getMap","classNameMap","getActivation","identifier"],"sourceRoot":""}