{"version":3,"file":"stylist-vendors-a9027ccd.3d0c7c35526478e9638f.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_list.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_array.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-converter/dist/executor/tensor_utils.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-converter/dist/executor/resource_manager.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-converter/dist/executor/model_analysis.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize, inferElementShape, mergeElementShape } from './tensor_utils';\n/**\n * TensorList stores a container of `tf.Tensor` objects, which are accessible\n * via tensors field.\n *\n * In order to get a copy of the underlying list, use the copy method:\n * ```\n *    TensorList b = a.copy();\n *    b.tensors().pushBack(t);  // This does not modify a.tensors().\n * ```\n *\n * Note that this is not a deep copy: the memory locations of the underlying\n * tensors will still point to the same locations of the corresponding tensors\n * in the original.\n */\nexport class TensorList {\n    get id() {\n        return this.idTensor.id;\n    }\n    /**\n     *\n     * @param tensors list of tensors\n     * @param elementShape shape of each tensor, this can be a single number (any\n     * shape is allowed) or partial shape (dim = -1).\n     * @param elementDtype data type of each tensor\n     * @param maxNumElements The maximum allowed size of `tensors`. Defaults to -1\n     *   meaning that the size of `tensors` is unbounded.\n     */\n    constructor(tensors, elementShape, elementDtype, maxNumElements = -1) {\n        this.tensors = tensors;\n        this.elementShape = elementShape;\n        this.elementDtype = elementDtype;\n        if (tensors != null) {\n            tensors.forEach(tensor => {\n                if (elementDtype !== tensor.dtype) {\n                    throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${tensor.dtype}`);\n                }\n                assertShapesMatchAllowUndefinedSize(elementShape, tensor.shape, 'TensorList shape mismatch: ');\n                keep(tensor);\n            });\n        }\n        this.idTensor = scalar(0);\n        this.maxNumElements = maxNumElements;\n        keep(this.idTensor);\n    }\n    /**\n     * Get a new TensorList containing a copy of the underlying tensor container.\n     */\n    copy() {\n        return new TensorList([...this.tensors], this.elementShape, this.elementDtype);\n    }\n    /**\n     * Dispose the tensors and idTensor and clear the tensor list.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.id)) {\n                tensor.dispose();\n            }\n        });\n        this.tensors.length = 0;\n        this.idTensor.dispose();\n    }\n    /**\n     * The size of the tensors in the tensor list.\n     */\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Return a tensor that stacks a list of rank-R tf.Tensors into one rank-(R+1)\n     * tf.Tensor.\n     * @param elementShape shape of each tensor\n     * @param elementDtype data type of each tensor\n     * @param numElements the number of elements to stack\n     */\n    stack(elementShape, elementDtype, numElements = -1) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (numElements !== -1 && this.tensors.length !== numElements) {\n            throw new Error(`Operation expected a list with ${numElements} elements but got a list with ${this.tensors.length} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(elementShape, this.elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return tidy(() => {\n            const reshapedTensors = this.tensors.map(tensor => reshape(tensor, outputElementShape));\n            return stack(reshapedTensors, 0);\n        });\n    }\n    /**\n     * Pop a tensor from the end of the list.\n     * @param elementShape shape of the tensor\n     * @param elementDtype data type of the tensor\n     */\n    popBack(elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (this.size() === 0) {\n            throw new Error('Trying to pop from an empty list.');\n        }\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        const tensor = this.tensors.pop();\n        tensor.kept = false;\n        assertShapesMatchAllowUndefinedSize(tensor.shape, elementShape, 'TensorList shape mismatch: ');\n        return reshape(tensor, outputElementShape);\n    }\n    /**\n     * Push a tensor to the end of the list.\n     * @param tensor Tensor to be pushed.\n     */\n    pushBack(tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(tensor.shape, this.elementShape, 'TensorList shape mismatch: ');\n        if (this.maxNumElements === this.size()) {\n            throw new Error(`Trying to push element into a full list.`);\n        }\n        keep(tensor);\n        this.tensors.push(tensor);\n    }\n    /**\n     * Update the size of the list.\n     * @param size the new size of the list.\n     */\n    resize(size) {\n        if (size < 0) {\n            throw new Error(`TensorListResize expects size to be non-negative. Got: ${size}`);\n        }\n        if (this.maxNumElements !== -1 && size > this.maxNumElements) {\n            throw new Error(`TensorListResize input size ${size} is greater maxNumElement ${this.maxNumElements}.`);\n        }\n        const destTensorList = new TensorList([], this.elementShape, this.elementDtype, this.maxNumElements);\n        destTensorList.tensors.length = size;\n        for (let i = 0; i < Math.min(this.tensors.length, size); ++i) {\n            destTensorList.tensors[i] = this.tensors[i];\n        }\n        return destTensorList;\n    }\n    /**\n     * Retrieve the element at the provided index\n     * @param elementShape shape of the tensor\n     * @param elementDtype dtype of the tensor\n     * @param elementIndex index of the tensor\n     */\n    getItem(elementIndex, elementShape, elementDtype) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 || elementIndex > this.tensors.length) {\n            throw new Error(`Trying to access element ${elementIndex} in a list with ${this.tensors.length} elements.`);\n        }\n        if (this.tensors[elementIndex] == null) {\n            throw new Error(`element at index ${elementIndex} is null.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.tensors[elementIndex].shape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        return reshape(this.tensors[elementIndex], outputElementShape);\n    }\n    /**\n     * Set the tensor at the index\n     * @param elementIndex index of the tensor\n     * @param tensor the tensor to be inserted into the list\n     */\n    setItem(elementIndex, tensor) {\n        if (tensor.dtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${this.elementDtype}`);\n        }\n        if (elementIndex < 0 ||\n            this.maxNumElements !== -1 && elementIndex >= this.maxNumElements) {\n            throw new Error(`Trying to set element ${elementIndex} in a list with max ${this.maxNumElements} elements.`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, 'TensorList shape mismatch: ');\n        keep(tensor);\n        // dispose the previous value if it is replacing.\n        if (this.tensors[elementIndex] != null) {\n            this.tensors[elementIndex].kept = false;\n        }\n        this.tensors[elementIndex] = tensor;\n    }\n    /**\n     * Return selected values in the TensorList as a stacked Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param indices indices of tensors to gather\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    gather(indices, elementDtype, elementShape) {\n        if (elementDtype !== this.elementDtype) {\n            throw new Error(`Invalid data types; op elements ${elementDtype}, but list elements ${this.elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        // When indices is greater than the size of the list, indices beyond the\n        // size of the list are ignored.\n        indices = indices.slice(0, this.size());\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (indices.length === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = indices.map(i => reshape(this.tensors[i], outputElementShape));\n            return stack(tensors, 0);\n        });\n    }\n    /**\n     * Return the values in the TensorList as a concatenated Tensor.\n     * @param elementDtype output tensor dtype\n     * @param elementShape output tensor element shape\n     */\n    concat(elementDtype, elementShape) {\n        if (!!elementDtype && elementDtype !== this.elementDtype) {\n            throw new Error(`TensorList dtype is ${this.elementDtype} but concat requested dtype ${elementDtype}`);\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, elementShape, 'TensorList shape mismatch: ');\n        const outputElementShape = inferElementShape(this.elementShape, this.tensors, elementShape);\n        if (this.size() === 0) {\n            return tensor([], [0].concat(outputElementShape));\n        }\n        return tidy(() => {\n            const tensors = this.tensors.map(t => reshape(t, outputElementShape));\n            return concat(tensors, 0);\n        });\n    }\n}\n/**\n * Creates a TensorList which, when stacked, has the value of tensor.\n * @param tensor from tensor\n * @param elementShape output tensor element shape\n */\nexport function fromTensor(tensor, elementShape, elementDtype) {\n    const dtype = tensor.dtype;\n    if (tensor.shape.length < 1) {\n        throw new Error(`Tensor must be at least a vector, but saw shape: ${tensor.shape}`);\n    }\n    if (tensor.dtype !== elementDtype) {\n        throw new Error(`Invalid data types; op elements ${tensor.dtype}, but list elements ${elementDtype}`);\n    }\n    const tensorElementShape = tensor.shape.slice(1);\n    assertShapesMatchAllowUndefinedSize(tensorElementShape, elementShape, 'TensorList shape mismatch: ');\n    const tensorList = unstack(tensor);\n    return new TensorList(tensorList, elementShape, dtype);\n}\n/**\n * Return a TensorList of the given size with empty elements.\n * @param elementShape the shape of the future elements of the list\n * @param elementDtype the desired type of elements in the list\n * @param numElements the number of elements to reserve\n * @param maxNumElements the maximum number of elements in th list\n */\nexport function reserve(elementShape, elementDtype, numElements, maxNumElements) {\n    return new TensorList([], elementShape, elementDtype, maxNumElements);\n}\n/**\n * Put tensors at specific indices of a stacked tensor into a TensorList.\n * @param indices list of indices on how to scatter the tensor.\n * @param tensor input tensor.\n * @param elementShape the shape of the future elements of the list\n * @param numElements the number of elements to scatter\n */\nexport function scatter(tensor, indices, elementShape, numElements) {\n    if (indices.length !== tensor.shape[0]) {\n        throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n    }\n    const maxIndex = Math.max(...indices);\n    if (numElements != null && numElements !== -1 && maxIndex >= numElements) {\n        throw new Error(`Max index must be < array size (${maxIndex}  vs. ${numElements})`);\n    }\n    const list = new TensorList([], elementShape, tensor.dtype, numElements);\n    const tensors = unstack(tensor, 0);\n    indices.forEach((value, index) => {\n        list.setItem(value, tensors[index]);\n    });\n    return list;\n}\n/**\n * Split the values of a Tensor into a TensorList.\n * @param length the lengths to use when splitting value along\n *    its first dimension.\n * @param tensor the tensor to split.\n * @param elementShape the shape of the future elements of the list\n */\nexport function split(tensor, length, elementShape) {\n    let totalLength = 0;\n    const cumulativeLengths = length.map(len => {\n        totalLength += len;\n        return totalLength;\n    });\n    if (totalLength !== tensor.shape[0]) {\n        throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n    }\n    const shapeWithoutFirstDim = tensor.shape.slice(1);\n    const outputElementShape = mergeElementShape(shapeWithoutFirstDim, elementShape);\n    const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n    const tensors = tidy(() => {\n        const tensors = [];\n        tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n        for (let i = 0; i < length.length; ++i) {\n            const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n            const indices = [0, previousLength, 0];\n            const sizes = [1, length[i], elementPerRow];\n            tensors[i] = reshape(slice(tensor, indices, sizes), outputElementShape);\n        }\n        tensor.dispose();\n        return tensors;\n    });\n    const list = new TensorList([], elementShape, tensor.dtype, length.length);\n    for (let i = 0; i < tensors.length; i++) {\n        list.setItem(i, tensors[i]);\n    }\n    return list;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { concat, keep, reshape, scalar, slice, stack, tensor, tidy, unstack } from '@tensorflow/tfjs-core';\nimport { assertShapesMatchAllowUndefinedSize } from './tensor_utils';\n/**\n * The TensorArray object keeps an array of Tensors.  It\n * allows reading from the array and writing to the array.\n */\nexport class TensorArray {\n    constructor(name, dtype, maxSize, elementShape, identicalElementShapes, dynamicSize, clearAfterRead) {\n        this.name = name;\n        this.dtype = dtype;\n        this.maxSize = maxSize;\n        this.elementShape = elementShape;\n        this.identicalElementShapes = identicalElementShapes;\n        this.dynamicSize = dynamicSize;\n        this.clearAfterRead = clearAfterRead;\n        this.tensors = [];\n        this.closed_ = false;\n        this.idTensor = scalar(0);\n        keep(this.idTensor);\n    }\n    get id() {\n        return this.idTensor.id;\n    }\n    get closed() {\n        return this.closed_;\n    }\n    /**\n     * Dispose the tensors and idTensor and mark the TensoryArray as closed.\n     */\n    clearAndClose(keepIds) {\n        this.tensors.forEach(tensor => {\n            if (keepIds == null || !keepIds.has(tensor.tensor.id)) {\n                tensor.tensor.dispose();\n            }\n        });\n        this.tensors = [];\n        this.closed_ = true;\n        this.idTensor.dispose();\n    }\n    size() {\n        return this.tensors.length;\n    }\n    /**\n     * Read the value at location index in the TensorArray.\n     * @param index Number the index to read from.\n     */\n    read(index) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || index >= this.size()) {\n            throw new Error(`Tried to read from index ${index}, but array size is: ${this.size()}`);\n        }\n        const tensorWithState = this.tensors[index];\n        if (tensorWithState.cleared) {\n            throw new Error(`TensorArray ${this.name}: Could not read index ${index} twice because it was cleared after a previous read ` +\n                `(perhaps try setting clear_after_read = false?).`);\n        }\n        if (this.clearAfterRead) {\n            tensorWithState.cleared = true;\n        }\n        tensorWithState.read = true;\n        return tensorWithState.tensor;\n    }\n    /**\n     * Helper method to read multiple tensors from the specified indices.\n     */\n    readMany(indices) {\n        return indices.map(index => this.read(index));\n    }\n    /**\n     * Write value into the index of the TensorArray.\n     * @param index number the index to write to.\n     * @param tensor\n     */\n    write(index, tensor) {\n        if (this.closed_) {\n            throw new Error(`TensorArray ${this.name} has already been closed.`);\n        }\n        if (index < 0 || !this.dynamicSize && index >= this.maxSize) {\n            throw new Error(`Tried to write to index ${index}, but array is not resizeable and size is: ${this.maxSize}`);\n        }\n        const t = this.tensors[index] || {};\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index},\n          because the value dtype is ${tensor.dtype}, but TensorArray dtype is ${this.dtype}.`);\n        }\n        // Set the shape for the first time write to unknow shape tensor array\n        if (this.size() === 0 &&\n            (this.elementShape == null || this.elementShape.length === 0)) {\n            this.elementShape = tensor.shape;\n        }\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensor.shape, `TensorArray ${this.name}: Could not write to TensorArray index ${index}.`);\n        if (t.read) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been read.`);\n        }\n        if (t.written) {\n            throw new Error(`TensorArray ${this.name}: Could not write to TensorArray index ${index}, because it has already been written.`);\n        }\n        t.tensor = tensor;\n        keep(tensor);\n        t.written = true;\n        this.tensors[index] = t;\n    }\n    /**\n     * Helper method to write multiple tensors to the specified indices.\n     */\n    writeMany(indices, tensors) {\n        if (indices.length !== tensors.length) {\n            throw new Error(`TensorArray ${this.name}: could not write multiple tensors,` +\n                `because the index size: ${indices.length} is not the same as tensors size: ${tensors.length}.`);\n        }\n        indices.forEach((i, index) => this.write(i, tensors[index]));\n    }\n    /**\n     * Return selected values in the TensorArray as a packed Tensor. All of\n     * selected values must have been written and their shapes must all match.\n     * @param [indices] number[] Optional. Taking values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size(). If not specified returns\n     *    all tensors in the original order.\n     * @param [dtype]\n     */\n    gather(indices, dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but gather requested dtype ${dtype}`);\n        }\n        if (!indices) {\n            indices = [];\n            for (let i = 0; i < this.size(); i++) {\n                indices.push(i);\n            }\n        }\n        else {\n            indices = indices.slice(0, this.size());\n        }\n        if (indices.length === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        // Read all the PersistentTensors into a vector to keep track of\n        // their memory.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, 'TensorArray shape mismatch: ');\n        return stack(tensors, 0);\n    }\n    /**\n     * Return the values in the TensorArray as a concatenated Tensor.\n     */\n    concat(dtype) {\n        if (!!dtype && dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but concat requested dtype ${dtype}`);\n        }\n        if (this.size() === 0) {\n            return tensor([], [0].concat(this.elementShape));\n        }\n        const indices = [];\n        for (let i = 0; i < this.size(); i++) {\n            indices.push(i);\n        }\n        // Collect all the tensors from the tensors array.\n        const tensors = this.readMany(indices);\n        assertShapesMatchAllowUndefinedSize(this.elementShape, tensors[0].shape, `TensorArray shape mismatch: tensor array shape (${this.elementShape}) vs first tensor shape (${tensors[0].shape})`);\n        return concat(tensors, 0);\n    }\n    /**\n     * Scatter the values of a Tensor in specific indices of a TensorArray.\n     * @param indices number[] values in [0, max_value). If the\n     *    TensorArray is not dynamic, max_value=size().\n     * @param tensor Tensor input tensor.\n     */\n    scatter(indices, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        if (indices.length !== tensor.shape[0]) {\n            throw new Error(`Expected len(indices) == tensor.shape[0], but saw: ${indices.length} vs. ${tensor.shape[0]}`);\n        }\n        const maxIndex = Math.max(...indices);\n        if (!this.dynamicSize && maxIndex >= this.maxSize) {\n            throw new Error(`Max index must be < array size (${maxIndex}  vs. ${this.maxSize})`);\n        }\n        this.writeMany(indices, unstack(tensor, 0));\n    }\n    /**\n     * Split the values of a Tensor into the TensorArray.\n     * @param length number[] with the lengths to use when splitting value along\n     *    its first dimension.\n     * @param tensor Tensor, the tensor to split.\n     */\n    split(length, tensor) {\n        if (tensor.dtype !== this.dtype) {\n            throw new Error(`TensorArray dtype is ${this.dtype} but tensor has dtype ${tensor.dtype}`);\n        }\n        let totalLength = 0;\n        const cumulativeLengths = length.map(len => {\n            totalLength += len;\n            return totalLength;\n        });\n        if (totalLength !== tensor.shape[0]) {\n            throw new Error(`Expected sum of lengths to be equal to\n          tensor.shape[0], but sum of lengths is\n        ${totalLength}, and tensor's shape is: ${tensor.shape}`);\n        }\n        if (!this.dynamicSize && length.length !== this.maxSize) {\n            throw new Error(`TensorArray's size is not equal to the size of lengths (${this.maxSize} vs. ${length.length}), ` +\n                'and the TensorArray is not marked as dynamically resizeable');\n        }\n        const elementPerRow = totalLength === 0 ? 0 : tensor.size / totalLength;\n        const tensors = [];\n        tidy(() => {\n            tensor = reshape(tensor, [1, totalLength, elementPerRow]);\n            for (let i = 0; i < length.length; ++i) {\n                const previousLength = (i === 0) ? 0 : cumulativeLengths[i - 1];\n                const indices = [0, previousLength, 0];\n                const sizes = [1, length[i], elementPerRow];\n                tensors[i] = reshape(slice(tensor, indices, sizes), this.elementShape);\n            }\n            return tensors;\n        });\n        const indices = [];\n        for (let i = 0; i < length.length; i++) {\n            indices[i] = i;\n        }\n        this.writeMany(indices, tensors);\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/**\n * This differs from util.assertShapesMatch in that it allows values of\n * negative one, an undefined size of a dimensinon, in a shape to match\n * anything.\n */\nimport { util } from '@tensorflow/tfjs-core';\n/**\n * Used by TensorList and TensorArray to verify if elementShape matches, support\n * negative value as the dim shape.\n * @param shapeA\n * @param shapeB\n * @param errorMessagePrefix\n */\nexport function assertShapesMatchAllowUndefinedSize(shapeA, shapeB, errorMessagePrefix = '') {\n    // constant shape means unknown rank\n    if (typeof shapeA === 'number' || typeof shapeB === 'number') {\n        return;\n    }\n    util.assert(shapeA.length === shapeB.length, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    for (let i = 0; i < shapeA.length; i++) {\n        const dim0 = shapeA[i];\n        const dim1 = shapeB[i];\n        util.assert(dim0 < 0 || dim1 < 0 || dim0 === dim1, () => errorMessagePrefix + ` Shapes ${shapeA} and ${shapeB} must match`);\n    }\n}\nexport function fullDefinedShape(elementShape) {\n    if (typeof elementShape === 'number' || elementShape.some(dim => dim < 0)) {\n        return false;\n    }\n    return true;\n}\n/**\n * Generate the output element shape from the list elementShape, list tensors\n * and input param.\n * @param listElementShape\n * @param tensors\n * @param elementShape\n */\nexport function inferElementShape(listElementShape, tensors, elementShape) {\n    let partialShape = mergeElementShape(listElementShape, elementShape);\n    const notfullDefinedShape = !fullDefinedShape(partialShape);\n    if (notfullDefinedShape && tensors.length === 0) {\n        throw new Error(`Tried to calculate elements of an empty list` +\n            ` with non-fully-defined elementShape: ${partialShape}`);\n    }\n    if (notfullDefinedShape) {\n        tensors.forEach(tensor => {\n            partialShape = mergeElementShape(tensor.shape, partialShape);\n        });\n    }\n    if (!fullDefinedShape(partialShape)) {\n        throw new Error(`Non-fully-defined elementShape: ${partialShape}`);\n    }\n    return partialShape;\n}\nexport function mergeElementShape(elementShapeA, elementShapeB) {\n    if (typeof elementShapeA === 'number') {\n        return elementShapeB;\n    }\n    if (typeof elementShapeB === 'number') {\n        return elementShapeA;\n    }\n    if (elementShapeA.length !== elementShapeB.length) {\n        throw new Error(`Incompatible ranks during merge: ${elementShapeA} vs. ${elementShapeB}`);\n    }\n    const result = [];\n    for (let i = 0; i < elementShapeA.length; ++i) {\n        const dim0 = elementShapeA[i];\n        const dim1 = elementShapeB[i];\n        if (dim0 >= 0 && dim1 >= 0 && dim0 !== dim1) {\n            throw new Error(`Incompatible shape during merge: ${elementShapeA} vs. ${elementShapeB}`);\n        }\n        result[i] = dim0 >= 0 ? dim0 : dim1;\n    }\n    return result;\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yX3V0aWxzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vdGZqcy1jb252ZXJ0ZXIvc3JjL2V4ZWN1dG9yL3RlbnNvcl91dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQTs7Ozs7Ozs7Ozs7Ozs7O0dBZUc7QUFDSDs7OztHQUlHO0FBRUgsT0FBTyxFQUFTLElBQUksRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBRW5EOzs7Ozs7R0FNRztBQUNILE1BQU0sVUFBVSxtQ0FBbUMsQ0FDL0MsTUFBdUIsRUFBRSxNQUF1QixFQUNoRCxrQkFBa0IsR0FBRyxFQUFFO0lBQ3pCLG9DQUFvQztJQUNwQyxJQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsSUFBSSxPQUFPLE1BQU0sS0FBSyxRQUFRLEVBQUU7UUFDNUQsT0FBTztLQUNSO0lBQ0QsSUFBSSxDQUFDLE1BQU0sQ0FDUCxNQUFNLENBQUMsTUFBTSxLQUFLLE1BQU0sQ0FBQyxNQUFNLEVBQy9CLEdBQUcsRUFBRSxDQUFDLGtCQUFrQixHQUFHLFdBQVcsTUFBTSxRQUFRLE1BQU0sYUFBYSxDQUFDLENBQUM7SUFDN0UsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7UUFDdEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZCLE1BQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QixJQUFJLENBQUMsTUFBTSxDQUNQLElBQUksR0FBRyxDQUFDLElBQUksSUFBSSxHQUFHLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUNyQyxHQUFHLEVBQUUsQ0FDRCxrQkFBa0IsR0FBRyxXQUFXLE1BQU0sUUFBUSxNQUFNLGFBQWEsQ0FBQyxDQUFDO0tBQzVFO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxZQUE2QjtJQUM1RCxJQUFJLE9BQU8sWUFBWSxLQUFLLFFBQVEsSUFBSSxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQ3pFLE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNkLENBQUM7QUFDRDs7Ozs7O0dBTUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQzdCLGdCQUFpQyxFQUFFLE9BQWlCLEVBQ3BELFlBQTZCO0lBQy9CLElBQUksWUFBWSxHQUFHLGlCQUFpQixDQUFDLGdCQUFnQixFQUFFLFlBQVksQ0FBQyxDQUFDO0lBQ3JFLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLENBQUMsQ0FBQztJQUM1RCxJQUFJLG1CQUFtQixJQUFJLE9BQU8sQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1FBQy9DLE1BQU0sSUFBSSxLQUFLLENBQ1gsOENBQThDO1lBQzlDLHlDQUF5QyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0tBQzlEO0lBQ0QsSUFBSSxtQkFBbUIsRUFBRTtRQUN2QixPQUFPLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQ3ZCLFlBQVksR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBQy9ELENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLEVBQUU7UUFDbkMsTUFBTSxJQUFJLEtBQUssQ0FBQyxtQ0FBbUMsWUFBWSxFQUFFLENBQUMsQ0FBQztLQUNwRTtJQUNELE9BQU8sWUFBd0IsQ0FBQztBQUNsQyxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUM3QixhQUE4QixFQUFFLGFBQThCO0lBRWhFLElBQUksT0FBTyxhQUFhLEtBQUssUUFBUSxFQUFFO1FBQ3JDLE9BQU8sYUFBYSxDQUFDO0tBQ3RCO0lBQ0QsSUFBSSxPQUFPLGFBQWEsS0FBSyxRQUFRLEVBQUU7UUFDckMsT0FBTyxhQUFhLENBQUM7S0FDdEI7SUFFRCxJQUFJLGFBQWEsQ0FBQyxNQUFNLEtBQUssYUFBYSxDQUFDLE1BQU0sRUFBRTtRQUNqRCxNQUFNLElBQUksS0FBSyxDQUFDLG9DQUFvQyxhQUFhLFFBQzdELGFBQWEsRUFBRSxDQUFDLENBQUM7S0FDdEI7SUFFRCxNQUFNLE1BQU0sR0FBYSxFQUFFLENBQUM7SUFDNUIsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGFBQWEsQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7UUFDN0MsTUFBTSxJQUFJLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQzlCLE1BQU0sSUFBSSxHQUFHLGFBQWEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5QixJQUFJLElBQUksSUFBSSxDQUFDLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO1lBQzNDLE1BQU0sSUFBSSxLQUFLLENBQUMsb0NBQW9DLGFBQWEsUUFDN0QsYUFBYSxFQUFFLENBQUMsQ0FBQztTQUN0QjtRQUNELE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQztLQUNyQztJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIwIEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cbi8qKlxuICogVGhpcyBkaWZmZXJzIGZyb20gdXRpbC5hc3NlcnRTaGFwZXNNYXRjaCBpbiB0aGF0IGl0IGFsbG93cyB2YWx1ZXMgb2ZcbiAqIG5lZ2F0aXZlIG9uZSwgYW4gdW5kZWZpbmVkIHNpemUgb2YgYSBkaW1lbnNpbm9uLCBpbiBhIHNoYXBlIHRvIG1hdGNoXG4gKiBhbnl0aGluZy5cbiAqL1xuXG5pbXBvcnQge1RlbnNvciwgdXRpbH0gZnJvbSAnQHRlbnNvcmZsb3cvdGZqcy1jb3JlJztcblxuLyoqXG4gKiBVc2VkIGJ5IFRlbnNvckxpc3QgYW5kIFRlbnNvckFycmF5IHRvIHZlcmlmeSBpZiBlbGVtZW50U2hhcGUgbWF0Y2hlcywgc3VwcG9ydFxuICogbmVnYXRpdmUgdmFsdWUgYXMgdGhlIGRpbSBzaGFwZS5cbiAqIEBwYXJhbSBzaGFwZUFcbiAqIEBwYXJhbSBzaGFwZUJcbiAqIEBwYXJhbSBlcnJvck1lc3NhZ2VQcmVmaXhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFzc2VydFNoYXBlc01hdGNoQWxsb3dVbmRlZmluZWRTaXplKFxuICAgIHNoYXBlQTogbnVtYmVyfG51bWJlcltdLCBzaGFwZUI6IG51bWJlcnxudW1iZXJbXSxcbiAgICBlcnJvck1lc3NhZ2VQcmVmaXggPSAnJyk6IHZvaWQge1xuICAvLyBjb25zdGFudCBzaGFwZSBtZWFucyB1bmtub3duIHJhbmtcbiAgaWYgKHR5cGVvZiBzaGFwZUEgPT09ICdudW1iZXInIHx8IHR5cGVvZiBzaGFwZUIgPT09ICdudW1iZXInKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIHV0aWwuYXNzZXJ0KFxuICAgICAgc2hhcGVBLmxlbmd0aCA9PT0gc2hhcGVCLmxlbmd0aCxcbiAgICAgICgpID0+IGVycm9yTWVzc2FnZVByZWZpeCArIGAgU2hhcGVzICR7c2hhcGVBfSBhbmQgJHtzaGFwZUJ9IG11c3QgbWF0Y2hgKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBzaGFwZUEubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBkaW0wID0gc2hhcGVBW2ldO1xuICAgIGNvbnN0IGRpbTEgPSBzaGFwZUJbaV07XG4gICAgdXRpbC5hc3NlcnQoXG4gICAgICAgIGRpbTAgPCAwIHx8IGRpbTEgPCAwIHx8IGRpbTAgPT09IGRpbTEsXG4gICAgICAgICgpID0+XG4gICAgICAgICAgICBlcnJvck1lc3NhZ2VQcmVmaXggKyBgIFNoYXBlcyAke3NoYXBlQX0gYW5kICR7c2hhcGVCfSBtdXN0IG1hdGNoYCk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZ1bGxEZWZpbmVkU2hhcGUoZWxlbWVudFNoYXBlOiBudW1iZXJ8bnVtYmVyW10pOiBib29sZWFuIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50U2hhcGUgPT09ICdudW1iZXInIHx8IGVsZW1lbnRTaGFwZS5zb21lKGRpbSA9PiBkaW0gPCAwKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cbi8qKlxuICogR2VuZXJhdGUgdGhlIG91dHB1dCBlbGVtZW50IHNoYXBlIGZyb20gdGhlIGxpc3QgZWxlbWVudFNoYXBlLCBsaXN0IHRlbnNvcnNcbiAqIGFuZCBpbnB1dCBwYXJhbS5cbiAqIEBwYXJhbSBsaXN0RWxlbWVudFNoYXBlXG4gKiBAcGFyYW0gdGVuc29yc1xuICogQHBhcmFtIGVsZW1lbnRTaGFwZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5mZXJFbGVtZW50U2hhcGUoXG4gICAgbGlzdEVsZW1lbnRTaGFwZTogbnVtYmVyfG51bWJlcltdLCB0ZW5zb3JzOiBUZW5zb3JbXSxcbiAgICBlbGVtZW50U2hhcGU6IG51bWJlcnxudW1iZXJbXSk6IG51bWJlcltdIHtcbiAgbGV0IHBhcnRpYWxTaGFwZSA9IG1lcmdlRWxlbWVudFNoYXBlKGxpc3RFbGVtZW50U2hhcGUsIGVsZW1lbnRTaGFwZSk7XG4gIGNvbnN0IG5vdGZ1bGxEZWZpbmVkU2hhcGUgPSAhZnVsbERlZmluZWRTaGFwZShwYXJ0aWFsU2hhcGUpO1xuICBpZiAobm90ZnVsbERlZmluZWRTaGFwZSAmJiB0ZW5zb3JzLmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFRyaWVkIHRvIGNhbGN1bGF0ZSBlbGVtZW50cyBvZiBhbiBlbXB0eSBsaXN0YCArXG4gICAgICAgIGAgd2l0aCBub24tZnVsbHktZGVmaW5lZCBlbGVtZW50U2hhcGU6ICR7cGFydGlhbFNoYXBlfWApO1xuICB9XG4gIGlmIChub3RmdWxsRGVmaW5lZFNoYXBlKSB7XG4gICAgdGVuc29ycy5mb3JFYWNoKHRlbnNvciA9PiB7XG4gICAgICBwYXJ0aWFsU2hhcGUgPSBtZXJnZUVsZW1lbnRTaGFwZSh0ZW5zb3Iuc2hhcGUsIHBhcnRpYWxTaGFwZSk7XG4gICAgfSk7XG4gIH1cbiAgaWYgKCFmdWxsRGVmaW5lZFNoYXBlKHBhcnRpYWxTaGFwZSkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYE5vbi1mdWxseS1kZWZpbmVkIGVsZW1lbnRTaGFwZTogJHtwYXJ0aWFsU2hhcGV9YCk7XG4gIH1cbiAgcmV0dXJuIHBhcnRpYWxTaGFwZSBhcyBudW1iZXJbXTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRWxlbWVudFNoYXBlKFxuICAgIGVsZW1lbnRTaGFwZUE6IG51bWJlcnxudW1iZXJbXSwgZWxlbWVudFNoYXBlQjogbnVtYmVyfG51bWJlcltdKTogbnVtYmVyfFxuICAgIG51bWJlcltdIHtcbiAgaWYgKHR5cGVvZiBlbGVtZW50U2hhcGVBID09PSAnbnVtYmVyJykge1xuICAgIHJldHVybiBlbGVtZW50U2hhcGVCO1xuICB9XG4gIGlmICh0eXBlb2YgZWxlbWVudFNoYXBlQiA9PT0gJ251bWJlcicpIHtcbiAgICByZXR1cm4gZWxlbWVudFNoYXBlQTtcbiAgfVxuXG4gIGlmIChlbGVtZW50U2hhcGVBLmxlbmd0aCAhPT0gZWxlbWVudFNoYXBlQi5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEluY29tcGF0aWJsZSByYW5rcyBkdXJpbmcgbWVyZ2U6ICR7ZWxlbWVudFNoYXBlQX0gdnMuICR7XG4gICAgICAgIGVsZW1lbnRTaGFwZUJ9YCk7XG4gIH1cblxuICBjb25zdCByZXN1bHQ6IG51bWJlcltdID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudFNoYXBlQS5sZW5ndGg7ICsraSkge1xuICAgIGNvbnN0IGRpbTAgPSBlbGVtZW50U2hhcGVBW2ldO1xuICAgIGNvbnN0IGRpbTEgPSBlbGVtZW50U2hhcGVCW2ldO1xuICAgIGlmIChkaW0wID49IDAgJiYgZGltMSA+PSAwICYmIGRpbTAgIT09IGRpbTEpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgSW5jb21wYXRpYmxlIHNoYXBlIGR1cmluZyBtZXJnZTogJHtlbGVtZW50U2hhcGVBfSB2cy4gJHtcbiAgICAgICAgICBlbGVtZW50U2hhcGVCfWApO1xuICAgIH1cbiAgICByZXN1bHRbaV0gPSBkaW0wID49IDAgPyBkaW0wIDogZGltMTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIl19","/**\n * Contains global resources of a model.\n */\nexport class ResourceManager {\n    constructor(hashTableNameToHandle = {}, hashTableMap = {}) {\n        this.hashTableNameToHandle = hashTableNameToHandle;\n        this.hashTableMap = hashTableMap;\n    }\n    /**\n     * Register a `HashTable` in the resource manager.\n     *\n     * The `HashTable` can be retrieved by `resourceManager.getHashTableById`,\n     * where id is the table handle tensor's id.\n     *\n     * @param name Op node name that creates the `HashTable`.\n     * @param hashTable The `HashTable` to be added to resource manager.\n     */\n    addHashTable(name, hashTable) {\n        this.hashTableNameToHandle[name] = hashTable.handle;\n        this.hashTableMap[hashTable.id] = hashTable;\n    }\n    /**\n     * Get the table handle by node name.\n     * @param name Op node name that creates the `HashTable`. This name is also\n     *     used in the inputs list of lookup and import `HashTable` ops.\n     */\n    getHashTableHandleByName(name) {\n        return this.hashTableNameToHandle[name];\n    }\n    /**\n     * Get the actual `HashTable` by its handle tensor's id.\n     * @param id The id of the handle tensor.\n     */\n    getHashTableById(id) {\n        return this.hashTableMap[id];\n    }\n    /**\n     * Dispose `ResourceManager`, including its hashTables and tensors in them.\n     */\n    dispose() {\n        for (const key in this.hashTableMap) {\n            this.hashTableMap[key].clearAndClose();\n            delete this.hashTableMap[key];\n        }\n        for (const name in this.hashTableNameToHandle) {\n            this.hashTableNameToHandle[name].dispose();\n            delete this.hashTableNameToHandle[name];\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzb3VyY2VfbWFuYWdlci5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3RmanMtY29udmVydGVyL3NyYy9leGVjdXRvci9yZXNvdXJjZV9tYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQW1CQTs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFlO0lBQzFCLFlBQ2Esd0JBQXdDLEVBQUUsRUFDMUMsZUFBNkIsRUFBRTtRQUQvQiwwQkFBcUIsR0FBckIscUJBQXFCLENBQXFCO1FBQzFDLGlCQUFZLEdBQVosWUFBWSxDQUFtQjtJQUFHLENBQUM7SUFFaEQ7Ozs7Ozs7O09BUUc7SUFDSCxZQUFZLENBQUMsSUFBWSxFQUFFLFNBQW9CO1FBQzdDLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDO1FBQ3BELElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQztJQUM5QyxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILHdCQUF3QixDQUFDLElBQVk7UUFDbkMsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVEOzs7T0FHRztJQUNILGdCQUFnQixDQUFDLEVBQVU7UUFDekIsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQy9CLENBQUM7SUFFRDs7T0FFRztJQUNILE9BQU87UUFDTCxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDbkMsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsQ0FBQyxhQUFhLEVBQUUsQ0FBQztZQUN2QyxPQUFPLElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDL0I7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRTtZQUM3QyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLENBQUM7WUFDM0MsT0FBTyxJQUFJLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDekM7SUFDSCxDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuICpcbiAqIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuICpcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcbiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUyxcbiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLlxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxuICogbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5pbXBvcnQge0hhc2hUYWJsZU1hcCwgTmFtZWRUZW5zb3JNYXB9IGZyb20gJy4uL2RhdGEvdHlwZXMnO1xuaW1wb3J0IHtIYXNoVGFibGV9IGZyb20gJy4vaGFzaF90YWJsZSc7XG5cbi8qKlxuICogQ29udGFpbnMgZ2xvYmFsIHJlc291cmNlcyBvZiBhIG1vZGVsLlxuICovXG5leHBvcnQgY2xhc3MgUmVzb3VyY2VNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgICByZWFkb25seSBoYXNoVGFibGVOYW1lVG9IYW5kbGU6IE5hbWVkVGVuc29yTWFwID0ge30sXG4gICAgICByZWFkb25seSBoYXNoVGFibGVNYXA6IEhhc2hUYWJsZU1hcCA9IHt9KSB7fVxuXG4gIC8qKlxuICAgKiBSZWdpc3RlciBhIGBIYXNoVGFibGVgIGluIHRoZSByZXNvdXJjZSBtYW5hZ2VyLlxuICAgKlxuICAgKiBUaGUgYEhhc2hUYWJsZWAgY2FuIGJlIHJldHJpZXZlZCBieSBgcmVzb3VyY2VNYW5hZ2VyLmdldEhhc2hUYWJsZUJ5SWRgLFxuICAgKiB3aGVyZSBpZCBpcyB0aGUgdGFibGUgaGFuZGxlIHRlbnNvcidzIGlkLlxuICAgKlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC5cbiAgICogQHBhcmFtIGhhc2hUYWJsZSBUaGUgYEhhc2hUYWJsZWAgdG8gYmUgYWRkZWQgdG8gcmVzb3VyY2UgbWFuYWdlci5cbiAgICovXG4gIGFkZEhhc2hUYWJsZShuYW1lOiBzdHJpbmcsIGhhc2hUYWJsZTogSGFzaFRhYmxlKSB7XG4gICAgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV0gPSBoYXNoVGFibGUuaGFuZGxlO1xuICAgIHRoaXMuaGFzaFRhYmxlTWFwW2hhc2hUYWJsZS5pZF0gPSBoYXNoVGFibGU7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB0YWJsZSBoYW5kbGUgYnkgbm9kZSBuYW1lLlxuICAgKiBAcGFyYW0gbmFtZSBPcCBub2RlIG5hbWUgdGhhdCBjcmVhdGVzIHRoZSBgSGFzaFRhYmxlYC4gVGhpcyBuYW1lIGlzIGFsc29cbiAgICogICAgIHVzZWQgaW4gdGhlIGlucHV0cyBsaXN0IG9mIGxvb2t1cCBhbmQgaW1wb3J0IGBIYXNoVGFibGVgIG9wcy5cbiAgICovXG4gIGdldEhhc2hUYWJsZUhhbmRsZUJ5TmFtZShuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBhY3R1YWwgYEhhc2hUYWJsZWAgYnkgaXRzIGhhbmRsZSB0ZW5zb3IncyBpZC5cbiAgICogQHBhcmFtIGlkIFRoZSBpZCBvZiB0aGUgaGFuZGxlIHRlbnNvci5cbiAgICovXG4gIGdldEhhc2hUYWJsZUJ5SWQoaWQ6IG51bWJlcik6IEhhc2hUYWJsZSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzaFRhYmxlTWFwW2lkXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaXNwb3NlIGBSZXNvdXJjZU1hbmFnZXJgLCBpbmNsdWRpbmcgaXRzIGhhc2hUYWJsZXMgYW5kIHRlbnNvcnMgaW4gdGhlbS5cbiAgICovXG4gIGRpc3Bvc2UoKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5oYXNoVGFibGVNYXApIHtcbiAgICAgIHRoaXMuaGFzaFRhYmxlTWFwW2tleV0uY2xlYXJBbmRDbG9zZSgpO1xuICAgICAgZGVsZXRlIHRoaXMuaGFzaFRhYmxlTWFwW2tleV07XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMuaGFzaFRhYmxlTmFtZVRvSGFuZGxlKSB7XG4gICAgICB0aGlzLmhhc2hUYWJsZU5hbWVUb0hhbmRsZVtuYW1lXS5kaXNwb3NlKCk7XG4gICAgICBkZWxldGUgdGhpcy5oYXNoVGFibGVOYW1lVG9IYW5kbGVbbmFtZV07XG4gICAgfVxuICB9XG59XG4iXX0=","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { parseNodeName } from '../operations/executors/utils';\n/**\n * Given graph inputs and desired outputs, find the minimal set of nodes\n * to execute in order to compute the outputs. In addition return other useful\n * info such:\n * - Missing inputs needed to compute the output.\n * - Whether the subgraph contains dynamic ops (control flow, dynamic shape).\n * - Alternative inputs in order to avoid async (dynamic op) execution.\n */\nexport function getExecutionSubgraph(inputs, outputs, weightMap, initNodes) {\n    const usedNodes = new Set();\n    const missingInputs = [];\n    let dynamicNode = null;\n    let syncInputs = null;\n    // Start with the outputs, going backwards and find all the nodes that are\n    // needed to compute those outputs.\n    const seen = new Set();\n    const inputNodeNames = new Set(Object.keys(inputs).map((name) => parseNodeName(name)[0]));\n    initNodes = initNodes || [];\n    const initNodeNames = new Set(initNodes.map((node) => parseNodeName(node.name)[0]));\n    const frontier = [...outputs];\n    while (frontier.length > 0) {\n        const node = frontier.pop();\n        if (isControlFlow(node) || isDynamicShape(node) || isHashTable(node)) {\n            if (dynamicNode == null) {\n                dynamicNode = node;\n                syncInputs = dynamicNode.children.map(child => child.name)\n                    .filter(name => usedNodes.has(name));\n            }\n        }\n        usedNodes.add(node.name);\n        // Weights are dead end since we already have their values.\n        if (weightMap[node.name] != null) {\n            continue;\n        }\n        // This node is a dead end since it's one of the user-provided inputs.\n        if (inputNodeNames.has(node.name)) {\n            continue;\n        }\n        // This node is a dead end since it doesn't have any inputs.\n        if (initNodeNames.has(node.name)) {\n            continue;\n        }\n        if (node.inputs.length === 0) {\n            missingInputs.push(node.name);\n            continue;\n        }\n        node.inputs.forEach(input => {\n            // Don't add to the frontier if it is already there.\n            if (seen.has(input.name)) {\n                return;\n            }\n            seen.add(input.name);\n            frontier.push(input);\n        });\n    }\n    return { inputs, outputs, usedNodes, missingInputs, dynamicNode, syncInputs };\n}\n/**\n * Given the execution info, return a list of nodes in topological order that\n * need to be executed to compute the output.\n */\nexport function getNodesInTopologicalOrder(graph, executionInfo) {\n    const { usedNodes, inputs } = executionInfo;\n    const inputNodes = Object.keys(inputs)\n        .map(name => parseNodeName(name)[0])\n        .map(name => graph.nodes[name]);\n    const initNodes = graph.initNodes || [];\n    const isUsed = (node) => usedNodes.has(typeof node === 'string' ? node : node.name);\n    function unique(nodes) {\n        return [...new Map(nodes.map((node) => [node.name, node])).values()];\n    }\n    const predefinedNodes = unique([\n        ...inputNodes,\n        ...graph.weights,\n        ...initNodes,\n    ]).filter(isUsed);\n    const allNodes = unique([\n        ...predefinedNodes,\n        ...Object.values(graph.nodes),\n    ]).filter(isUsed);\n    const nameToNode = new Map(allNodes.map((node) => [node.name, node]));\n    const inCounts = {};\n    for (const node of allNodes) {\n        inCounts[node.name] = inCounts[node.name] || 0;\n        for (const child of node.children) {\n            // When the child is unused, set in counts to infinity so that it will\n            // never be decreased to 0 and added to the execution list.\n            if (!isUsed(child)) {\n                inCounts[child.name] = Number.POSITIVE_INFINITY;\n            }\n            inCounts[child.name] = (inCounts[child.name] || 0) + 1;\n        }\n    }\n    // Build execution order for all used nodes regardless whether they are\n    // predefined or not.\n    const frontier = Object.entries(inCounts)\n        .filter(([, inCount]) => inCount === 0)\n        .map(([name]) => name);\n    const orderedNodeNames = [...frontier];\n    while (frontier.length > 0) {\n        const nodeName = frontier.pop();\n        const node = nameToNode.get(nodeName);\n        for (const child of node.children.filter(isUsed)) {\n            if (--inCounts[child.name] === 0) {\n                orderedNodeNames.push(child.name);\n                frontier.push(child.name);\n            }\n        }\n    }\n    const orderedNodes = orderedNodeNames.map((name) => nameToNode.get(name));\n    const filteredOrderedNodes = filterPredefinedReachableNodes(orderedNodes, predefinedNodes);\n    // TODO: Turn validation on/off with tf env flag.\n    validateNodesExecutionOrder(filteredOrderedNodes, predefinedNodes);\n    return filteredOrderedNodes;\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Returns ordered nodes reachable by at least one predefined node.\n * This can help us filter out redundant nodes from the returned node list.\n * For example:\n * If we have four nodes with dependencies like this:\n *   a --> b --> c --> d\n * when node `c` is predefined (e.g. given as an input tensor), we can\n * skip node `a` and `b` since their outputs will never be used.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction filterPredefinedReachableNodes(orderedNodes, predefinedNodes) {\n    const nameToNode = new Map(orderedNodes.map((node) => [node.name, node]));\n    // TODO: Filter out more nodes when >=2 nodes are predefined in a path.\n    const stack = predefinedNodes.map((node) => node.name);\n    const predefinedReachableNodeNames = new Set(stack);\n    // Perform a DFS starting from the set of all predefined nodes\n    // to find the set of all nodes reachable from the predefined nodes.\n    while (stack.length > 0) {\n        const nodeName = stack.pop();\n        const node = nameToNode.get(nodeName);\n        for (const child of node.children) {\n            if (!nameToNode.has(child.name) ||\n                predefinedReachableNodeNames.has(child.name)) {\n                continue;\n            }\n            predefinedReachableNodeNames.add(child.name);\n            stack.push(child.name);\n        }\n    }\n    // Filter out unreachable nodes and build the ordered node list.\n    const filteredOrderedNodes = orderedNodes.filter((node) => predefinedReachableNodeNames.has(node.name));\n    return filteredOrderedNodes;\n}\nclass NodesExecutionOrderError extends Error {\n    constructor(message) {\n        super(`NodesExecutionOrderError: ${message}`);\n    }\n}\n/**\n * This is a helper function of `getNodesInTopologicalOrder`.\n * Validates property: given nodes `a` and `b`, Order(a) > Order(b) if `a`\n * is a child of `b`. This function throws an error if validation fails.\n *\n * @param orderedNodes Graph nodes in execution order.\n * @param predefinedNodes Graph inputs, weights, and init nodes. Nodes in this\n *     list must have distinct names.\n */\nfunction validateNodesExecutionOrder(orderedNodes, predefinedNodes) {\n    const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n    const predefinedNodeNames = new Set(predefinedNodes.map((node) => node.name));\n    const isPredefined = (node) => predefinedNodeNames.has(typeof node === 'string' ? node : node.name);\n    const willBeExecutedNodeNames = new Set(orderedNodes.map((node) => node.name));\n    const willBeExecuted = (node) => willBeExecutedNodeNames.has(typeof node === 'string' ? node : node.name);\n    for (const node of orderedNodes) {\n        for (const child of node.children.filter(willBeExecuted)) {\n            if (!nodeNameToOrder.has(child.name)) {\n                throw new NodesExecutionOrderError(`Child ${child.name} of node ${node.name} is unreachable.`);\n            }\n            if (nodeNameToOrder.get(node.name) > nodeNameToOrder.get(child.name)) {\n                throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run after its child ${child.name}.`);\n            }\n        }\n        if (!isPredefined(node)) {\n            for (const input of node.inputs) {\n                if (!nodeNameToOrder.has(input.name)) {\n                    throw new NodesExecutionOrderError(`Input ${input.name} of node ${node.name} is unreachable.`);\n                }\n                if (nodeNameToOrder.get(input.name) > nodeNameToOrder.get(node.name)) {\n                    throw new NodesExecutionOrderError(`Node ${node.name} is scheduled to run before its input ${input.name}.`);\n                }\n            }\n        }\n    }\n}\n/**\n * Given the execution info, return a map from node name to the disposable\n * node name list after its execution.\n *\n * @returns A map from node name to disposable nodes after its\n *     execution. That is, for a node `x`, `nodeLiveUntilMap[x]` indicates\n *     all nodes which their intermediate tensors should be disposed after `x`\n *     being executed.\n */\nexport function getNodeLiveUntilMap(orderedNodes) {\n    const nodeNameToOrder = new Map(orderedNodes.map((node, order) => [node.name, order]));\n    const INF_LIFE = Number.MAX_SAFE_INTEGER;\n    // Make control flow nodes (and consequently their direct parents)\n    // live forever since they're tricky to track correctly.\n    const selfLifespans = orderedNodes.map((node, nodeOrder) => isControlFlow(node) ? INF_LIFE : nodeOrder);\n    const getSelfLifeSpan = (node) => {\n        const selfLife = selfLifespans[nodeNameToOrder.get(node.name)];\n        if (selfLife == null) {\n            // If nodeToOrder does not contain the node, it is unused or\n            // unreachable in graph.\n            return -1;\n        }\n        return selfLife;\n    };\n    // `liveUntil[i]` points to the last node in the `orderedNodes` array that\n    // may depend on tensors from node `i`. It indicates that all the\n    // intermediate tensors from `orderedNodes[i]` should be disposed after\n    // `orderedNodes[liveUntil[i]]` is executed.\n    // A node lives long enough to pass on its tensors to its children.\n    // It lives until at least `max(node's position, children's positions)`.\n    const liveUntilOrders = orderedNodes.map((node, nodeOrder) => {\n        return node.children.map(getSelfLifeSpan)\n            .reduce((a, b) => Math.max(a, b), selfLifespans[nodeOrder]);\n    });\n    // liveUntilMap:\n    // - Key: Name of a node `x`\n    // - Values: All nodes whose intermediate tensors should be disposed\n    //           after `x` is executed.\n    const liveUntilMap = new Map();\n    for (let nodeOrder = 0; nodeOrder < orderedNodes.length; ++nodeOrder) {\n        const liveUntilOrder = liveUntilOrders[nodeOrder];\n        if (liveUntilOrder === INF_LIFE) {\n            continue;\n        }\n        const node = orderedNodes[nodeOrder];\n        const liveUntilNode = orderedNodes[liveUntilOrder];\n        if (!liveUntilMap.has(liveUntilNode.name)) {\n            liveUntilMap.set(liveUntilNode.name, []);\n        }\n        liveUntilMap.get(liveUntilNode.name).push(node);\n    }\n    return liveUntilMap;\n}\nconst CONTROL_FLOW_OPS = new Set([\n    'Switch', 'Merge', 'Enter', 'Exit', 'NextIteration', 'StatelessIf',\n    'StatelessWhile', 'if', 'While'\n]);\nconst DYNAMIC_SHAPE_OPS = new Set([\n    'NonMaxSuppressionV2', 'NonMaxSuppressionV3', 'NonMaxSuppressionV5', 'Where'\n]);\nconst HASH_TABLE_OPS = new Set([\n    'HashTable', 'HashTableV2', 'LookupTableImport', 'LookupTableImportV2',\n    'LookupTableFind', 'LookupTableFindV2', 'LookupTableSize', 'LookupTableSizeV2'\n]);\nexport function isControlFlow(node) {\n    return CONTROL_FLOW_OPS.has(node.op);\n}\nexport function isDynamicShape(node) {\n    return DYNAMIC_SHAPE_OPS.has(node.op);\n}\nexport function isHashTable(node) {\n    return HASH_TABLE_OPS.has(node.op);\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["TensorList","id","this","idTensor","constructor","tensors","elementShape","elementDtype","maxNumElements","forEach","tensor","dtype","Error","shape","keep","scalar","copy","clearAndClose","keepIds","has","dispose","length","size","stack","numElements","outputElementShape","tidy","reshapedTensors","map","reshape","popBack","pop","kept","pushBack","push","resize","destTensorList","i","Math","min","getItem","elementIndex","setItem","gather","indices","slice","concat","t","fromTensor","tensorElementShape","tensorList","unstack","reserve","scatter","maxIndex","max","list","value","index","split","totalLength","cumulativeLengths","len","shapeWithoutFirstDim","elementPerRow","sizes","TensorArray","name","maxSize","identicalElementShapes","dynamicSize","clearAfterRead","closed_","closed","read","tensorWithState","cleared","readMany","write","written","writeMany","assertShapesMatchAllowUndefinedSize","shapeA","shapeB","errorMessagePrefix","util","dim0","dim1","fullDefinedShape","some","dim","inferElementShape","listElementShape","partialShape","mergeElementShape","notfullDefinedShape","elementShapeA","elementShapeB","result","ResourceManager","hashTableNameToHandle","hashTableMap","addHashTable","hashTable","handle","getHashTableHandleByName","getHashTableById","key","getExecutionSubgraph","inputs","outputs","weightMap","initNodes","usedNodes","Set","missingInputs","dynamicNode","syncInputs","seen","inputNodeNames","Object","keys","initNodeNames","node","frontier","isControlFlow","isDynamicShape","isHashTable","children","child","filter","add","input","getNodesInTopologicalOrder","graph","executionInfo","inputNodes","nodes","isUsed","unique","Map","values","predefinedNodes","weights","allNodes","nameToNode","inCounts","Number","POSITIVE_INFINITY","entries","inCount","orderedNodeNames","nodeName","get","filteredOrderedNodes","orderedNodes","predefinedReachableNodeNames","filterPredefinedReachableNodes","nodeNameToOrder","order","predefinedNodeNames","isPredefined","willBeExecutedNodeNames","willBeExecuted","NodesExecutionOrderError","validateNodesExecutionOrder","message","super","getNodeLiveUntilMap","INF_LIFE","MAX_SAFE_INTEGER","selfLifespans","nodeOrder","getSelfLifeSpan","selfLife","liveUntilOrders","reduce","a","b","liveUntilMap","liveUntilOrder","liveUntilNode","set","CONTROL_FLOW_OPS","DYNAMIC_SHAPE_OPS","HASH_TABLE_OPS","op"],"sourceRoot":""}