{"version":3,"file":"stylist-vendors-9dd1e315.e015ea20b36c6de14375.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/tensor_util_env.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/tensor_util.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/test_util.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/tensor_format.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-core/dist/tensor.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { env } from './environment';\nimport { getGlobalTensorClass } from './tensor';\nimport { isWebGLData, isWebGPUData } from './types';\nimport { assert, flatten, inferDtype, isTypedArray, toTypedArray } from './util';\nimport { bytesPerElement } from './util_base';\nexport function inferShape(val, dtype) {\n    let firstElem = val;\n    if (isTypedArray(val)) {\n        return dtype === 'string' ? [] : [val.length];\n    }\n    if (isWebGLData(val)) {\n        const usedChannels = val.channels || 'RGBA';\n        return [val.height, val.width * usedChannels.length];\n    }\n    else if (isWebGPUData(val)) {\n        return [val.buffer.size / (dtype == null ? 4 : bytesPerElement(dtype))];\n    }\n    if (!Array.isArray(val)) {\n        return []; // Scalar.\n    }\n    const shape = [];\n    while (Array.isArray(firstElem) ||\n        isTypedArray(firstElem) && dtype !== 'string') {\n        shape.push(firstElem.length);\n        firstElem = firstElem[0];\n    }\n    if (Array.isArray(val) &&\n        env().getBool('TENSORLIKE_CHECK_SHAPE_CONSISTENCY')) {\n        deepAssertShapeConsistency(val, shape, []);\n    }\n    return shape;\n}\nfunction deepAssertShapeConsistency(val, shape, indices) {\n    indices = indices || [];\n    if (!(Array.isArray(val)) && !isTypedArray(val)) {\n        assert(shape.length === 0, () => `Element arr[${indices.join('][')}] is a primitive, ` +\n            `but should be an array/TypedArray of ${shape[0]} elements`);\n        return;\n    }\n    assert(shape.length > 0, () => `Element arr[${indices.join('][')}] should be a primitive, ` +\n        `but is an array of ${val.length} elements`);\n    assert(val.length === shape[0], () => `Element arr[${indices.join('][')}] should have ${shape[0]} ` +\n        `elements, but has ${val.length} elements`);\n    const subShape = shape.slice(1);\n    for (let i = 0; i < val.length; ++i) {\n        deepAssertShapeConsistency(val[i], subShape, indices.concat(i));\n    }\n}\nfunction assertDtype(expectedDtype, actualDType, argName, functionName) {\n    if (expectedDtype === 'string_or_numeric') {\n        return;\n    }\n    if (expectedDtype == null) {\n        throw new Error(`Expected dtype cannot be null.`);\n    }\n    if (expectedDtype !== 'numeric' && expectedDtype !== actualDType ||\n        expectedDtype === 'numeric' && actualDType === 'string') {\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must ` +\n            `be ${expectedDtype} tensor, but got ${actualDType} tensor`);\n    }\n}\nexport function convertToTensor(x, argName, functionName, parseAsDtype = 'numeric') {\n    if (x instanceof getGlobalTensorClass()) {\n        assertDtype(parseAsDtype, x.dtype, argName, functionName);\n        return x;\n    }\n    let inferredDtype = inferDtype(x);\n    // If the user expects a bool/int/float, use that info to update the\n    // inferredDtype when it is not a string.\n    if (inferredDtype !== 'string' &&\n        ['bool', 'int32', 'float32'].indexOf(parseAsDtype) >= 0) {\n        inferredDtype = parseAsDtype;\n    }\n    assertDtype(parseAsDtype, inferredDtype, argName, functionName);\n    if ((x == null) ||\n        (!isTypedArray(x) && !Array.isArray(x) && typeof x !== 'number' &&\n            typeof x !== 'boolean' && typeof x !== 'string')) {\n        const type = x == null ? 'null' : x.constructor.name;\n        throw new Error(`Argument '${argName}' passed to '${functionName}' must be a ` +\n            `Tensor or TensorLike, but got '${type}'`);\n    }\n    const inferredShape = inferShape(x, inferredDtype);\n    if (!isTypedArray(x) && !Array.isArray(x)) {\n        x = [x];\n    }\n    const skipTypedArray = true;\n    const values = inferredDtype !== 'string' ?\n        toTypedArray(x, inferredDtype) :\n        flatten(x, [], skipTypedArray);\n    return ENGINE.makeTensor(values, inferredShape, inferredDtype);\n}\nexport function convertToTensorArray(arg, argName, functionName, parseAsDtype = 'numeric') {\n    if (!Array.isArray(arg)) {\n        throw new Error(`Argument ${argName} passed to ${functionName} must be a ` +\n            '`Tensor[]` or `TensorLike[]`');\n    }\n    const tensors = arg;\n    return tensors.map((t, i) => convertToTensor(t, `${argName}[${i}]`, functionName, parseAsDtype));\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Tensor } from './tensor';\nimport { upcastType } from './types';\nimport { assert } from './util';\nexport function makeTypesMatch(a, b) {\n    if (a.dtype === b.dtype) {\n        return [a, b];\n    }\n    const dtype = upcastType(a.dtype, b.dtype);\n    return [a.cast(dtype), b.cast(dtype)];\n}\nexport function assertTypesMatch(a, b) {\n    assert(a.dtype === b.dtype, () => `The dtypes of the first(${a.dtype}) and` +\n        ` second(${b.dtype}) input must match`);\n}\nexport function isTensorInList(tensor, tensorList) {\n    return tensorList.some(x => x.id === tensor.id);\n}\n/**\n * Extracts any `Tensor`s found within the provided object.\n *\n * @param container an object that may be a `Tensor` or may directly contain\n *   `Tensor`s, such as a `Tensor[]` or `{key: Tensor, ...}`. In general it\n *   is safe to pass any object here, except that `Promise`s are not\n *   supported.\n * @returns An array of `Tensors` found within the passed object. If the\n *   argument is simply a `Tensor', a list containing that `Tensor` is\n *   returned. If the object is not a `Tensor` or does not\n *   contain `Tensors`, an empty list is returned.\n */\nexport function getTensorsInContainer(result) {\n    const list = [];\n    const seen = new Set();\n    walkTensorContainer(result, list, seen);\n    return list;\n}\nfunction walkTensorContainer(container, list, seen) {\n    if (container == null) {\n        return;\n    }\n    if (container instanceof Tensor) {\n        list.push(container);\n        return;\n    }\n    if (!isIterable(container)) {\n        return;\n    }\n    // Iteration over keys works also for arrays.\n    const iterable = container;\n    for (const k in iterable) {\n        const val = iterable[k];\n        if (!seen.has(val)) {\n            seen.add(val);\n            walkTensorContainer(val, list, seen);\n        }\n    }\n}\n// tslint:disable-next-line:no-any\nfunction isIterable(obj) {\n    return Array.isArray(obj) || typeof obj === 'object';\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGVuc29yX3V0aWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi90ZmpzLWNvcmUvc3JjL3RlbnNvcl91dGlsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7Ozs7Ozs7R0FlRztBQUVILE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSxVQUFVLENBQUM7QUFFaEMsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sUUFBUSxDQUFDO0FBRTlCLE1BQU0sVUFBVSxjQUFjLENBQW1CLENBQUksRUFBRSxDQUFJO0lBQ3pELElBQUksQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSyxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDZjtJQUNELE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxDQUFDLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMzQyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7QUFDeEMsQ0FBQztBQUVELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxDQUFTLEVBQUUsQ0FBUztJQUNuRCxNQUFNLENBQ0YsQ0FBQyxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsS0FBSyxFQUNuQixHQUFHLEVBQUUsQ0FBQywyQkFBMkIsQ0FBQyxDQUFDLEtBQUssT0FBTztRQUMzQyxXQUFXLENBQUMsQ0FBQyxLQUFLLG9CQUFvQixDQUFDLENBQUM7QUFDbEQsQ0FBQztBQUVELE1BQU0sVUFBVSxjQUFjLENBQUMsTUFBYyxFQUFFLFVBQW9CO0lBQ2pFLE9BQU8sVUFBVSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFFLEtBQUssTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ2xELENBQUM7QUFFRDs7Ozs7Ozs7Ozs7R0FXRztBQUNILE1BQU0sVUFBVSxxQkFBcUIsQ0FBQyxNQUF1QjtJQUMzRCxNQUFNLElBQUksR0FBYSxFQUFFLENBQUM7SUFDMUIsTUFBTSxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQVcsQ0FBQztJQUNoQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3hDLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQztBQUVELFNBQVMsbUJBQW1CLENBQ3hCLFNBQTBCLEVBQUUsSUFBYyxFQUFFLElBQWtCO0lBQ2hFLElBQUksU0FBUyxJQUFJLElBQUksRUFBRTtRQUNyQixPQUFPO0tBQ1I7SUFDRCxJQUFJLFNBQVMsWUFBWSxNQUFNLEVBQUU7UUFDL0IsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNyQixPQUFPO0tBQ1I7SUFDRCxJQUFJLENBQUMsVUFBVSxDQUFDLFNBQVMsQ0FBQyxFQUFFO1FBQzFCLE9BQU87S0FDUjtJQUNELDZDQUE2QztJQUM3QyxNQUFNLFFBQVEsR0FBRyxTQUFpQyxDQUFDO0lBQ25ELEtBQUssTUFBTSxDQUFDLElBQUksUUFBUSxFQUFFO1FBQ3hCLE1BQU0sR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN4QixJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsbUJBQW1CLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztTQUN0QztLQUNGO0FBQ0gsQ0FBQztBQUVELGtDQUFrQztBQUNsQyxTQUFTLFVBQVUsQ0FBQyxHQUFRO0lBQzFCLE9BQU8sS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLENBQUM7QUFDdkQsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTEMuIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4gKlxuICogaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4gKlxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICogV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiAqID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKi9cblxuaW1wb3J0IHtUZW5zb3J9IGZyb20gJy4vdGVuc29yJztcbmltcG9ydCB7VGVuc29yQ29udGFpbmVyLCBUZW5zb3JDb250YWluZXJBcnJheX0gZnJvbSAnLi90ZW5zb3JfdHlwZXMnO1xuaW1wb3J0IHt1cGNhc3RUeXBlfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7YXNzZXJ0fSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVR5cGVzTWF0Y2g8VCBleHRlbmRzIFRlbnNvcj4oYTogVCwgYjogVCk6IFtULCBUXSB7XG4gIGlmIChhLmR0eXBlID09PSBiLmR0eXBlKSB7XG4gICAgcmV0dXJuIFthLCBiXTtcbiAgfVxuICBjb25zdCBkdHlwZSA9IHVwY2FzdFR5cGUoYS5kdHlwZSwgYi5kdHlwZSk7XG4gIHJldHVybiBbYS5jYXN0KGR0eXBlKSwgYi5jYXN0KGR0eXBlKV07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3NlcnRUeXBlc01hdGNoKGE6IFRlbnNvciwgYjogVGVuc29yKTogdm9pZCB7XG4gIGFzc2VydChcbiAgICAgIGEuZHR5cGUgPT09IGIuZHR5cGUsXG4gICAgICAoKSA9PiBgVGhlIGR0eXBlcyBvZiB0aGUgZmlyc3QoJHthLmR0eXBlfSkgYW5kYCArXG4gICAgICAgICAgYCBzZWNvbmQoJHtiLmR0eXBlfSkgaW5wdXQgbXVzdCBtYXRjaGApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNUZW5zb3JJbkxpc3QodGVuc29yOiBUZW5zb3IsIHRlbnNvckxpc3Q6IFRlbnNvcltdKTogYm9vbGVhbiB7XG4gIHJldHVybiB0ZW5zb3JMaXN0LnNvbWUoeCA9PiB4LmlkID09PSB0ZW5zb3IuaWQpO1xufVxuXG4vKipcbiAqIEV4dHJhY3RzIGFueSBgVGVuc29yYHMgZm91bmQgd2l0aGluIHRoZSBwcm92aWRlZCBvYmplY3QuXG4gKlxuICogQHBhcmFtIGNvbnRhaW5lciBhbiBvYmplY3QgdGhhdCBtYXkgYmUgYSBgVGVuc29yYCBvciBtYXkgZGlyZWN0bHkgY29udGFpblxuICogICBgVGVuc29yYHMsIHN1Y2ggYXMgYSBgVGVuc29yW11gIG9yIGB7a2V5OiBUZW5zb3IsIC4uLn1gLiBJbiBnZW5lcmFsIGl0XG4gKiAgIGlzIHNhZmUgdG8gcGFzcyBhbnkgb2JqZWN0IGhlcmUsIGV4Y2VwdCB0aGF0IGBQcm9taXNlYHMgYXJlIG5vdFxuICogICBzdXBwb3J0ZWQuXG4gKiBAcmV0dXJucyBBbiBhcnJheSBvZiBgVGVuc29yc2AgZm91bmQgd2l0aGluIHRoZSBwYXNzZWQgb2JqZWN0LiBJZiB0aGVcbiAqICAgYXJndW1lbnQgaXMgc2ltcGx5IGEgYFRlbnNvcicsIGEgbGlzdCBjb250YWluaW5nIHRoYXQgYFRlbnNvcmAgaXNcbiAqICAgcmV0dXJuZWQuIElmIHRoZSBvYmplY3QgaXMgbm90IGEgYFRlbnNvcmAgb3IgZG9lcyBub3RcbiAqICAgY29udGFpbiBgVGVuc29yc2AsIGFuIGVtcHR5IGxpc3QgaXMgcmV0dXJuZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUZW5zb3JzSW5Db250YWluZXIocmVzdWx0OiBUZW5zb3JDb250YWluZXIpOiBUZW5zb3JbXSB7XG4gIGNvbnN0IGxpc3Q6IFRlbnNvcltdID0gW107XG4gIGNvbnN0IHNlZW4gPSBuZXcgU2V0PHt9fHZvaWQ+KCk7XG4gIHdhbGtUZW5zb3JDb250YWluZXIocmVzdWx0LCBsaXN0LCBzZWVuKTtcbiAgcmV0dXJuIGxpc3Q7XG59XG5cbmZ1bmN0aW9uIHdhbGtUZW5zb3JDb250YWluZXIoXG4gICAgY29udGFpbmVyOiBUZW5zb3JDb250YWluZXIsIGxpc3Q6IFRlbnNvcltdLCBzZWVuOiBTZXQ8e318dm9pZD4pOiB2b2lkIHtcbiAgaWYgKGNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBUZW5zb3IpIHtcbiAgICBsaXN0LnB1c2goY29udGFpbmVyKTtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKCFpc0l0ZXJhYmxlKGNvbnRhaW5lcikpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgLy8gSXRlcmF0aW9uIG92ZXIga2V5cyB3b3JrcyBhbHNvIGZvciBhcnJheXMuXG4gIGNvbnN0IGl0ZXJhYmxlID0gY29udGFpbmVyIGFzIFRlbnNvckNvbnRhaW5lckFycmF5O1xuICBmb3IgKGNvbnN0IGsgaW4gaXRlcmFibGUpIHtcbiAgICBjb25zdCB2YWwgPSBpdGVyYWJsZVtrXTtcbiAgICBpZiAoIXNlZW4uaGFzKHZhbCkpIHtcbiAgICAgIHNlZW4uYWRkKHZhbCk7XG4gICAgICB3YWxrVGVuc29yQ29udGFpbmVyKHZhbCwgbGlzdCwgc2Vlbik7XG4gICAgfVxuICB9XG59XG5cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmZ1bmN0aW9uIGlzSXRlcmFibGUob2JqOiBhbnkpOiBib29sZWFuIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkob2JqKSB8fCB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jztcbn1cbiJdfQ==","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ENGINE } from './engine';\nimport { inferShape } from './tensor_util_env';\nimport { arraysEqual, encodeString, flatten, isString, isTypedArray } from './util';\nconst TEST_EPSILON_FLOAT32 = 1e-3;\nexport const TEST_EPSILON_FLOAT16 = 1e-1;\nexport function expectArraysClose(actual, expected, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, epsilon));\n}\nexport function testEpsilon() {\n    return ENGINE.backend.floatPrecision() === 32 ? TEST_EPSILON_FLOAT32 :\n        TEST_EPSILON_FLOAT16;\n}\nfunction expectArraysPredicate(actual, expected, predicate) {\n    let checkClassType = true;\n    if (isTypedArray(actual) || isTypedArray(expected)) {\n        checkClassType = false;\n    }\n    if (isTypedArray(actual) && isTypedArray(expected)) {\n        checkClassType = true;\n    }\n    if (checkClassType) {\n        const aType = actual.constructor.name;\n        const bType = expected.constructor.name;\n        if (aType !== bType) {\n            throw new Error(`Arrays are of different type. Actual: ${aType}. ` +\n                `Expected: ${bType}`);\n        }\n    }\n    if (Array.isArray(actual) && Array.isArray(expected)) {\n        const actualShape = inferShape(actual);\n        const expectedShape = inferShape(expected);\n        if (!arraysEqual(actualShape, expectedShape)) {\n            throw new Error(`Arrays have different shapes. ` +\n                `Actual: [${actualShape}]. Expected: [${expectedShape}]`);\n        }\n    }\n    const actualFlat = isTypedArray(actual) ? actual : flatten(actual);\n    const expectedFlat = isTypedArray(expected) ?\n        expected :\n        flatten(expected);\n    if (actualFlat.length !== expectedFlat.length) {\n        throw new Error(`Arrays have different lengths actual: ${actualFlat.length} vs ` +\n            `expected: ${expectedFlat.length}.\\n` +\n            `Actual:   ${actualFlat}.\\n` +\n            `Expected: ${expectedFlat}.`);\n    }\n    for (let i = 0; i < expectedFlat.length; ++i) {\n        const a = actualFlat[i];\n        const e = expectedFlat[i];\n        if (!predicate(a, e)) {\n            throw new Error(`Arrays differ: actual[${i}] = ${a}, expected[${i}] = ${e}.\\n` +\n                `Actual:   ${actualFlat}.\\n` +\n                `Expected: ${expectedFlat}.`);\n        }\n    }\n    if (typeof expect !== 'undefined') {\n        expect().nothing();\n    }\n}\nexport function expectPromiseToFail(fn, done) {\n    fn().then(() => done.fail(), () => done());\n    if (typeof expect !== 'undefined') {\n        expect().nothing();\n    }\n}\nexport function expectArraysEqual(actual, expected) {\n    const exp = typeof expected === 'string' || typeof expected === 'number' ||\n        typeof expected === 'boolean' ?\n        [expected] :\n        expected;\n    if (isString(actual) || isString(actual[0]) ||\n        isString(expected) || isString(expected[0])) {\n        // tslint:disable-next-line: triple-equals\n        return expectArraysPredicate(actual, exp, (a, b) => a == b);\n    }\n    return expectArraysPredicate(actual, expected, (a, b) => areClose(a, b, 0));\n}\nexport function expectNumbersClose(a, e, epsilon) {\n    if (epsilon == null) {\n        epsilon = testEpsilon();\n    }\n    if (!areClose(a, e, epsilon)) {\n        throw new Error(`Numbers differ: actual === ${a}, expected === ${e}`);\n    }\n    if (typeof expect !== 'undefined') {\n        expect().nothing();\n    }\n}\nfunction areClose(a, e, epsilon) {\n    if (!isFinite(a) && !isFinite(e)) {\n        return true;\n    }\n    if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n        return false;\n    }\n    return true;\n}\nexport function expectValuesInRange(actual, low, high) {\n    for (let i = 0; i < actual.length; i++) {\n        if (actual[i] < low || actual[i] > high) {\n            throw new Error(`Value out of range:${actual[i]} low: ${low}, high: ${high}`);\n        }\n    }\n}\nexport function expectArrayBuffersEqual(actual, expected) {\n    // Safari does not like comparing ArrayBuffers directly. Wrapping in\n    // a Float32Array solves this issue.\n    const actualArray = new Float32Array(actual);\n    const expectedArray = new Float32Array(expected);\n    if (actualArray.length !== expectedArray.length) {\n        throw new Error('Expected ArrayBuffer to be of length ' +\n            `${expectedArray.length}, but it was ${actualArray.length}`);\n    }\n    for (let i = 0; i < expectedArray.length; i++) {\n        if (actualArray[i] !== expectedArray[i]) {\n            throw new Error(`Expected ArrayBuffer value at ${i} to be ` +\n                `${expectedArray[i]} but got ${actualArray[i]} instead`);\n        }\n    }\n}\n/** Encodes strings into utf-8 bytes. */\nexport function encodeStrings(a) {\n    for (let i = 0; i < a.length; i++) {\n        const val = a[i];\n        if (Array.isArray(val)) {\n            encodeStrings(val);\n        }\n        else {\n            a[i] = encodeString(val);\n        }\n    }\n    return a;\n}\n/** Creates an HTMLVideoElement with autoplay-friendly default settings. */\nexport function createVideoElement(source) {\n    const video = document.createElement('video');\n    if ('playsInline' in video) {\n        // tslint:disable-next-line:no-any\n        video.playsInline = true;\n    }\n    video.muted = true;\n    video.loop = true;\n    video.style.position = 'fixed';\n    video.style.left = '0px';\n    video.style.top = '0px';\n    video.preload = 'auto';\n    video.appendChild(source);\n    return new Promise(resolve => {\n        video.addEventListener('loadeddata', _ => resolve(video));\n        video.load();\n    });\n}\nexport async function play(video) {\n    await video.play();\n    if ('requestVideoFrameCallback' in video) {\n        await new Promise(resolve => {\n            // tslint:disable-next-line:no-any\n            video.requestVideoFrameCallback(resolve);\n        });\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { computeStrides, isString, rightPad, sizeFromShape } from './util';\n// Maximum number of values before we decide to show ellipsis.\nconst FORMAT_LIMIT_NUM_VALS = 20;\n// Number of first and last values to show when displaying a, b,...,y, z.\nconst FORMAT_NUM_FIRST_LAST_VALS = 3;\n// Number of significant digits to show.\nconst FORMAT_NUM_SIG_DIGITS = 7;\nexport function tensorToString(vals, shape, dtype, verbose) {\n    const strides = computeStrides(shape);\n    const padPerCol = computeMaxSizePerColumn(vals, shape, dtype, strides);\n    const rank = shape.length;\n    const valsLines = subTensorToString(vals, shape, dtype, strides, padPerCol);\n    const lines = ['Tensor'];\n    if (verbose) {\n        lines.push(`  dtype: ${dtype}`);\n        lines.push(`  rank: ${rank}`);\n        lines.push(`  shape: [${shape}]`);\n        lines.push(`  values:`);\n    }\n    lines.push(valsLines.map(l => '    ' + l).join('\\n'));\n    return lines.join('\\n');\n}\nfunction computeMaxSizePerColumn(vals, shape, dtype, strides) {\n    const n = sizeFromShape(shape);\n    const numCols = strides[strides.length - 1];\n    const padPerCol = new Array(numCols).fill(0);\n    const rank = shape.length;\n    const valuesOrTuples = dtype === 'complex64' ? createComplexTuples(vals) : vals;\n    if (rank > 1) {\n        for (let row = 0; row < n / numCols; row++) {\n            const offset = row * numCols;\n            for (let j = 0; j < numCols; j++) {\n                padPerCol[j] = Math.max(padPerCol[j], valToString(valuesOrTuples[offset + j], 0, dtype).length);\n            }\n        }\n    }\n    return padPerCol;\n}\nfunction valToString(val, pad, dtype) {\n    let valStr;\n    if (Array.isArray(val)) {\n        valStr = `${parseFloat(val[0].toFixed(FORMAT_NUM_SIG_DIGITS))} + ` +\n            `${parseFloat(val[1].toFixed(FORMAT_NUM_SIG_DIGITS))}j`;\n    }\n    else if (isString(val)) {\n        valStr = `'${val}'`;\n    }\n    else if (dtype === 'bool') {\n        valStr = boolNumToString(val);\n    }\n    else {\n        valStr = parseFloat(val.toFixed(FORMAT_NUM_SIG_DIGITS)).toString();\n    }\n    return rightPad(valStr, pad);\n}\nfunction boolNumToString(v) {\n    return v === 0 ? 'false' : 'true';\n}\nfunction subTensorToString(vals, shape, dtype, strides, padPerCol, isLast = true) {\n    const storagePerElement = dtype === 'complex64' ? 2 : 1;\n    const size = shape[0];\n    const rank = shape.length;\n    if (rank === 0) {\n        if (dtype === 'complex64') {\n            const complexTuple = createComplexTuples(vals);\n            return [valToString(complexTuple[0], 0, dtype)];\n        }\n        if (dtype === 'bool') {\n            return [boolNumToString(vals[0])];\n        }\n        return [vals[0].toString()];\n    }\n    if (rank === 1) {\n        if (size > FORMAT_LIMIT_NUM_VALS) {\n            const firstValsSize = FORMAT_NUM_FIRST_LAST_VALS * storagePerElement;\n            let firstVals = Array.from(vals.slice(0, firstValsSize));\n            let lastVals = Array.from(vals.slice((size - FORMAT_NUM_FIRST_LAST_VALS) * storagePerElement, size * storagePerElement));\n            if (dtype === 'complex64') {\n                firstVals = createComplexTuples(firstVals);\n                lastVals = createComplexTuples(lastVals);\n            }\n            return [\n                '[' +\n                    firstVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                        .join(', ') +\n                    ', ..., ' +\n                    lastVals\n                        .map((x, i) => valToString(x, padPerCol[size - FORMAT_NUM_FIRST_LAST_VALS + i], dtype))\n                        .join(', ') +\n                    ']'\n            ];\n        }\n        const displayVals = dtype === 'complex64' ? createComplexTuples(vals) :\n            Array.from(vals);\n        return [\n            '[' +\n                displayVals.map((x, i) => valToString(x, padPerCol[i], dtype))\n                    .join(', ') +\n                ']'\n        ];\n    }\n    // The array is rank 2 or more.\n    const subshape = shape.slice(1);\n    const substrides = strides.slice(1);\n    const stride = strides[0] * storagePerElement;\n    const lines = [];\n    if (size > FORMAT_LIMIT_NUM_VALS) {\n        for (let i = 0; i < FORMAT_NUM_FIRST_LAST_VALS; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, false /* isLast */));\n        }\n        lines.push('...');\n        for (let i = size - FORMAT_NUM_FIRST_LAST_VALS; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    else {\n        for (let i = 0; i < size; i++) {\n            const start = i * stride;\n            const end = start + stride;\n            lines.push(...subTensorToString(vals.slice(start, end), subshape, dtype, substrides, padPerCol, i === size - 1 /* isLast */));\n        }\n    }\n    const sep = rank === 2 ? ',' : '';\n    lines[0] = '[' + (size > 0 ? lines[0] + sep : '');\n    for (let i = 1; i < lines.length - 1; i++) {\n        lines[i] = ' ' + lines[i] + sep;\n    }\n    let newLineSep = ',\\n';\n    for (let i = 2; i < rank; i++) {\n        newLineSep += '\\n';\n    }\n    lines[lines.length - 1] =\n        ' ' + lines[lines.length - 1] + ']' + (isLast ? '' : newLineSep);\n    return lines;\n}\nfunction createComplexTuples(vals) {\n    const complexTuples = [];\n    for (let i = 0; i < vals.length; i += 2) {\n        complexTuples.push([vals[i], vals[i + 1]]);\n    }\n    return complexTuples;\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2017 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n// Workaround for: https://github.com/bazelbuild/rules_nodejs/issues/1265\n/// <reference types=\"@webgpu/types/dist\" />\nimport { getGlobal } from './global_util';\nimport { tensorToString } from './tensor_format';\nimport * as util from './util';\nimport { computeStrides, toNestedArray } from './util';\n/**\n * A mutable object, similar to `tf.Tensor`, that allows users to set values\n * at locations before converting to an immutable `tf.Tensor`.\n *\n * See `tf.buffer` for creating a tensor buffer.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class TensorBuffer {\n    constructor(shape, dtype, values) {\n        this.dtype = dtype;\n        this.shape = shape.slice();\n        this.size = util.sizeFromShape(shape);\n        if (values != null) {\n            const n = values.length;\n            util.assert(n === this.size, () => `Length of values '${n}' does not match the size ` +\n                `inferred by the shape '${this.size}'.`);\n        }\n        if (dtype === 'complex64') {\n            throw new Error(`complex64 dtype TensorBuffers are not supported. Please create ` +\n                `a TensorBuffer for the real and imaginary parts separately and ` +\n                `call tf.complex(real, imag).`);\n        }\n        this.values = values || util.getArrayFromDType(dtype, this.size);\n        this.strides = computeStrides(shape);\n    }\n    /**\n     * Sets a value in the buffer at a given location.\n     *\n     * @param value The value to set.\n     * @param locs  The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    set(value, ...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        util.assert(locs.length === this.rank, () => `The number of provided coordinates (${locs.length}) must ` +\n            `match the rank (${this.rank})`);\n        const index = this.locToIndex(locs);\n        this.values[index] = value;\n    }\n    /**\n     * Returns the value in the buffer at the provided location.\n     *\n     * @param locs The location indices.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    get(...locs) {\n        if (locs.length === 0) {\n            locs = [0];\n        }\n        let i = 0;\n        for (const loc of locs) {\n            if (loc < 0 || loc >= this.shape[i]) {\n                const msg = `Requested out of range element at ${locs}. ` +\n                    `  Buffer shape=${this.shape}`;\n                throw new Error(msg);\n            }\n            i++;\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return this.values[index];\n    }\n    locToIndex(locs) {\n        if (this.rank === 0) {\n            return 0;\n        }\n        else if (this.rank === 1) {\n            return locs[0];\n        }\n        let index = locs[locs.length - 1];\n        for (let i = 0; i < locs.length - 1; ++i) {\n            index += this.strides[i] * locs[i];\n        }\n        return index;\n    }\n    indexToLoc(index) {\n        if (this.rank === 0) {\n            return [];\n        }\n        else if (this.rank === 1) {\n            return [index];\n        }\n        const locs = new Array(this.shape.length);\n        for (let i = 0; i < locs.length - 1; ++i) {\n            locs[i] = Math.floor(index / this.strides[i]);\n            index -= locs[i] * this.strides[i];\n        }\n        locs[locs.length - 1] = index;\n        return locs;\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Creates an immutable `tf.Tensor` object from the buffer.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Creation'}\n     */\n    toTensor() {\n        return trackerFn().makeTensor(this.values, this.shape, this.dtype);\n    }\n}\n// For tracking tensor creation and disposal.\nlet trackerFn = null;\n// Used by chaining methods to call into ops.\nlet opHandler = null;\n// Used to warn about deprecated methods.\nlet deprecationWarningFn = null;\n// This here so that we can use this method on dev branches and keep the\n// functionality at master.\n// tslint:disable-next-line:no-unused-expression\n[deprecationWarningFn];\n/**\n * An external consumer can register itself as the tensor tracker. This way\n * the Tensor class can notify the tracker for every tensor created and\n * disposed.\n */\nexport function setTensorTracker(fn) {\n    trackerFn = fn;\n}\n/**\n * An external consumer can register itself as the op handler. This way the\n * Tensor class can have chaining methods that call into ops via the op\n * handler.\n */\nexport function setOpHandler(handler) {\n    opHandler = handler;\n}\n/**\n * Sets the deprecation warning function to be used by this file. This way the\n * Tensor class can be a leaf but still use the environment.\n */\nexport function setDeprecationWarningFn(fn) {\n    deprecationWarningFn = fn;\n}\n/**\n * A `tf.Tensor` object represents an immutable, multidimensional array of\n * numbers that has a shape and a data type.\n *\n * For performance reasons, functions that create tensors do not necessarily\n * perform a copy of the data passed to them (e.g. if the data is passed as a\n * `Float32Array`), and changes to the data will change the tensor. This is not\n * a feature and is not supported. To avoid this behavior, use the tensor before\n * changing the input data or create a copy with `copy = tf.add(yourTensor, 0)`.\n *\n * See `tf.tensor` for details on how to create a `tf.Tensor`.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Tensor {\n    constructor(shape, dtype, dataId, id) {\n        /** Whether this tensor has been globally kept. */\n        this.kept = false;\n        this.isDisposedInternal = false;\n        this.shape = shape.slice();\n        this.dtype = dtype || 'float32';\n        this.size = util.sizeFromShape(shape);\n        this.strides = computeStrides(shape);\n        this.dataId = dataId;\n        this.id = id;\n        this.rankType = (this.rank < 5 ? this.rank.toString() : 'higher');\n    }\n    get rank() {\n        return this.shape.length;\n    }\n    /**\n     * Returns a promise of `tf.TensorBuffer` that holds the underlying data.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async buffer() {\n        const vals = await this.data();\n        return opHandler.buffer(this.shape, this.dtype, vals);\n    }\n    /**\n     * Returns a `tf.TensorBuffer` that holds the underlying data.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    bufferSync() {\n        return opHandler.buffer(this.shape, this.dtype, this.dataSync());\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * asynchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async array() {\n        const vals = await this.data();\n        return toNestedArray(this.shape, vals, this.dtype === 'complex64');\n    }\n    /**\n     * Returns the tensor data as a nested array. The transfer of data is done\n     * synchronously.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    arraySync() {\n        return toNestedArray(this.shape, this.dataSync(), this.dtype === 'complex64');\n    }\n    /**\n     * Asynchronously downloads the values from the `tf.Tensor`. Returns a\n     * promise of `TypedArray` that resolves when the computation has finished.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    async data() {\n        this.throwIfDisposed();\n        const data = trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            const bytes = await data;\n            try {\n                return bytes.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /**\n     * Copy the tensor's data to a new GPU resource. Comparing to the `dataSync()`\n     * and `data()`, this method prevents data from being downloaded to CPU.\n     *\n     * For WebGL backend, the data will be stored on a densely packed texture.\n     * This means that the texture will use the RGBA channels to store value.\n     *\n     * For WebGPU backend, the data will be stored on a buffer. There is no\n     * parameter, so can not use a user-defined size to create the buffer.\n     *\n     * @param options:\n     *     For WebGL,\n     *         - customTexShape: Optional. If set, will use the user defined\n     *     texture shape to create the texture.\n     *\n     * @returns For WebGL backend, a GPUData contains the new texture and\n     *     its information.\n     *     {\n     *        tensorRef: The tensor that is associated with this texture,\n     *        texture: WebGLTexture,\n     *        texShape: [number, number] // [height, width]\n     *     }\n     *\n     *     For WebGPU backend, a GPUData contains the new buffer.\n     *     {\n     *        tensorRef: The tensor that is associated with this buffer,\n     *        buffer: GPUBuffer,\n     *     }\n     *\n     *     Remember to dispose the GPUData after it is used by\n     *     `res.tensorRef.dispose()`.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataToGPU(options) {\n        this.throwIfDisposed();\n        return trackerFn().readToGPU(this.dataId, options);\n    }\n    /**\n     * Synchronously downloads the values from the `tf.Tensor`. This blocks the\n     * UI thread until the values are ready, which can cause performance issues.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dataSync() {\n        this.throwIfDisposed();\n        const data = trackerFn().readSync(this.dataId);\n        if (this.dtype === 'string') {\n            try {\n                return data.map(b => util.decodeString(b));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode the string bytes into utf-8. ' +\n                    'To get the original bytes, call tensor.bytes().');\n            }\n        }\n        return data;\n    }\n    /** Returns the underlying bytes of the tensor's data. */\n    async bytes() {\n        this.throwIfDisposed();\n        const data = await trackerFn().read(this.dataId);\n        if (this.dtype === 'string') {\n            return data;\n        }\n        else {\n            return new Uint8Array(data.buffer);\n        }\n    }\n    /**\n     * Disposes `tf.Tensor` from memory.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    dispose() {\n        if (this.isDisposed) {\n            return;\n        }\n        if (this.kerasMask) {\n            this.kerasMask.dispose();\n        }\n        trackerFn().disposeTensor(this);\n        this.isDisposedInternal = true;\n    }\n    get isDisposed() {\n        return this.isDisposedInternal;\n    }\n    throwIfDisposed() {\n        if (this.isDisposed) {\n            throw new Error(`Tensor is disposed.`);\n        }\n    }\n    /**\n     * Prints the `tf.Tensor`. See `tf.print` for details.\n     *\n     * @param verbose Whether to print verbose information about the tensor,\n     *    including dtype and size.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    print(verbose = false) {\n        return opHandler.print(this, verbose);\n    }\n    /**\n     * Returns a copy of the tensor. See `tf.clone` for details.\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    clone() {\n        this.throwIfDisposed();\n        return opHandler.clone(this);\n    }\n    /**\n     * Returns a human-readable description of the tensor. Useful for logging.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    toString(verbose = false) {\n        const vals = this.dataSync();\n        return tensorToString(vals, this.shape, this.dtype, verbose);\n    }\n    cast(dtype) {\n        this.throwIfDisposed();\n        return opHandler.cast(this, dtype);\n    }\n    variable(trainable = true, name, dtype) {\n        this.throwIfDisposed();\n        return trackerFn().makeVariable(this, trainable, name, dtype);\n    }\n}\nObject.defineProperty(Tensor, Symbol.hasInstance, {\n    value: (instance) => {\n        // Implementation note: we should use properties of the object that will be\n        // defined before the constructor body has finished executing (methods).\n        // This is because when this code is transpiled by babel, babel will call\n        // classCallCheck before the constructor body is run.\n        // See https://github.com/tensorflow/tfjs/issues/3384 for backstory.\n        return !!instance && instance.data != null && instance.dataSync != null &&\n            instance.throwIfDisposed != null;\n    }\n});\nexport function getGlobalTensorClass() {\n    // Use getGlobal so that we can augment the Tensor class across package\n    // boundaries because the node resolution alg may result in different modules\n    // being returned for this file depending on the path they are loaded from.\n    return getGlobal('Tensor', () => {\n        return Tensor;\n    });\n}\n// Global side effect. Cache global reference to Tensor class\ngetGlobalTensorClass();\n/**\n * A mutable `tf.Tensor`, useful for persisting state, e.g. for training.\n *\n * @doc {heading: 'Tensors', subheading: 'Classes'}\n */\nexport class Variable extends Tensor {\n    constructor(initialValue, trainable, name, tensorId) {\n        super(initialValue.shape, initialValue.dtype, initialValue.dataId, tensorId);\n        this.trainable = trainable;\n        this.name = name;\n    }\n    /**\n     * Assign a new `tf.Tensor` to this variable. The new `tf.Tensor` must have\n     * the same shape and dtype as the old `tf.Tensor`.\n     *\n     * @param newValue New tensor to be assigned to this variable.\n     *\n     * @doc {heading: 'Tensors', subheading: 'Classes'}\n     */\n    assign(newValue) {\n        if (newValue.dtype !== this.dtype) {\n            throw new Error(`dtype of the new value (${newValue.dtype}) and ` +\n                `previous value (${this.dtype}) must match`);\n        }\n        if (!util.arraysEqual(newValue.shape, this.shape)) {\n            throw new Error(`shape of the new value (${newValue.shape}) and ` +\n                `previous value (${this.shape}) must match`);\n        }\n        trackerFn().disposeTensor(this);\n        this.dataId = newValue.dataId;\n        trackerFn().incRef(this, null /* backend */);\n    }\n    dispose() {\n        trackerFn().disposeVariable(this);\n        this.isDisposedInternal = true;\n    }\n}\nObject.defineProperty(Variable, Symbol.hasInstance, {\n    value: (instance) => {\n        return instance instanceof Tensor && instance.assign != null &&\n            instance.assign instanceof Function;\n    }\n});\n//# sourceMappingURL=data:application/json;base64,"],"names":["inferShape","val","dtype","firstElem","isTypedArray","length","usedChannels","channels","height","width","buffer","size","Array","isArray","shape","push","getBool","deepAssertShapeConsistency","indices","join","subShape","slice","i","concat","assertDtype","expectedDtype","actualDType","argName","functionName","Error","convertToTensor","x","parseAsDtype","inferredDtype","indexOf","type","constructor","name","inferredShape","values","toTypedArray","flatten","makeTensor","convertToTensorArray","arg","map","t","makeTypesMatch","a","b","cast","assertTypesMatch","isTensorInList","tensor","tensorList","some","id","getTensorsInContainer","result","list","walkTensorContainer","Set","container","seen","obj","iterable","k","has","add","TEST_EPSILON_FLOAT32","TEST_EPSILON_FLOAT16","expectArraysClose","actual","expected","epsilon","testEpsilon","expectArraysPredicate","areClose","backend","floatPrecision","predicate","checkClassType","aType","bType","actualShape","expectedShape","actualFlat","expectedFlat","e","expect","nothing","expectPromiseToFail","fn","done","then","fail","expectArraysEqual","exp","expectNumbersClose","isFinite","isNaN","Math","abs","expectValuesInRange","low","high","expectArrayBuffersEqual","actualArray","Float32Array","expectedArray","encodeStrings","encodeString","createVideoElement","source","video","document","createElement","playsInline","muted","loop","style","position","left","top","preload","appendChild","Promise","resolve","addEventListener","_","load","async","play","requestVideoFrameCallback","tensorToString","vals","verbose","strides","padPerCol","n","numCols","fill","rank","valuesOrTuples","createComplexTuples","row","offset","j","max","valToString","computeMaxSizePerColumn","valsLines","subTensorToString","lines","l","pad","valStr","parseFloat","toFixed","boolNumToString","toString","v","isLast","storagePerElement","firstValsSize","firstVals","from","lastVals","subshape","substrides","stride","start","end","sep","newLineSep","complexTuples","TensorBuffer","this","set","value","locs","index","locToIndex","get","loc","msg","indexToLoc","floor","toTensor","trackerFn","opHandler","deprecationWarningFn","setTensorTracker","setOpHandler","handler","setDeprecationWarningFn","Tensor","dataId","kept","isDisposedInternal","rankType","data","bufferSync","dataSync","array","arraySync","throwIfDisposed","read","bytes","util","decodeString","_a","dataToGPU","options","readToGPU","readSync","Uint8Array","dispose","isDisposed","kerasMask","disposeTensor","print","clone","variable","trainable","makeVariable","getGlobalTensorClass","Object","defineProperty","Symbol","hasInstance","instance","Variable","initialValue","tensorId","super","assign","newValue","incRef","disposeVariable","Function"],"sourceRoot":""}