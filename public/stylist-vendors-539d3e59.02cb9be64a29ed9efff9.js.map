{"version":3,"file":"stylist-vendors-539d3e59.02cb9be64a29ed9efff9.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchToSpaceND.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DenseBincount.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPoolGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/EluGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3DBackpropInputV2.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Acosh.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atan2.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cosh.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atan.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cast.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNativeBackpropFilter.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Ceil.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropInput.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2DBackpropFilter.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Elu.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2DBackpropFilter.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ArgMin.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Expm1.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Any.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2DBackpropInput.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ExpandDims.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Asinh.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Einsum.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cos.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv2D.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3DBackpropFilterV2.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/backend_cpu.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/base.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Atanh.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Cumsum.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Asin.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Erf.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/All.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/CropAndResize.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthToSpace.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchNorm.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool3D.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Abs.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ComplexAbs.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Exp.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Dilation2D.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Conv3D.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Clip.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/BatchMatMul.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNativeBackpropInput.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Bincount_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AvgPool3DGrad.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/DepthwiseConv2dNative.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Complex.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/AddN.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Diag.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Add.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Acos.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat_impl.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/cpu_util.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Concat.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/ArgMax.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-backend-cpu/dist/kernels/Equal.js"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, BatchToSpaceND } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { slice } from './Slice';\nimport { transpose } from './Transpose';\nexport function batchToSpaceND(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockShape, crops } = attrs;\n    assertNotComplex([x], 'batchToSpaceND');\n    const prod = blockShape.reduce((a, b) => a * b);\n    const reshaped = backend_util.getReshaped(x.shape, blockShape, prod);\n    const permuted = backend_util.getPermuted(reshaped.length, blockShape.length);\n    const reshapedPermuted = backend_util.getReshapedPermuted(x.shape, blockShape, prod);\n    const sliceBeginCoords = backend_util.getSliceBeginCoords(crops, blockShape.length);\n    const sliceSize = backend_util.getSliceSize(reshapedPermuted, crops, blockShape.length);\n    const xReshaped = reshape({ inputs: { x }, backend, attrs: { shape: reshaped } });\n    const xTransposed = transpose({ inputs: { x: xReshaped }, backend, attrs: { perm: permuted } });\n    const xTransposedReshaped = reshape({ inputs: { x: xTransposed }, backend, attrs: { shape: reshapedPermuted } });\n    const result = slice({\n        inputs: { x: xTransposedReshaped },\n        backend,\n        attrs: { begin: sliceBeginCoords, size: sliceSize }\n    });\n    backend.disposeIntermediateTensorInfo(xReshaped);\n    backend.disposeIntermediateTensorInfo(xTransposed);\n    backend.disposeIntermediateTensorInfo(xTransposedReshaped);\n    return result;\n}\nexport const batchToSpaceNDConfig = {\n    kernelName: BatchToSpaceND,\n    backendName: 'cpu',\n    kernelFunc: batchToSpaceND\n};\n//# sourceMappingURL=BatchToSpaceND.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool } from '../utils/pool_utils';\nimport { identity } from './Identity';\nexport function avgPool(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    assertNotComplex(x, 'avgPool');\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    const dilations = 1;\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, dilations), () => 'Error in avgPool: Either strides or dilations must be 1. ' +\n        `Got strides ${strides} and dilations '${dilations}'`);\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, dilations, pad, dimRoundingMode);\n    let res;\n    if (convInfo.filterWidth === 1 && convInfo.filterHeight === 1 &&\n        util.arraysEqual(convInfo.inShape, convInfo.outShape)) {\n        res = identity({ inputs: { x }, backend });\n    }\n    else {\n        const xValues = backend.data.get(x.dataId).values;\n        const strides = util.computeStrides(x.shape);\n        const buffer = pool(xValues, x.shape, x.dtype, strides, convInfo, 'avg');\n        res = backend.makeTensorInfo(convInfo.outShape, x.dtype, buffer.values);\n    }\n    return res;\n}\nexport const avgPoolConfig = {\n    kernelName: AvgPool,\n    backendName: 'cpu',\n    kernelFunc: avgPool\n};\n//# sourceMappingURL=AvgPool.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DenseBincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl, bincountReduceImpl } from './Bincount_impl';\nexport function denseBincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size, binaryOutput } = attrs;\n    if (x.shape.length === 1) {\n        const xVals = backend.data.get(x.dataId).values;\n        const weightsVals = backend.data.get(weights.dataId).values;\n        const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n        return backend.makeTensorInfo([size], weights.dtype, outVals);\n    }\n    else if (x.shape.length === 2) {\n        const xBuf = backend.bufferSync(x);\n        const weightsBuf = backend.bufferSync(weights);\n        const outBuf = bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput);\n        return backend.makeTensorInfo(outBuf.shape, weights.dtype, outBuf.values);\n    }\n    throw new Error(`Error in denseBincount: input must be at most rank 2, but got rank` +\n        `${x.shape.length}.`);\n}\nexport const denseBincountConfig = {\n    kernelName: DenseBincount,\n    backendName: 'cpu',\n    kernelFunc: denseBincount\n};\n//# sourceMappingURL=DenseBincount.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPoolGrad, backend_util, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function avgPoolGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const x = input;\n    assertNotComplex([dy, input], 'avgPoolGrad');\n    const { filterSize, strides, pad } = attrs;\n    const convInfo = backend_util.computePool2DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad);\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(x.shape, 'float32');\n    const avgMultiplier = 1 / (filterHeight * filterWidth);\n    const dyData = backend.data.get(dy.dataId).values;\n    const dyBuf = buffer(dy.shape, 'float32', dyData);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        for (let d = 0; d < convInfo.inChannels; ++d) {\n            for (let dxR = 0; dxR < convInfo.inHeight; ++dxR) {\n                for (let dxC = 0; dxC < convInfo.inWidth; ++dxC) {\n                    // Shader code begins.\n                    const dyRCorner = dxR - padTop;\n                    const dyCCorner = dxC - padLeft;\n                    let dotProd = 0;\n                    for (let wR = 0; wR < effectiveFilterHeight; wR += dilationHeight) {\n                        const dyR = (dyRCorner + wR) / strideHeight;\n                        if (dyR < 0 || dyR >= convInfo.outHeight ||\n                            Math.floor(dyR) !== dyR) {\n                            continue;\n                        }\n                        for (let wC = 0; wC < effectiveFilterWidth; wC += dilationWidth) {\n                            const dyC = (dyCCorner + wC) / strideWidth;\n                            if (dyC < 0 || dyC >= convInfo.outWidth ||\n                                Math.floor(dyC) !== dyC) {\n                                continue;\n                            }\n                            const pixel = dyBuf.get(b, dyR, dyC, d);\n                            dotProd += pixel;\n                        }\n                    }\n                    dx.set(dotProd * avgMultiplier, b, dxR, dxC, d);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const avgPoolGradConfig = {\n    kernelName: AvgPoolGrad,\n    backendName: 'cpu',\n    kernelFunc: avgPoolGrad\n};\n//# sourceMappingURL=AvgPoolGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { EluGrad, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function eluGrad(args) {\n    const { inputs, backend } = args;\n    const { dy, y } = inputs;\n    assertNotComplex([dy, y], 'eluGrad');\n    const resultValues = new Float32Array(util.sizeFromShape(y.shape));\n    const values = backend.data.get(y.dataId).values;\n    const dyValues = backend.data.get(dy.dataId).values;\n    for (let i = 0; i < values.length; ++i) {\n        const v = values[i];\n        if (v >= 1) {\n            resultValues[i] = dyValues[i];\n        }\n        else {\n            resultValues[i] = dyValues[i] * (v + 1);\n        }\n    }\n    return backend.makeTensorInfo(y.shape, 'float32', resultValues);\n}\nexport const eluGradConfig = {\n    kernelName: EluGrad,\n    backendName: 'cpu',\n    kernelFunc: eluGrad\n};\n//# sourceMappingURL=EluGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropInputV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropInputV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { pad, strides, inputShape } = attrs;\n    assertNotComplex([dy], 'conv3dBackpropInputV2');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv3DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2, dxS3] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2, fltS3] = filterStrides;\n    const { batchSize, filterDepth, filterHeight, filterWidth, inChannels, inDepth, inHeight, inWidth, outChannels, outDepth, outHeight, outWidth, strideDepth, strideHeight, strideWidth } = convInfo;\n    const frontPad = filterDepth - 1 - convInfo.padInfo.front;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            // Frames of depth\n            for (let xF = 0; xF < inDepth; ++xF) {\n                const xFCorner = xF - frontPad;\n                const xFMin = Math.max(0, Math.ceil(xFCorner / strideDepth));\n                const yFMax = Math.min(outDepth, (filterDepth + xFCorner) / strideDepth);\n                // Rows as per standard 2d matrix notation\n                for (let xR = 0; xR < inHeight; ++xR) {\n                    const xRCorner = xR - topPad;\n                    const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                    const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                    // Columns as per standard 2d matrix notation\n                    for (let xC = 0; xC < inWidth; ++xC) {\n                        const xCCorner = xC - leftPad;\n                        const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                        const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                        let dotProd = 0;\n                        for (let yF = xFMin; yF < yFMax; ++yF) {\n                            const wF = yF * strideDepth - xFCorner;\n                            for (let yR = xRMin; yR < yRMax; ++yR) {\n                                const wR = yR * strideHeight - xRCorner;\n                                for (let yC = xCMin; yC < yCMax; ++yC) {\n                                    const wC = yC * strideWidth - xCCorner;\n                                    const dyOffset = dyS0 * b + dyS1 * yF + dyS2 * yR + dyS3 * yC;\n                                    const fltOffset = fltS0 * (filterDepth - 1 - wF) +\n                                        fltS1 * (filterHeight - 1 - wR) +\n                                        fltS2 * (filterWidth - 1 - wC) + fltS3 * d1;\n                                    for (let d2 = 0; d2 < outChannels; ++d2) {\n                                        const pixel = dyValues[dyOffset + d2];\n                                        const weight = fltValues[fltOffset + d2];\n                                        dotProd += pixel * weight;\n                                    }\n                                }\n                            }\n                        }\n                        dxValues[dxS0 * b + dxS1 * xF + dxS2 * xR + dxS3 * xC + d1] =\n                            dotProd;\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv3DBackpropInputV2Config = {\n    kernelName: Conv3DBackpropInputV2,\n    backendName: 'cpu',\n    kernelFunc: conv3DBackpropInputV2\n};\n//# sourceMappingURL=Conv3DBackpropInputV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const acosh = unaryKernelFunc(Acosh, (xi) => Math.acosh(xi));\nexport const acoshConfig = {\n    kernelName: Acosh,\n    backendName: 'cpu',\n    kernelFunc: acosh,\n};\n//# sourceMappingURL=Acosh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan2 } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const atan2Impl = createSimpleBinaryKernelImpl((aValue, bValue) => Math.atan2(aValue, bValue));\nexport const atan2 = binaryKernelFunc(Atan2, atan2Impl);\nexport const atan2Config = {\n    kernelName: Atan2,\n    backendName: 'cpu',\n    kernelFunc: atan2,\n};\n//# sourceMappingURL=Atan2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cosh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const cosh = unaryKernelFunc(Cosh, (xi) => Math.cosh(xi));\nexport const coshConfig = {\n    kernelName: Cosh,\n    backendName: 'cpu',\n    kernelFunc: cosh,\n};\n//# sourceMappingURL=Cosh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atan } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const atan = unaryKernelFunc(Atan, (xi) => Math.atan(xi));\nexport const atanConfig = {\n    kernelName: Atan,\n    backendName: 'cpu',\n    kernelFunc: atan,\n};\n//# sourceMappingURL=Atan.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cast, util } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { zeros } from '../utils/zeros_impl';\nimport { complex } from './Complex';\nimport { identity } from './Identity';\nimport { real } from './Real';\nexport function cast(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { dtype } = attrs;\n    // Casting to complex64.\n    if (dtype === 'complex64') {\n        if (x.dtype === 'complex64') {\n            return identity({ inputs: { x }, backend });\n        }\n        const zerosTensorInfo = zeros(backend, x.shape, x.dtype);\n        const floatX = cast({ inputs: { x }, backend, attrs: { dtype: 'float32' } });\n        const result = complex({ inputs: { real: floatX, imag: zerosTensorInfo }, backend });\n        backend.disposeIntermediateTensorInfo(zerosTensorInfo);\n        backend.disposeIntermediateTensorInfo(floatX);\n        return result;\n    }\n    // Casting from complex64\n    if (x.dtype === 'complex64') {\n        const realPart = real({ inputs: { input: x }, backend });\n        const result = cast({ inputs: { x: realPart }, backend, attrs: { dtype } });\n        backend.disposeIntermediateTensorInfo(realPart);\n        return result;\n    }\n    if (!util.hasEncodingLoss(x.dtype, dtype)) {\n        // We don't change the underlying data, since we cast to higher\n        // precision.\n        const result = identity({ inputs: { x }, backend });\n        return { dataId: result.dataId, shape: result.shape, dtype };\n    }\n    if (dtype === 'int32') {\n        const values = backend.data.get(x.dataId).values;\n        const resultValues = Int32Array.from(values);\n        return backend.makeTensorInfo(x.shape, 'int32', resultValues);\n    }\n    if (dtype === 'bool') {\n        // This is essentially the result of notEqual(x, 0). We avoid using\n        // kernel notEqual to avoid circular dependency, i.e. binary_utils ->\n        // cast -> notEqual -> binary_utils.\n        const xVals = backend.data.get(x.dataId).values;\n        const zero = util.toTypedArray([0], x.dtype);\n        const [resultData, resultShape] = createSimpleBinaryKernelImpl((a, b) => (a !== b) ? 1 : 0)(x.shape, [], xVals, zero, 'bool');\n        return backend.makeTensorInfo(resultShape, 'bool', resultData);\n    }\n    throw new Error(`Error in Cast: failed to cast ${x.dtype} to ${dtype}`);\n}\nexport const castConfig = {\n    kernelName: Cast,\n    backendName: 'cpu',\n    kernelFunc: cast\n};\n//# sourceMappingURL=Cast.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, filterShape } = attrs;\n    assertNotComplex([x, dy], 'depthwiseConv2dNativeBackpropFilter');\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n    const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const xVals = backend.data.get(x.dataId).values;\n    const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n    const dyVals = backend.data.get(dy.dataId).values;\n    const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n        for (let wC = 0; wC < filterWidth; ++wC) {\n            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                const d1 = Math.trunc(d2 / chMul);\n                const dm = d2 % chMul;\n                let dotProd = 0;\n                for (let b = 0; b < convInfo.batchSize; ++b) {\n                    for (let yR = yRMin; yR < yRMax; ++yR) {\n                        const xR = wR + yR * strideHeight - topPad;\n                        for (let yC = yCMin; yC < yCMax; ++yC) {\n                            const xC = wC + yC * strideWidth - leftPad;\n                            dotProd += xBuf.get(b, xR, xC, d1) *\n                                dyBuf.get(b, yR, yC, d2);\n                        }\n                    }\n                }\n                dW.set(dotProd, wR, wC, d1, dm);\n            }\n        }\n    }\n    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const depthwiseConv2dNativeBackpropFilterConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNativeBackpropFilter\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropFilter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Ceil } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const ceilImpl = createSimpleUnaryImpl((xi) => Math.ceil(xi));\nexport const ceil = unaryKernelFuncFromImpl(Ceil, ceilImpl);\nexport const ceilConfig = {\n    kernelName: Ceil,\n    backendName: 'cpu',\n    kernelFunc: ceil,\n};\n//# sourceMappingURL=Ceil.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropInput, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropInputConfig = {\n    kernelName: Dilation2DBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter, dy } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n        const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropInput}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n        const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n        // The computed gradients has the same dimensions as the input:\n        // [batch, inputHeight, inputCols, inChannel]\n        const gradients = util.makeZerosNestedTypedArray(x.shape, x.dtype);\n        // In the case of multiple argmax branches, we only back-propagate along the\n        // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n        // similarly to the max-pooling backward routines.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        let hInMax = (hBeg < 0) ? 0 : hBeg;\n                        let wInMax = (wBeg < 0) ? 0 : wBeg;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                            hInMax = hIn;\n                                            wInMax = wIn;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        gradients[b][hInMax][wInMax][d] += $dy[b][hOut][wOut][d];\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), x.shape, x.dtype);\n        return { dataId, shape: x.shape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2DBackpropInput.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropFilter, TensorBuffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropFilter(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, dataFormat, dimRoundingMode, filterShape } = attrs;\n    assertNotComplex([x, dy], 'conv2dBackpropFilter');\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const { strideHeight, strideWidth, filterHeight, filterWidth } = convInfo;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const dW = new TensorBuffer(convInfo.filterShape, 'float32');\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    const xVals = backend.data.get(x.dataId).values;\n    const dyVals = backend.data.get(dy.dataId).values;\n    const xBuf = new TensorBuffer(x.shape, x.dtype, xVals);\n    const dyBuf = new TensorBuffer(dy.shape, dy.dtype, dyVals);\n    for (let wR = 0; wR < filterHeight; ++wR) {\n        const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n        const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n        for (let wC = 0; wC < filterWidth; ++wC) {\n            const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n            const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n            for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                    let dotProd = 0;\n                    for (let b = 0; b < convInfo.batchSize; ++b) {\n                        for (let yR = yRMin; yR < yRMax; ++yR) {\n                            const xR = wR + yR * strideHeight - topPad;\n                            for (let yC = yCMin; yC < yCMax; ++yC) {\n                                const xC = wC + yC * strideWidth - leftPad;\n                                if (isChannelsLast) {\n                                    dotProd += xBuf.get(b, xR, xC, d1) *\n                                        dyBuf.get(b, yR, yC, d2);\n                                }\n                                else {\n                                    dotProd += xBuf.get(b, d1, xR, xC) *\n                                        dyBuf.get(b, d2, yR, yC);\n                                }\n                            }\n                        }\n                    }\n                    dW.set(dotProd, wR, wC, d1, d2);\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dW.shape, dW.dtype, dW.values);\n}\nexport const conv2DBackpropFilterConfig = {\n    kernelName: Conv2DBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: conv2DBackpropFilter\n};\n//# sourceMappingURL=Conv2DBackpropFilter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Elu } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const elu = unaryKernelFunc(Elu, (xi) => xi >= 0 ? xi : (Math.exp(xi) - 1));\nexport const eluConfig = {\n    kernelName: Elu,\n    backendName: 'cpu',\n    kernelFunc: elu,\n};\n//# sourceMappingURL=Elu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2DBackpropFilter, util } from '@tensorflow/tfjs-core';\nexport const dilation2dBackpropFilterConfig = {\n    kernelName: Dilation2DBackpropFilter,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter, dy } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const $x = util.toNestedArray(x.shape, cpuBackend.data.get(x.dataId).values);\n        const $filter = util.toNestedArray(filter.shape, cpuBackend.data.get(filter.dataId).values);\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        util.assert(dy.rank === outShape.length, () => `Error in ${Dilation2DBackpropFilter}, dy ` +\n            `must have the same rank as output ${outShape.length}, but got ` +\n            `${dy.rank}`);\n        const $dy = util.toNestedArray(outShape, cpuBackend.data.get(dy.dataId).values);\n        // The computed filter gradients has the same dimensions as the filter:\n        // [filterHeight, filterWidth, depth]\n        const gradients = util.makeZerosNestedTypedArray(filter.shape, filter.dtype);\n        // In the case of multiple argmax branches, we only back-propagate along the\n        // last branch, i.e., the one with largest value of `h * filter_cols + w`,\n        // similarly to the max-pooling backward routines.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        let hMax = 0;\n                        let wMax = 0;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const val = $x[b][hIn][wIn][d] + $filter[h][w][d];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                            hMax = h;\n                                            wMax = w;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        gradients[hMax][wMax][d] += $dy[b][hOut][wOut][d];\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(gradients, x.dtype), filter.shape, filter.dtype);\n        return { dataId, shape: filter.shape, dtype: filter.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2DBackpropFilter.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMin, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMin(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    assertNotComplex(x, 'argMin');\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    axes = [axes[0]];\n    backend_util.assertAxesAreInnerMostDims('argMin', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const outSize = util.sizeFromShape(outShape);\n    const vals = util.makeZerosTypedArray(outSize, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let min = aVals[offset];\n        let minIndex = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value < min) {\n                min = value;\n                minIndex = j;\n            }\n        }\n        vals[i] = minIndex;\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMinConfig = {\n    kernelName: ArgMin,\n    backendName: 'cpu',\n    kernelFunc: argMin\n};\n//# sourceMappingURL=ArgMin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Expm1 } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expm1Impl = createSimpleUnaryImpl((xi) => Math.expm1(xi));\nexport const expm1 = unaryKernelFuncFromImpl(Expm1, expm1Impl);\nexport const expm1Config = {\n    kernelName: Expm1,\n    backendName: 'cpu',\n    kernelFunc: expm1,\n};\n//# sourceMappingURL=Expm1.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Any, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function any(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'any');\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('any', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let anyVal = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            anyVal = anyVal || value;\n        }\n        vals[i] = anyVal;\n    }\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo($x);\n    }\n    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n    if (keepDims) {\n        const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        const reshapedResult = reshape({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });\n        backend.disposeIntermediateTensorInfo(result);\n        return reshapedResult;\n    }\n    return result;\n}\nexport const anyConfig = {\n    kernelName: Any,\n    backendName: 'cpu',\n    kernelFunc: any\n};\n//# sourceMappingURL=Any.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2DBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2DBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { inputShape, strides, pad, dataFormat, dimRoundingMode } = attrs;\n    assertNotComplex([dy, filter], 'conv2dBackpropInput');\n    const filterStrides = util.computeStrides(filter.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    let $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, 1 /* dilations */, pad, dimRoundingMode, false, $dataFormat);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    $dataFormat = convInfo.dataFormat;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const isChannelsLast = $dataFormat === 'channelsLast';\n    const xBatchStride = dx.strides[0];\n    const xRowStride = isChannelsLast ? dx.strides[1] : dx.strides[2];\n    const xColStride = isChannelsLast ? dx.strides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : dx.strides[1];\n    const yBatchStride = dyStrides[0];\n    const yRowStride = isChannelsLast ? dyStrides[1] : dyStrides[2];\n    const yColStride = isChannelsLast ? dyStrides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : dyStrides[1];\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = yBatchStride * b + yRowStride * yR + yColStride * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let d2 = 0; d2 < outChannels; ++d2) {\n                                const pixel = dyValues[dyOffset + yChannelStride * d2];\n                                const weight = fltValues[fltOffset + d2];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    const dxOffset = xBatchStride * b + xRowStride * xR +\n                        xColStride * xC + xChannelStride * d1;\n                    dxValues[dxOffset] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const conv2DBackpropInputConfig = {\n    kernelName: Conv2DBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: conv2DBackpropInput\n};\n//# sourceMappingURL=Conv2DBackpropInput.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ExpandDims, util } from '@tensorflow/tfjs-core';\nimport { reshape } from './Reshape';\nexport function expandDims(args) {\n    const { inputs, backend, attrs } = args;\n    const { input } = inputs;\n    const { dim } = attrs;\n    const inputRank = input.shape.length;\n    const newShape = input.shape.slice();\n    let $dim = dim;\n    if (dim < 0) {\n        // Negative value is counted from the tail of rank.\n        util.assert(-(inputRank + 1) <= dim, () => `Axis must be in the interval [${-(inputRank + 1)}, ${inputRank}]`);\n        $dim = inputRank + dim + 1;\n    }\n    newShape.splice($dim, 0, 1);\n    return reshape({ inputs: { x: input }, backend, attrs: { shape: newShape } });\n}\nexport const expandDimsConfig = {\n    kernelName: ExpandDims,\n    backendName: 'cpu',\n    kernelFunc: expandDims\n};\n//# sourceMappingURL=ExpandDims.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asinh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const asinh = unaryKernelFunc(Asinh, (xi) => Math.asinh(xi));\nexport const asinhConfig = {\n    kernelName: Asinh,\n    backendName: 'cpu',\n    kernelFunc: asinh,\n};\n//# sourceMappingURL=Asinh.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Einsum, util } from '@tensorflow/tfjs-core';\nimport { multiply } from './Multiply';\nimport { reshape } from './Reshape';\nimport { sum } from './Sum';\nimport { transpose } from './Transpose';\nexport function einsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { equation } = attrs;\n    const tensors = inputs;\n    const { allDims, summedDims, idDims } = backend_util.decodeEinsumEquation(equation, tensors.length);\n    backend_util.checkEinsumDimSizes(allDims.length, idDims, tensors);\n    const { path, steps } = backend_util.getEinsumComputePath(summedDims, idDims);\n    const nSteps = steps.length;\n    let out = null;\n    let numDimsRemaining = allDims.length;\n    const tensorsToDispose = [];\n    for (let i = 0; i < nSteps; ++i) {\n        for (const idTerm of steps[i]) {\n            const { permutationIndices: perm, expandDims: dimsToExpand } = backend_util.getEinsumPermutation(numDimsRemaining, idDims[idTerm]);\n            let x;\n            if (backend_util.isIdentityPermutation(perm)) {\n                x = tensors[idTerm];\n            }\n            else {\n                x = transpose({ inputs: { x: tensors[idTerm] }, backend, attrs: { perm } });\n                tensorsToDispose.push(x);\n            }\n            const targetShape = x.shape.slice();\n            for (let k = 0; k < dimsToExpand.length; ++k) {\n                targetShape.splice(dimsToExpand[k], 0, 1);\n            }\n            if (!util.arraysEqual(x.shape, targetShape)) {\n                x = reshape({ inputs: { x }, backend, attrs: { shape: targetShape } });\n                tensorsToDispose.push(x);\n            }\n            if (out === null) {\n                out = x;\n            }\n            else {\n                // tslint:disable-next-line: no-unnecessary-type-assertion\n                out = multiply({ inputs: { a: x, b: out }, backend });\n                tensorsToDispose.push(out);\n            }\n        }\n        if (i < nSteps - 1) {\n            if (path[i] >= 0) {\n                out = sum({\n                    inputs: { x: out },\n                    backend,\n                    attrs: {\n                        axis: path[i] - (allDims.length - numDimsRemaining),\n                        keepDims: false\n                    }\n                });\n                tensorsToDispose.push(out);\n            }\n            numDimsRemaining--;\n        }\n    }\n    // Clean up intermediate tensors.\n    for (const tensorInfo of tensorsToDispose) {\n        if (tensorInfo === out) {\n            continue;\n        }\n        backend.disposeIntermediateTensorInfo(tensorInfo);\n    }\n    return out;\n}\nexport const einsumConfig = {\n    kernelName: Einsum,\n    backendName: 'cpu',\n    kernelFunc: einsum\n};\n//# sourceMappingURL=Einsum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Cos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const cos = unaryKernelFunc(Cos, (xi) => Math.cos(xi));\nexport const cosConfig = {\n    kernelName: Cos,\n    backendName: 'cpu',\n    kernelFunc: cos,\n};\n//# sourceMappingURL=Cos.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv2D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv2D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dataFormat, dilations, dimRoundingMode } = attrs;\n    assertNotComplex([x, filter], 'conv2d');\n    const $dataFormat = backend_util.convertConv2DDataFormat(dataFormat);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, dilations, pad, dimRoundingMode, false /* depthwise */, $dataFormat);\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const padLeft = convInfo.padInfo.left;\n    const padTop = convInfo.padInfo.top;\n    const isChannelsLast = convInfo.dataFormat === 'channelsLast';\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const xBatchStride = xStrides[0];\n    const xRowStride = isChannelsLast ? xStrides[1] : xStrides[2];\n    const xColStride = isChannelsLast ? xStrides[2] : 1;\n    const xChannelStride = isChannelsLast ? 1 : xStrides[1];\n    const yBatchStride = y.strides[0];\n    const yRowStride = isChannelsLast ? y.strides[1] : y.strides[2];\n    const yColStride = isChannelsLast ? y.strides[2] : 1;\n    const yChannelStride = isChannelsLast ? 1 : y.strides[1];\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xBatchStride;\n        const yOffset1 = b * yBatchStride;\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset2 = yOffset1 + yR * yRowStride;\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const xR = xRCorner + wR * dilationHeight;\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                    continue;\n                }\n                const wOffset1 = wR * filterStrides[0];\n                const xOffset2 = xOffset1 + xR * xRowStride;\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const yOffset3 = yOffset2 + yC * yColStride;\n                    const xCCorner = yC * convInfo.strideWidth - padLeft;\n                    for (let wC = 0; wC < filterWidth; ++wC) {\n                        const xC = xCCorner + wC * dilationWidth;\n                        if (xC < 0 || xC >= convInfo.inWidth) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wC * filterStrides[1];\n                        const xOffset3 = xOffset2 + xC * xColStride;\n                        let wOffset3 = wOffset2;\n                        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                            const xVal = xVals[xOffset3 + d1 * xChannelStride];\n                            for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                yVals[yOffset3 + d2 * yChannelStride] +=\n                                    xVal * wVals[wOffset3 + d2];\n                            }\n                            wOffset3 += convInfo.outChannels;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, yVals);\n}\nexport const conv2DConfig = {\n    kernelName: Conv2D,\n    backendName: 'cpu',\n    kernelFunc: conv2D\n};\n//# sourceMappingURL=Conv2D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3DBackpropFilterV2, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3DBackpropFilterV2(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, dy } = inputs;\n    const { strides, pad, filterShape } = attrs;\n    assertNotComplex([x, dy], 'conv3dBackpropFilterV2');\n    const xStrides = util.computeStrides(x.shape);\n    const dyStrides = util.computeStrides(dy.shape);\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filterShape, strides, 1 /* dilations */, pad);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dw = new TensorBuffer(convInfo.filterShape, 'float32');\n    const dwValues = dw.values;\n    const [dwS0, dwS1, dwS2, dwS3] = dw.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2, dyS3] = dyStrides;\n    const xValues = backend.data.get(x.dataId).values;\n    const [xS0, xS1, xS2, xS3] = xStrides;\n    const frontPad = convInfo.padInfo.front;\n    const leftPad = convInfo.padInfo.left;\n    const topPad = convInfo.padInfo.top;\n    for (let wF = 0; wF < filterDepth; ++wF) {\n        const yFMin = Math.max(0, Math.ceil((frontPad - wF) / strideDepth));\n        const yFMax = Math.min(convInfo.outDepth, (convInfo.inDepth + frontPad - wF) / strideDepth);\n        const wOffset1 = wF * dwS0;\n        for (let wR = 0; wR < filterHeight; ++wR) {\n            const yRMin = Math.max(0, Math.ceil((topPad - wR) / strideHeight));\n            const yRMax = Math.min(convInfo.outHeight, (convInfo.inHeight + topPad - wR) / strideHeight);\n            const wOffset2 = wR * dwS1 + wOffset1;\n            for (let wC = 0; wC < filterWidth; ++wC) {\n                const yCMin = Math.max(0, Math.ceil((leftPad - wC) / strideWidth));\n                const yCMax = Math.min(convInfo.outWidth, (convInfo.inWidth + leftPad - wC) / strideWidth);\n                const wOffset3 = wC * dwS2 + wOffset2;\n                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                    const wOffset4 = d1 * dwS3 + wOffset3;\n                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                        let dotProd = 0;\n                        for (let b = 0; b < convInfo.batchSize; ++b) {\n                            const xOffset1 = b * xS0;\n                            const yOffset1 = b * dyS0;\n                            for (let yF = yFMin; yF < yFMax; ++yF) {\n                                const xF = wF + yF * strideDepth - frontPad;\n                                const xOffset2 = xF * xS1 + xOffset1;\n                                const yOffset2 = yF * dyS1 + yOffset1;\n                                for (let yR = yRMin; yR < yRMax; ++yR) {\n                                    const xR = wR + yR * strideHeight - topPad;\n                                    const xOffset3 = xR * xS2 + xOffset2;\n                                    const yOffset3 = yR * dyS2 + yOffset2;\n                                    for (let yC = yCMin; yC < yCMax; ++yC) {\n                                        const xC = wC + yC * strideWidth - leftPad;\n                                        const xOffset4 = xC * xS3 + xOffset3;\n                                        const yOffset4 = yC * dyS3 + yOffset3;\n                                        dotProd += xValues[xOffset4 + d1] * dyValues[yOffset4 + d2];\n                                    }\n                                }\n                            }\n                        }\n                        dwValues[wOffset4 + d2] = dotProd;\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dw.shape, dw.dtype, dw.values);\n}\nexport const conv3DBackpropFilterV2Config = {\n    kernelName: Conv3DBackpropFilterV2,\n    backendName: 'cpu',\n    kernelFunc: conv3DBackpropFilterV2\n};\n//# sourceMappingURL=Conv3DBackpropFilterV2.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Bincount } from '@tensorflow/tfjs-core';\nimport { bincountImpl } from './Bincount_impl';\nexport function bincount(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, weights } = inputs;\n    const { size } = attrs;\n    const xVals = backend.data.get(x.dataId).values;\n    const weightsVals = backend.data.get(weights.dataId).values;\n    const outVals = bincountImpl(xVals, weightsVals, weights.dtype, weights.shape, size);\n    return backend.makeTensorInfo([size], weights.dtype, outVals);\n}\nexport const bincountConfig = {\n    kernelName: Bincount,\n    backendName: 'cpu',\n    kernelFunc: bincount\n};\n//# sourceMappingURL=Bincount.js.map","/**\n * @license\n * Copyright 2021 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, buffer, DataStorage, engine, env, kernel_impls, KernelBackend, util } from '@tensorflow/tfjs-core';\nconst whereImpl = kernel_impls.whereImpl;\nimport { assertNotComplex } from './cpu_util';\nexport class MathBackendCPU extends KernelBackend {\n    constructor() {\n        super();\n        this.blockSize = 48;\n        this.firstUse = true;\n        this.data = new DataStorage(this, engine());\n    }\n    nextDataId() {\n        return MathBackendCPU.nextDataId++;\n    }\n    write(values, shape, dtype) {\n        if (this.firstUse) {\n            this.firstUse = false;\n            if (env().get('IS_NODE')) {\n                backend_util.warn('\\n============================\\n' +\n                    'Hi there 👋. Looks like you are running TensorFlow.js in ' +\n                    'Node.js. To speed things up dramatically, install our node ' +\n                    'backend, which binds to TensorFlow C++, by running ' +\n                    'npm i @tensorflow/tfjs-node, ' +\n                    'or npm i @tensorflow/tfjs-node-gpu if you have CUDA. ' +\n                    'Then call require(\\'@tensorflow/tfjs-node\\'); (-gpu ' +\n                    'suffix for CUDA) at the start of your program. ' +\n                    'Visit https://github.com/tensorflow/tfjs-node for more details.' +\n                    '\\n============================');\n            }\n        }\n        const dataId = { id: this.nextDataId() };\n        this.data.set(dataId, { values, dtype, refCount: 1 });\n        return dataId;\n    }\n    /**\n     * Create a data bucket in cpu backend.\n     * @param shape Shape of the `TensorInfo`.\n     * @param dtype DType of the `TensorInfo`.\n     * @param values The value of the `TensorInfo` stored as a flattened array.\n     */\n    makeTensorInfo(shape, dtype, values) {\n        let outId;\n        if (dtype === 'string' && values != null && values.length > 0 &&\n            util.isString(values[0])) {\n            const encodedValues = values.map(d => util.encodeString(d));\n            outId = this.write(encodedValues, shape, dtype);\n        }\n        else {\n            outId = this.write(values, shape, dtype);\n        }\n        return { dataId: outId, shape, dtype };\n    }\n    /** Return refCount of a `TensorData`. */\n    refCount(dataId) {\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            return tensorData.refCount;\n        }\n        return 0;\n    }\n    /** Increase refCount of a `TensorData`. */\n    incRef(dataId) {\n        const tensorData = this.data.get(dataId);\n        tensorData.refCount++;\n    }\n    /** Decrease refCount of a `TensorData`. */\n    decRef(dataId) {\n        if (this.data.has(dataId)) {\n            const tensorData = this.data.get(dataId);\n            tensorData.refCount--;\n        }\n    }\n    move(dataId, values, shape, dtype, refCount) {\n        this.data.set(dataId, { values, dtype, refCount });\n    }\n    numDataIds() {\n        return this.data.numDataIds();\n    }\n    async read(dataId) {\n        return this.readSync(dataId);\n    }\n    readSync(dataId) {\n        const { dtype, complexTensorInfos } = this.data.get(dataId);\n        if (dtype === 'complex64') {\n            const realValues = this.readSync(complexTensorInfos.real.dataId);\n            const imagValues = this.readSync(complexTensorInfos.imag.dataId);\n            return backend_util.mergeRealAndImagArrays(realValues, imagValues);\n        }\n        return this.data.get(dataId).values;\n    }\n    bufferSync(t) {\n        const data = this.readSync(t.dataId);\n        let decodedData = data;\n        if (t.dtype === 'string') {\n            try {\n                // Decode the bytes into string.\n                decodedData = data.map(d => util.decodeString(d));\n            }\n            catch (_a) {\n                throw new Error('Failed to decode encoded string bytes into utf-8');\n            }\n        }\n        return buffer(t.shape, t.dtype, decodedData);\n    }\n    makeOutput(values, shape, dtype) {\n        const dataId = this.write(values, shape, dtype);\n        return engine().makeTensorFromDataId(dataId, shape, dtype, this);\n    }\n    /**\n     * Dispose the memory if the dataId has 0 refCount. Return true if the memory\n     * is released or memory is not managed in this backend, false if memory is\n     * not cleared.\n     * @param dataId\n     * @oaram force Optional, remove the data regardless of refCount\n     */\n    disposeData(dataId, force = false) {\n        if (this.data.has(dataId)) {\n            this.data.get(dataId).refCount--;\n            if (!force && this.data.get(dataId).refCount > 0) {\n                return false;\n            }\n            const { complexTensorInfos } = this.data.get(dataId);\n            if (complexTensorInfos != null) {\n                this.disposeData(complexTensorInfos.real.dataId, true);\n                this.disposeData(complexTensorInfos.imag.dataId, true);\n            }\n            this.data.delete(dataId);\n        }\n        return true;\n    }\n    disposeIntermediateTensorInfo(tensorInfo) {\n        this.disposeData(tensorInfo.dataId);\n    }\n    async time(f) {\n        const start = util.now();\n        f();\n        const kernelMs = util.now() - start;\n        return { kernelMs };\n    }\n    memory() {\n        return {\n            // Unreliable due to automatic gc. The numbers above are cumulative.\n            unreliable: true,\n            reasons: ['The reported memory is an upper bound. Due to automatic garbage ' +\n                    'collection, the true allocated memory may be less.']\n        };\n    }\n    where(condition) {\n        assertNotComplex([condition], 'where');\n        const condVals = this.readSync(condition.dataId);\n        return whereImpl(condition.shape, condVals);\n    }\n    dispose() { }\n    floatPrecision() {\n        return 32;\n    }\n    /** Returns the smallest representable number.  */\n    epsilon() {\n        return super.epsilon();\n    }\n}\nMathBackendCPU.nextDataId = 0;\n//# sourceMappingURL=backend_cpu.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\n/*\n * base.ts contains all the exports from tfjs-backend-cpu\n * without auto-kernel registration\n */\nimport { registerBackend } from '@tensorflow/tfjs-core';\nimport { MathBackendCPU } from './backend_cpu';\nimport * as shared from './shared';\nexport { MathBackendCPU } from './backend_cpu';\nexport { version as version_cpu } from './version';\nexport { shared };\n// Side effects for default initialization of MathBackendCPU\nregisterBackend('cpu', () => new MathBackendCPU(), 1 /* priority */);\n//# sourceMappingURL=base.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Atanh } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const atanh = unaryKernelFunc(Atanh, (xi) => Math.atanh(xi));\nexport const atanhConfig = {\n    kernelName: Atanh,\n    backendName: 'cpu',\n    kernelFunc: atanh,\n};\n//# sourceMappingURL=Atanh.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Cumsum, upcastType, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function cumsum(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, exclusive, reverse } = attrs;\n    assertNotComplex(x, 'cumsum');\n    const permutation = backend_util.getAxesPermutation([axis], x.shape.length);\n    let $x = x;\n    if (permutation != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutation } });\n    }\n    const permutedAxis = backend_util.getInnerMostAxes(1, x.shape.length)[0];\n    if (permutedAxis !== $x.shape.length - 1) {\n        throw new Error(`backend.cumsum in CPU expects an inner-most ` +\n            `axis=${$x.shape.length - 1} but got axis=${permutedAxis}`);\n    }\n    const resultDtype = upcastType($x.dtype, 'int32');\n    const vals = util.makeZerosTypedArray(util.sizeFromShape($x.shape), resultDtype);\n    const aVals = backend.data.get($x.dataId).values;\n    const finalDim = $x.shape[$x.shape.length - 1];\n    const indexAdjuster = reverse ?\n        (i, j) => i + finalDim - j - 1 :\n        (i, j) => i + j;\n    for (let i = 0; i < aVals.length; i += finalDim) {\n        for (let j = 0; j < finalDim; j++) {\n            const idx = indexAdjuster(i, j);\n            if (j === 0) {\n                vals[idx] = exclusive ? 0 : aVals[idx];\n            }\n            else {\n                const prevIdx = indexAdjuster(i, j - 1);\n                vals[idx] = exclusive ? aVals[prevIdx] + vals[prevIdx] :\n                    aVals[idx] + vals[prevIdx];\n            }\n        }\n    }\n    const result = backend.makeTensorInfo($x.shape, resultDtype, vals);\n    if (permutation != null) {\n        const reversePermutation = backend_util.getUndoAxesPermutation(permutation);\n        const reverseTransposedResult = transpose({ inputs: { x: result }, backend, attrs: { perm: reversePermutation } });\n        backend.disposeIntermediateTensorInfo(result);\n        backend.disposeIntermediateTensorInfo($x);\n        return reverseTransposedResult;\n    }\n    return result;\n}\nexport const cumsumConfig = {\n    kernelName: Cumsum,\n    backendName: 'cpu',\n    kernelFunc: cumsum\n};\n//# sourceMappingURL=Cumsum.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Asin } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const asin = unaryKernelFunc(Asin, (xi) => Math.asin(xi));\nexport const asinConfig = {\n    kernelName: Asin,\n    backendName: 'cpu',\n    kernelFunc: asin,\n};\n//# sourceMappingURL=Asin.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Erf } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nconst p = backend_util.ERF_P;\nconst a1 = backend_util.ERF_A1;\nconst a2 = backend_util.ERF_A2;\nconst a3 = backend_util.ERF_A3;\nconst a4 = backend_util.ERF_A4;\nconst a5 = backend_util.ERF_A5;\nexport const erf = unaryKernelFunc(Erf, (xi) => {\n    const sign = Math.sign(xi);\n    const v = Math.abs(xi);\n    const t = 1.0 / (1.0 + p * v);\n    return sign *\n        (1.0 -\n            (((((a5 * t + a4) * t) + a3) * t + a2) * t + a1) * t *\n                Math.exp(-v * v));\n});\nexport const erfConfig = {\n    kernelName: Erf,\n    backendName: 'cpu',\n    kernelFunc: erf,\n};\n//# sourceMappingURL=Erf.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { All, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nimport { transpose } from './Transpose';\nexport function all(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis, keepDims } = attrs;\n    assertNotComplex(x, 'all');\n    const origAxes = util.parseAxisParam(axis, x.shape);\n    let axes = origAxes;\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        axes = backend_util.getInnerMostAxes(axes.length, x.shape.length);\n    }\n    backend_util.assertAxesAreInnerMostDims('all', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const vals = util.makeZerosTypedArray(util.sizeFromShape(outShape), $x.dtype);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let all = aVals[offset];\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            all = all && value;\n        }\n        vals[i] = all;\n    }\n    if (permutedAxes != null) {\n        backend.disposeIntermediateTensorInfo($x);\n    }\n    const result = backend.makeTensorInfo(outShape, $x.dtype, vals);\n    if (keepDims) {\n        const expandedShape = backend_util.expandShapeToKeepDim(outShape, origAxes);\n        const reshapedResult = reshape({ inputs: { x: result }, backend, attrs: { shape: expandedShape } });\n        backend.disposeIntermediateTensorInfo(result);\n        return reshapedResult;\n    }\n    return result;\n}\nexport const allConfig = {\n    kernelName: All,\n    backendName: 'cpu',\n    kernelFunc: all\n};\n//# sourceMappingURL=All.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, CropAndResize, util } from '@tensorflow/tfjs-core';\nexport function cropAndResize(args) {\n    const { inputs, backend, attrs } = args;\n    const { image, boxes, boxInd } = inputs;\n    const { cropSize, method, extrapolationValue } = attrs;\n    const [batch, imageHeight, imageWidth, numChannels] = image.shape;\n    const numBoxes = boxes.shape[0];\n    const [cropHeight, cropWidth] = cropSize;\n    const output = buffer([numBoxes, cropHeight, cropWidth, numChannels], 'float32');\n    const boxVals = backend.data.get(boxes.dataId).values;\n    const boxIndVals = backend.data.get(boxInd.dataId).values;\n    const imageVals = backend.data.get(image.dataId).values;\n    const inStride = util.computeStrides(image.shape); // to calculate flat indexes into image\n    const outStride = util.computeStrides(output.shape); // to calculate flat indexes into output\n    // Reference implementation\n    // tslint:disable-next-line:max-line-length\n    // https://github.com/tensorflow/tensorflow/blob/master/tensorflow/core/kernels/crop_and_resize_op.cc\n    for (let b = 0; b < numBoxes; b++) {\n        const startInd = b * 4;\n        const y1 = boxVals[startInd];\n        const x1 = boxVals[startInd + 1];\n        const y2 = boxVals[startInd + 2];\n        const x2 = boxVals[startInd + 3];\n        const bInd = boxIndVals[b];\n        if (bInd >= batch) {\n            continue;\n        }\n        const heightScale = (cropHeight > 1) ? (y2 - y1) * (imageHeight - 1) / (cropHeight - 1) : 0;\n        const widthScale = (cropWidth > 1) ? (x2 - x1) * (imageWidth - 1) / (cropWidth - 1) : 0;\n        for (let y = 0; y < cropHeight; y++) {\n            const yInd = (cropHeight > 1) ?\n                y1 * (imageHeight - 1) + y * (heightScale) :\n                0.5 * (y1 + y2) * (imageHeight - 1);\n            if (yInd < 0 || yInd > imageHeight - 1) {\n                for (let x = 0; x < cropWidth; x++) {\n                    for (let c = 0; c < numChannels; c++) {\n                        const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = extrapolationValue;\n                    }\n                }\n                continue;\n            }\n            if (method === 'bilinear') {\n                const topInd = Math.floor(yInd);\n                const bottomInd = Math.ceil(yInd);\n                const yLerp = yInd - topInd;\n                for (let x = 0; x < cropWidth; x++) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const leftInd = Math.floor(xInd);\n                    const rightInd = Math.ceil(xInd);\n                    const xLerp = xInd - leftInd;\n                    for (let c = 0; c < numChannels; c++) {\n                        let ind = c + leftInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + topInd * inStride[1] +\n                            bInd * inStride[0];\n                        const topRight = imageVals[ind];\n                        ind = c + leftInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomLeft = imageVals[ind];\n                        ind = c + rightInd * inStride[2] + bottomInd * inStride[1] +\n                            bInd * inStride[0];\n                        const bottomRight = imageVals[ind];\n                        const top = topLeft + (topRight - topLeft) * xLerp;\n                        const bottom = bottomLeft + (bottomRight - bottomLeft) * xLerp;\n                        ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[ind] = top + ((bottom - top) * yLerp);\n                    }\n                }\n            }\n            else { // method == \"nearest\"\n                for (let x = 0; x < cropWidth; ++x) {\n                    const xInd = (cropWidth > 1) ?\n                        x1 * (imageWidth - 1) + x * widthScale :\n                        0.5 * (x1 + x2) * (imageWidth - 1);\n                    if (xInd < 0 || xInd > imageWidth - 1) {\n                        for (let c = 0; c < numChannels; c++) {\n                            const ind = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                            output.values[ind] = extrapolationValue;\n                        }\n                        continue;\n                    }\n                    const closestX = Math.round(xInd);\n                    const closestY = Math.round(yInd);\n                    for (let c = 0; c < numChannels; c++) {\n                        const inInd = c + closestX * inStride[2] + closestY * inStride[1] +\n                            bInd * inStride[0];\n                        const outInd = c + x * outStride[2] + y * outStride[1] + b * outStride[0];\n                        output.values[outInd] = imageVals[inInd];\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(output.shape, output.dtype, output.values);\n}\nexport const cropAndResizeConfig = {\n    kernelName: CropAndResize,\n    backendName: 'cpu',\n    kernelFunc: cropAndResize\n};\n//# sourceMappingURL=CropAndResize.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { DepthToSpace, util } from '@tensorflow/tfjs-core';\nexport function depthToSpace(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { blockSize, dataFormat } = attrs;\n    util.assert(dataFormat === 'NHWC', () => `Only NHWC dataFormat supported on CPU for depthToSpace. Got ${dataFormat}`);\n    util.assert(blockSize > 1, () => `blockSize should be > 1 for depthToSpace, but was: ${blockSize}`);\n    const batchSize = x.shape[0];\n    const inputHeight = x.shape[1];\n    const inputWidth = x.shape[2];\n    const inputDepth = x.shape[3];\n    const outputHeight = inputHeight * blockSize;\n    const outputWidth = inputWidth * blockSize;\n    const outputDepth = inputDepth / (blockSize * blockSize);\n    const xValues = backend.data.get(x.dataId).values;\n    const result = new Float32Array(batchSize * outputHeight * outputWidth * outputDepth);\n    let outputIdx = 0;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let h = 0; h < outputHeight; ++h) {\n            const inH = Math.floor(h / blockSize);\n            const offsetH = (h % blockSize);\n            for (let w = 0; w < outputWidth; ++w) {\n                const inW = Math.floor(w / blockSize);\n                const offsetW = (w % blockSize);\n                const offsetD = (offsetH * blockSize + offsetW) * outputDepth;\n                for (let d = 0; d < outputDepth; ++d) {\n                    const inD = d + offsetD;\n                    const inputIdx = inD + inputDepth * (inW + inputWidth * (inH + inputHeight * b));\n                    result[outputIdx++] = xValues[inputIdx];\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo([batchSize, outputHeight, outputWidth, outputDepth], x.dtype, result);\n}\nexport const depthToSpaceConfig = {\n    kernelName: DepthToSpace,\n    backendName: 'cpu',\n    kernelFunc: depthToSpace\n};\n//# sourceMappingURL=DepthToSpace.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { FusedBatchNorm, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function batchNorm(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, scale, offset, mean, variance } = inputs;\n    util.assert(mean.shape.length === variance.shape.length, () => 'Batch normalization gradient requires mean and variance to have ' +\n        'equal ranks.');\n    util.assert(offset == null || mean.shape.length === offset.shape.length, () => 'Batch normalization gradient requires mean and offset to have ' +\n        'equal ranks.');\n    util.assert(scale == null || mean.shape.length === scale.shape.length, () => 'Batch normalization gradient requires mean and scale to have ' +\n        'equal ranks.');\n    assertNotComplex([x, mean, variance, scale, offset], 'batchNorm');\n    let { varianceEpsilon } = attrs;\n    if (varianceEpsilon == null) {\n        varianceEpsilon = 0.001;\n    }\n    const xVals = backend.data.get(x.dataId).values;\n    const mVals = backend.data.get(mean.dataId).values;\n    const varVals = backend.data.get(variance.dataId).values;\n    const sVals = scale ? backend.data.get(scale.dataId).values :\n        new Float32Array([1]);\n    const offVals = offset ?\n        backend.data.get(offset.dataId).values :\n        new Float32Array([0]);\n    const outVals = new Float32Array(xVals.length);\n    const offValsLength = offVals.length;\n    const sValsLength = sVals.length;\n    const varValsLength = varVals.length;\n    const mValsLength = mVals.length;\n    let offi = 0;\n    let mi = 0;\n    let si = 0;\n    let vi = 0;\n    for (let i = 0; i < xVals.length; ++i) {\n        outVals[i] = offVals[offi++] +\n            (xVals[i] - mVals[mi++]) * sVals[si++] /\n                Math.sqrt(varVals[vi++] + varianceEpsilon);\n        if (offi >= offValsLength) {\n            offi = 0;\n        }\n        if (mi >= mValsLength) {\n            mi = 0;\n        }\n        if (si >= sValsLength) {\n            si = 0;\n        }\n        if (vi >= varValsLength) {\n            vi = 0;\n        }\n    }\n    return backend.makeTensorInfo(x.shape, x.dtype, outVals);\n}\nexport const batchNormConfig = {\n    kernelName: FusedBatchNorm,\n    backendName: 'cpu',\n    kernelFunc: batchNorm,\n};\n//# sourceMappingURL=BatchNorm.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3D, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { pool3d } from '../utils/pool_utils';\nexport function avgPool3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode, dataFormat } = attrs;\n    assertNotComplex(x, 'avgPool3d');\n    const convInfo = backend_util.computePool3DInfo(x.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode, dataFormat);\n    const xValues = backend.data.get(x.dataId).values;\n    const outBuf = pool3d(xValues, x.shape, x.dtype, util.computeStrides(x.shape), convInfo, 'avg');\n    return backend.makeTensorInfo(outBuf.shape, 'float32', outBuf.values);\n}\nexport const avgPool3DConfig = {\n    kernelName: AvgPool3D,\n    backendName: 'cpu',\n    kernelFunc: avgPool3D\n};\n//# sourceMappingURL=AvgPool3D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Abs, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function simpleAbsImpl(vals) {\n    const resultValues = new Float32Array(vals.length);\n    for (let i = 0; i < vals.length; ++i) {\n        resultValues[i] = Math.abs(vals[i]);\n    }\n    return resultValues;\n}\nexport const abs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    assertNotComplex(x, 'abs');\n    let resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const values = cpuBackend.data.get(x.dataId).values;\n    resultValues = simpleAbsImpl(values);\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const absConfig = {\n    kernelName: Abs,\n    backendName: 'cpu',\n    kernelFunc: abs,\n};\n//# sourceMappingURL=Abs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ComplexAbs, util } from '@tensorflow/tfjs-core';\nexport const complexAbs = (args) => {\n    const { x } = args.inputs;\n    const cpuBackend = args.backend;\n    const resultValues = new Float32Array(util.sizeFromShape(x.shape));\n    const complexVals = cpuBackend.data.get(x.dataId);\n    const real = complexVals.complexTensorInfos.real;\n    const imag = complexVals.complexTensorInfos.imag;\n    const realVals = cpuBackend.data.get(real.dataId).values;\n    const imagVals = cpuBackend.data.get(imag.dataId).values;\n    for (let i = 0; i < realVals.length; i++) {\n        const real = realVals[i];\n        const imag = imagVals[i];\n        resultValues[i] = Math.hypot(real, imag);\n    }\n    return cpuBackend.makeOutput(resultValues, x.shape, 'float32');\n};\nexport const complexAbsConfig = {\n    kernelName: ComplexAbs,\n    backendName: 'cpu',\n    kernelFunc: complexAbs,\n};\n//# sourceMappingURL=ComplexAbs.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Exp } from '@tensorflow/tfjs-core';\nimport { createSimpleUnaryImpl } from '../utils/unary_impl';\nimport { unaryKernelFuncFromImpl } from '../utils/unary_utils';\nexport const expImpl = createSimpleUnaryImpl((xi) => Math.exp(xi));\nexport const exp = unaryKernelFuncFromImpl(Exp, expImpl);\nexport const expConfig = {\n    kernelName: Exp,\n    backendName: 'cpu',\n    kernelFunc: exp,\n};\n//# sourceMappingURL=Exp.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Dilation2D, util } from '@tensorflow/tfjs-core';\nexport const dilation2dConfig = {\n    kernelName: Dilation2D,\n    backendName: 'cpu',\n    kernelFunc: ({ inputs, backend, attrs }) => {\n        const { x, filter } = inputs;\n        const { strides, pad, dilations } = attrs;\n        const cpuBackend = backend;\n        const xVals = cpuBackend.data.get(x.dataId).values;\n        const xRank = x.shape.length;\n        const filterVals = cpuBackend.data.get(filter.dataId).values;\n        const filterRank = filter.shape.length;\n        const { batchSize, inHeight, inWidth, inChannels, outHeight, outWidth, padInfo, strideHeight, strideWidth, filterHeight, filterWidth, dilationHeight, dilationWidth, outShape } = backend_util.computeDilation2DInfo(x.shape, filter.shape, strides, pad, 'NHWC' /* dataFormat */, dilations);\n        const outSize = util.sizeFromShape(outShape);\n        const outRank = outShape.length;\n        const outputVals = util.getArrayFromDType(x.dtype, outSize);\n        // Upsampling the input by fill in `dilation size - 1` values between each\n        // input value.\n        // This implementation follows the TF c++ implementation:\n        // https://github.com/tensorflow/tensorflow/blob/d9a3a849edc198e90172bc58eb293de457f9d986/tensorflow/core/kernels/dilation_ops.cc\n        for (let b = 0; b < batchSize; ++b) {\n            for (let hOut = 0; hOut < outHeight; ++hOut) {\n                const hBeg = hOut * strideHeight - padInfo.top;\n                for (let wOut = 0; wOut < outWidth; ++wOut) {\n                    const wBeg = wOut * strideWidth - padInfo.left;\n                    for (let d = 0; d < inChannels; ++d) {\n                        let curVal = Number.MIN_SAFE_INTEGER;\n                        for (let h = 0; h < filterHeight; ++h) {\n                            const hIn = hBeg + h * dilationHeight;\n                            if (hIn >= 0 && hIn < inHeight) {\n                                for (let w = 0; w < filterWidth; ++w) {\n                                    const wIn = wBeg + w * dilationWidth;\n                                    if (wIn >= 0 && wIn < inWidth) {\n                                        const xIndex = util.locToIndex([b, hIn, wIn, d], xRank, util.computeStrides(x.shape));\n                                        const filterIndex = util.locToIndex([h, w, d], filterRank, util.computeStrides(filter.shape));\n                                        const val = xVals[xIndex] + filterVals[filterIndex];\n                                        if (val > curVal) {\n                                            curVal = val;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        const outputIndex = util.locToIndex([b, hOut, wOut, d], outRank, util.computeStrides(outShape));\n                        outputVals[outputIndex] = curVal;\n                    }\n                }\n            }\n        }\n        const dataId = cpuBackend.write(util.toTypedArray(outputVals, x.dtype), outShape, x.dtype);\n        return { dataId, shape: outShape, dtype: x.dtype };\n    }\n};\n//# sourceMappingURL=Dilation2D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Conv3D, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function conv3D(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations } = attrs;\n    assertNotComplex([x, filter], 'conv3d');\n    const convInfo = backend_util.computeConv3DInfo(x.shape, filter.shape, strides, dilations, pad);\n    const { filterDepth, filterHeight, filterWidth, dilationDepth, dilationHeight, dilationWidth, padInfo } = convInfo;\n    const padFront = padInfo.front;\n    const padLeft = padInfo.left;\n    const padTop = padInfo.top;\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xStrides[0];\n        const yOffset1 = b * y.strides[0];\n        for (let yF = 0; yF < convInfo.outDepth; ++yF) {\n            const yOffset2 = yOffset1 + yF * y.strides[1];\n            const xFCorner = yF * convInfo.strideDepth - padFront;\n            for (let wF = 0; wF < filterDepth; ++wF) {\n                const xF = xFCorner + wF * dilationDepth;\n                if (xF < 0 || xF >= convInfo.inDepth) {\n                    continue;\n                }\n                const wOffset1 = wF * filterStrides[0];\n                const xOffset2 = xOffset1 + xF * xStrides[1];\n                for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n                    const yOffset3 = yOffset2 + yR * y.strides[2];\n                    const xRCorner = yR * convInfo.strideHeight - padTop;\n                    for (let wR = 0; wR < filterHeight; ++wR) {\n                        const xR = xRCorner + wR * dilationHeight;\n                        if (xR < 0 || xR >= convInfo.inHeight) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wR * filterStrides[1];\n                        const xOffset3 = xOffset2 + xR * xStrides[2];\n                        for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                            const yOffset4 = yOffset3 + yC * convInfo.outChannels;\n                            const xCCorner = yC * convInfo.strideWidth - padLeft;\n                            for (let wC = 0; wC < filterWidth; ++wC) {\n                                const xC = xCCorner + wC * dilationWidth;\n                                if (xC < 0 || xC >= convInfo.inWidth) {\n                                    continue;\n                                }\n                                const wOffset3 = wOffset2 + wC * filterStrides[2];\n                                const xOffset4 = xOffset3 + xC * convInfo.inChannels;\n                                let wOffset4 = wOffset3;\n                                for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                                    const xVal = xVals[xOffset4 + d1];\n                                    for (let d2 = 0; d2 < convInfo.outChannels; ++d2) {\n                                        yVals[yOffset4 + d2] += xVal * wVals[wOffset4 + d2];\n                                    }\n                                    wOffset4 += convInfo.outChannels;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const conv3DConfig = {\n    kernelName: Conv3D,\n    backendName: 'cpu',\n    kernelFunc: conv3D\n};\n//# sourceMappingURL=Conv3D.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ClipByValue } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const clip = unaryKernelFunc(ClipByValue, (xi, attrs) => {\n    const clipAttrs = attrs;\n    if (xi > clipAttrs.clipValueMax) {\n        return clipAttrs.clipValueMax;\n    }\n    return xi < clipAttrs.clipValueMin ? clipAttrs.clipValueMin : xi;\n});\nexport const clipConfig = {\n    kernelName: ClipByValue,\n    backendName: 'cpu',\n    kernelFunc: clip,\n};\n//# sourceMappingURL=Clip.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { BatchMatMul, buffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { reshape } from './Reshape';\nexport function batchMatMul(args) {\n    const { inputs, backend, attrs } = args;\n    const { a, b } = inputs;\n    const { transposeA, transposeB } = attrs;\n    assertNotComplex([a, b], 'matMul');\n    const aRank = a.shape.length;\n    const bRank = b.shape.length;\n    const innerShapeA = transposeA ? a.shape[aRank - 2] : a.shape[aRank - 1];\n    const innerShapeB = transposeB ? b.shape[bRank - 1] : b.shape[bRank - 2];\n    const outerShapeA = transposeA ? a.shape[aRank - 1] : a.shape[aRank - 2];\n    const outerShapeB = transposeB ? b.shape[bRank - 2] : b.shape[bRank - 1];\n    const outerDimsA = a.shape.slice(0, -2);\n    const outerDimsB = b.shape.slice(0, -2);\n    const batchDimA = util.sizeFromShape(outerDimsA);\n    const batchDimB = util.sizeFromShape(outerDimsB);\n    const batchDimsCompatible = batchDimA === batchDimB || batchDimA === 1 || batchDimB === 1;\n    util.assert(aRank >= 2 && bRank >= 2 && batchDimsCompatible, () => `Error in matMul: the input batch dimensions must either be the ` +\n        `same or at least one input batch dimension must be 1. Got input ` +\n        `batch dimensions of (${outerDimsA}) and (${outerDimsB}).`);\n    const outShapeOuterDims = batchDimA > batchDimB ? a.shape.slice(0, -2) : b.shape.slice(0, -2);\n    const outShape = outShapeOuterDims.concat([outerShapeA, outerShapeB]);\n    util.assert(innerShapeA === innerShapeB, () => `Error in matMul: inner shapes (${innerShapeA}) and (` +\n        `${innerShapeB}) of Tensors with shapes ${a.shape} and ` +\n        `${b.shape} and transposeA=${transposeA}` +\n        ` and transposeB=${transposeB} must match.`);\n    const a3dShape = transposeA ? [batchDimA, innerShapeA, outerShapeA] :\n        [batchDimA, outerShapeA, innerShapeA];\n    const b3dShape = transposeB ? [batchDimB, outerShapeB, innerShapeB] :\n        [batchDimB, innerShapeB, outerShapeB];\n    // The rest of the implementation is designed to operate on rank-3 tensors\n    const a3d = reshape({ inputs: { x: a }, backend, attrs: { shape: a3dShape } });\n    const b3d = reshape({ inputs: { x: b }, backend, attrs: { shape: b3dShape } });\n    const sharedDim = transposeA ? a3d.shape[1] : a3d.shape[2];\n    const leftDim = transposeA ? a3d.shape[2] : a3d.shape[1];\n    const rightDim = transposeB ? b3d.shape[1] : b3d.shape[2];\n    const batchDim = Math.max(batchDimA, batchDimB);\n    const a3dValues = backend.data.get(a3d.dataId).values;\n    const b3dValues = backend.data.get(b3d.dataId).values;\n    const a3dStrides = util.computeStrides(a3d.shape);\n    const b3dStrides = util.computeStrides(b3d.shape);\n    const [aBatch, aOuterStep, aInnerStep] = transposeA ?\n        [a3dStrides[0], 1, a3dStrides[1]] :\n        [a3dStrides[0], a3dStrides[1], 1];\n    const [bInnerStep, bOuterStep, bBatch] = transposeB ?\n        [1, b3dStrides[1], b3dStrides[0]] :\n        [b3dStrides[1], 1, b3dStrides[0]];\n    const size = leftDim * rightDim;\n    const result = buffer([batchDim, leftDim, rightDim], a3d.dtype);\n    const resVals = result.values;\n    const blockSize = backend.blockSize;\n    for (let bi = 0; bi < batchDim; bi++) {\n        for (let i0 = 0; i0 < leftDim; i0 += blockSize) {\n            for (let j0 = 0; j0 < rightDim; j0 += blockSize) {\n                for (let k0 = 0; k0 < sharedDim; k0 += blockSize) {\n                    // for when blockSize doesn't evenly divide the input\n                    const iBlock = Math.min(i0 + blockSize, leftDim);\n                    const jBlock = Math.min(j0 + blockSize, rightDim);\n                    const kBlock = Math.min(k0 + blockSize, sharedDim);\n                    for (let i = i0; i < iBlock; i++) {\n                        for (let j = j0; j < jBlock; j++) {\n                            let sum = 0.0;\n                            for (let k = k0; k < kBlock; k++) {\n                                const batchOffsetA = Math.min(bi, batchDimA - 1) * aBatch;\n                                const batchOffsetB = Math.min(bi, batchDimB - 1) * bBatch;\n                                const aVal = a3dValues[batchOffsetA + i * aOuterStep + k * aInnerStep];\n                                const bVal = b3dValues[k * bInnerStep + j * bOuterStep + batchOffsetB];\n                                sum += aVal * bVal;\n                            }\n                            resVals[bi * size + (i * rightDim + j)] += sum;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    backend.disposeIntermediateTensorInfo(a3d);\n    backend.disposeIntermediateTensorInfo(b3d);\n    // set correct shape on output.\n    return backend.makeTensorInfo(outShape, result.dtype, result.values);\n}\nexport const batchMatMulConfig = {\n    kernelName: BatchMatMul,\n    backendName: 'cpu',\n    kernelFunc: batchMatMul,\n};\n//# sourceMappingURL=BatchMatMul.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNativeBackpropInput, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNativeBackpropInput(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, filter } = inputs;\n    const { strides, dilations, pad, dimRoundingMode, inputShape } = attrs;\n    assertNotComplex([dy, filter], 'depthwiseConv2DNativeBackpropInput');\n    const dyStrides = util.computeStrides(dy.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    const convInfo = backend_util.computeConv2DInfo(inputShape, filter.shape, strides, dilations, pad, dimRoundingMode, true /* depthwise */);\n    const dx = new TensorBuffer(convInfo.inShape, 'float32');\n    const dxValues = dx.values;\n    const [dxS0, dxS1, dxS2] = dx.strides;\n    const dyValues = backend.data.get(dy.dataId).values;\n    const [dyS0, dyS1, dyS2] = dyStrides;\n    const fltValues = backend.data.get(filter.dataId).values;\n    const [fltS0, fltS1, fltS2] = filterStrides;\n    const { batchSize, filterHeight, filterWidth, inChannels, inHeight, inWidth, outChannels, outHeight, outWidth, strideHeight, strideWidth } = convInfo;\n    const topPad = filterHeight - 1 - convInfo.padInfo.top;\n    const leftPad = filterWidth - 1 - convInfo.padInfo.left;\n    const chMul = outChannels / inChannels;\n    for (let b = 0; b < batchSize; ++b) {\n        for (let d1 = 0; d1 < inChannels; ++d1) {\n            for (let xR = 0; xR < inHeight; ++xR) {\n                const xRCorner = xR - topPad;\n                const xRMin = Math.max(0, Math.ceil(xRCorner / strideHeight));\n                const yRMax = Math.min(outHeight, (filterHeight + xRCorner) / strideHeight);\n                for (let xC = 0; xC < inWidth; ++xC) {\n                    const xCCorner = xC - leftPad;\n                    const xCMin = Math.max(0, Math.ceil(xCCorner / strideWidth));\n                    const yCMax = Math.min(outWidth, (filterWidth + xCCorner) / strideWidth);\n                    let dotProd = 0;\n                    for (let yR = xRMin; yR < yRMax; ++yR) {\n                        const wR = yR * strideHeight - xRCorner;\n                        for (let yC = xCMin; yC < yCMax; ++yC) {\n                            const wC = yC * strideWidth - xCCorner;\n                            const dyOffset = dyS0 * b + dyS1 * yR + dyS2 * yC;\n                            const fltOffset = fltS0 * (filterHeight - 1 - wR) +\n                                fltS1 * (filterWidth - 1 - wC) + fltS2 * d1;\n                            for (let dm = 0; dm < chMul; ++dm) {\n                                const d2 = d1 * chMul + dm;\n                                const pixel = dyValues[dyOffset + d2];\n                                const weight = fltValues[fltOffset + dm];\n                                dotProd += pixel * weight;\n                            }\n                        }\n                    }\n                    dxValues[dxS0 * b + dxS1 * xR + dxS2 * xC + d1] = dotProd;\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const depthwiseConv2dNativeBackpropInputConfig = {\n    kernelName: DepthwiseConv2dNativeBackpropInput,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNativeBackpropInput\n};\n//# sourceMappingURL=DepthwiseConv2dNativeBackpropInput.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, util } from '@tensorflow/tfjs-core';\nexport function bincountImpl(xVals, weightsVals, weightsDtype, weightsShape, size) {\n    const weightsSize = util.sizeFromShape(weightsShape);\n    const outVals = util.makeZerosTypedArray(size, weightsDtype);\n    for (let i = 0; i < xVals.length; i++) {\n        const value = xVals[i];\n        if (value < 0) {\n            throw new Error('Input x must be non-negative!');\n        }\n        if (value >= size) {\n            continue;\n        }\n        if (weightsSize > 0) {\n            outVals[value] += weightsVals[i];\n        }\n        else {\n            outVals[value] += 1;\n        }\n    }\n    return outVals;\n}\nexport function bincountReduceImpl(xBuf, weightsBuf, size, binaryOutput = false) {\n    const numRows = xBuf.shape[0];\n    const numCols = xBuf.shape[1];\n    const outBuf = buffer([numRows, size], weightsBuf.dtype);\n    for (let i = 0; i < numRows; i++) {\n        for (let j = 0; j < numCols; j++) {\n            const value = xBuf.get(i, j);\n            if (value < 0) {\n                throw new Error('Input x must be non-negative!');\n            }\n            if (value >= size) {\n                continue;\n            }\n            if (binaryOutput) {\n                outBuf.set(1, i, value);\n            }\n            else {\n                if (weightsBuf.size > 0) {\n                    outBuf.set(outBuf.get(i, value) + weightsBuf.get(i, j), i, value);\n                }\n                else {\n                    outBuf.set(outBuf.get(i, value) + 1, i, value);\n                }\n            }\n        }\n    }\n    return outBuf;\n}\n//# sourceMappingURL=Bincount_impl.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AvgPool3DGrad, backend_util, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function avgPool3DGrad(args) {\n    const { inputs, backend, attrs } = args;\n    const { dy, input } = inputs;\n    const { filterSize, strides, pad, dimRoundingMode } = attrs;\n    assertNotComplex([dy, input], 'avgPool3DGrad');\n    const convInfo = backend_util.computePool3DInfo(input.shape, filterSize, strides, 1 /* dilations */, pad, dimRoundingMode);\n    const strideDepth = convInfo.strideDepth;\n    const strideHeight = convInfo.strideHeight;\n    const strideWidth = convInfo.strideWidth;\n    const filterDepth = convInfo.filterDepth;\n    const filterHeight = convInfo.filterHeight;\n    const filterWidth = convInfo.filterWidth;\n    const dilationDepth = convInfo.dilationDepth;\n    const dilationHeight = convInfo.dilationHeight;\n    const dilationWidth = convInfo.dilationWidth;\n    const effectiveFilterDepth = convInfo.effectiveFilterDepth;\n    const effectiveFilterHeight = convInfo.effectiveFilterHeight;\n    const effectiveFilterWidth = convInfo.effectiveFilterWidth;\n    const padFront = effectiveFilterDepth - 1 - convInfo.padInfo.front;\n    const padLeft = effectiveFilterWidth - 1 - convInfo.padInfo.left;\n    const padTop = effectiveFilterHeight - 1 - convInfo.padInfo.top;\n    const dx = buffer(input.shape, 'float32');\n    const avgMultiplier = 1 / (filterDepth * filterHeight * filterWidth);\n    const dyBuf = backend.bufferSync(dy);\n    for (let batch = 0; batch < convInfo.batchSize; ++batch) {\n        for (let channel = 0; channel < convInfo.inChannels; ++channel) {\n            for (let dxDepth = 0; dxDepth < convInfo.inDepth; ++dxDepth) {\n                for (let dxRow = 0; dxRow < convInfo.inHeight; ++dxRow) {\n                    for (let dxCol = 0; dxCol < convInfo.inWidth; ++dxCol) {\n                        // Shader code begins.\n                        const dyDepthCorner = dxDepth - padFront;\n                        const dyRowCorner = dxRow - padTop;\n                        const dyColCorner = dxCol - padLeft;\n                        let dotProd = 0;\n                        for (let wDepth = 0; wDepth < effectiveFilterDepth; wDepth += dilationDepth) {\n                            const dyDepth = (dyDepthCorner + wDepth) / strideDepth;\n                            if (dyDepth < 0 || dyDepth >= convInfo.outDepth ||\n                                Math.floor(dyDepth) !== dyDepth) {\n                                continue;\n                            }\n                            for (let wRow = 0; wRow < effectiveFilterHeight; wRow += dilationHeight) {\n                                const dyRow = (dyRowCorner + wRow) / strideHeight;\n                                if (dyRow < 0 || dyRow >= convInfo.outHeight ||\n                                    Math.floor(dyRow) !== dyRow) {\n                                    continue;\n                                }\n                                for (let wCol = 0; wCol < effectiveFilterWidth; wCol += dilationWidth) {\n                                    const dyCol = (dyColCorner + wCol) / strideWidth;\n                                    if (dyCol < 0 || dyCol >= convInfo.outWidth ||\n                                        Math.floor(dyCol) !== dyCol) {\n                                        continue;\n                                    }\n                                    const pixel = dyBuf.get(batch, dyDepth, dyRow, dyCol, channel);\n                                    dotProd += pixel;\n                                }\n                            }\n                        }\n                        dx.set(dotProd * avgMultiplier, batch, dxDepth, dxRow, dxCol, channel);\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(dx.shape, dx.dtype, dx.values);\n}\nexport const avgPool3DGradConfig = {\n    kernelName: AvgPool3DGrad,\n    backendName: 'cpu',\n    kernelFunc: avgPool3DGrad\n};\n//# sourceMappingURL=AvgPool3DGrad.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, DepthwiseConv2dNative, TensorBuffer, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function depthwiseConv2dNative(args) {\n    const { inputs, backend, attrs } = args;\n    const { x, filter } = inputs;\n    const { strides, pad, dilations, dimRoundingMode } = attrs;\n    assertNotComplex([x, filter], 'depthwiseConv2DNative');\n    const xStrides = util.computeStrides(x.shape);\n    const filterStrides = util.computeStrides(filter.shape);\n    let $dilations = dilations;\n    if ($dilations == null) {\n        $dilations = [1, 1];\n    }\n    util.assert(backend_util.eitherStridesOrDilationsAreOne(strides, $dilations), () => 'Error in depthwiseConv2d: Either strides or dilations must be ' +\n        `1. Got strides ${strides} and dilations '${$dilations}'`);\n    const convInfo = backend_util.computeConv2DInfo(x.shape, filter.shape, strides, $dilations, pad, dimRoundingMode, true /* depthwise */);\n    const { filterHeight, filterWidth, dilationHeight, dilationWidth, padInfo } = convInfo;\n    const padLeft = padInfo.left;\n    const padTop = padInfo.top;\n    const chMul = convInfo.outChannels / convInfo.inChannels;\n    const y = new TensorBuffer(convInfo.outShape, x.dtype);\n    const xVals = backend.data.get(x.dataId).values;\n    const wVals = backend.data.get(filter.dataId).values;\n    const yVals = y.values;\n    for (let b = 0; b < convInfo.batchSize; ++b) {\n        const xOffset1 = b * xStrides[0];\n        const yOffset1 = b * y.strides[0];\n        for (let yR = 0; yR < convInfo.outHeight; ++yR) {\n            const yOffset2 = yOffset1 + yR * y.strides[1];\n            const xRCorner = yR * convInfo.strideHeight - padTop;\n            for (let wR = 0; wR < filterHeight; ++wR) {\n                const xR = xRCorner + wR * dilationHeight;\n                if (xR < 0 || xR >= convInfo.inHeight) {\n                    continue;\n                }\n                const wOffset1 = wR * filterStrides[0];\n                const xOffset2 = xOffset1 + xR * xStrides[1];\n                for (let yC = 0; yC < convInfo.outWidth; ++yC) {\n                    const yOffset3 = yOffset2 + yC * y.strides[2];\n                    const xCCorner = yC * convInfo.strideWidth - padLeft;\n                    for (let wC = 0; wC < filterWidth; ++wC) {\n                        const xC = xCCorner + wC * dilationWidth;\n                        if (xC < 0 || xC >= convInfo.inWidth) {\n                            continue;\n                        }\n                        const wOffset2 = wOffset1 + wC * filterStrides[1];\n                        const xOffset3 = xOffset2 + xC * convInfo.inChannels;\n                        let yOffset4 = yOffset3;\n                        let wOffset3 = wOffset2;\n                        for (let d1 = 0; d1 < convInfo.inChannels; ++d1) {\n                            const xVal = xVals[xOffset3 + d1];\n                            for (let q = 0; q < chMul; ++q) {\n                                yVals[yOffset4 + q] += xVal * wVals[wOffset3 + q];\n                            }\n                            yOffset4 += chMul;\n                            wOffset3 += chMul;\n                        }\n                    }\n                }\n            }\n        }\n    }\n    return backend.makeTensorInfo(y.shape, y.dtype, y.values);\n}\nexport const depthwiseConv2dNativeConfig = {\n    kernelName: DepthwiseConv2dNative,\n    backendName: 'cpu',\n    kernelFunc: depthwiseConv2dNative\n};\n//# sourceMappingURL=DepthwiseConv2dNative.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Complex } from '@tensorflow/tfjs-core';\nexport function complex(args) {\n    const { inputs, backend } = args;\n    const { real, imag } = inputs;\n    const realVals = backend.data.get(real.dataId).values;\n    const imagVals = backend.data.get(imag.dataId).values;\n    const complexInfo = backend.makeTensorInfo(real.shape, 'complex64');\n    const complex = backend.data.get(complexInfo.dataId);\n    // The complex tensor owns the underlying real and imag tensorInfos, only the\n    // complex tensor tracks refCount, when complexData is disposed the\n    // underlying tensorData will be disposed.\n    complex.complexTensorInfos = {\n        real: backend.makeTensorInfo(real.shape, 'float32', realVals),\n        imag: backend.makeTensorInfo(imag.shape, 'float32', imagVals)\n    };\n    return complexInfo;\n}\nexport const complexConfig = {\n    kernelName: Complex,\n    backendName: 'cpu',\n    kernelFunc: complex\n};\n//# sourceMappingURL=Complex.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { AddN, buffer } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nexport function addN(args) {\n    const { inputs, backend } = args;\n    const tensors = inputs;\n    assertNotComplex(inputs, 'addN');\n    const vals = tensors.map(t => backend.data.get(t.dataId).values);\n    const outBuf = buffer(tensors[0].shape, tensors[0].dtype);\n    const outVals = outBuf.values;\n    for (let i = 0; i < tensors.length; i++) {\n        const currVals = vals[i];\n        for (let j = 0; j < outVals.length; j++) {\n            outVals[j] += currVals[j];\n        }\n    }\n    return backend.makeTensorInfo(outBuf.shape, outBuf.dtype, outBuf.values);\n}\nexport const addNConfig = {\n    kernelName: AddN,\n    backendName: 'cpu',\n    kernelFunc: addN\n};\n//# sourceMappingURL=AddN.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { buffer, Diag, util } from '@tensorflow/tfjs-core';\nexport function diag(args) {\n    const { inputs, backend } = args;\n    const { x } = inputs;\n    const xSize = util.sizeFromShape(x.shape);\n    const xVals = backend.data.get(x.dataId).values;\n    const outBuf = buffer([xSize, xSize], x.dtype);\n    const vals = outBuf.values;\n    for (let i = 0; i < xVals.length; i++) {\n        vals[i * xSize + i] = xVals[i];\n    }\n    const outShape = [...x.shape, ...x.shape];\n    return backend.makeTensorInfo(outShape, outBuf.dtype, outBuf.values);\n}\nexport const diagConfig = {\n    kernelName: Diag,\n    backendName: 'cpu',\n    kernelFunc: diag\n};\n//# sourceMappingURL=Diag.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Add } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc, createComplexBinaryKernelImpl } from '../utils/binary_utils';\nexport const addImpl = createSimpleBinaryKernelImpl(((a, b) => a + b));\nexport const addComplexImpl = createComplexBinaryKernelImpl(((aReal, aImag, bReal, bImag) => {\n    return { real: aReal + bReal, imag: aImag + bImag };\n}));\nexport const add = binaryKernelFunc(Add, addImpl, addComplexImpl);\nexport const addConfig = {\n    kernelName: Add,\n    backendName: 'cpu',\n    kernelFunc: add\n};\n//# sourceMappingURL=Add.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the License);\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an AS IS BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Acos } from '@tensorflow/tfjs-core';\nimport { unaryKernelFunc } from '../utils/unary_utils';\nexport const acos = unaryKernelFunc(Acos, (xi) => Math.acos(xi));\nexport const acosConfig = {\n    kernelName: Acos,\n    backendName: 'cpu',\n    kernelFunc: acos,\n};\n//# sourceMappingURL=Acos.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, util } from '@tensorflow/tfjs-core';\nexport function concatImpl(inputs, outShape, dtype, simplyConcat) {\n    const outVals = util.getArrayFromDType(dtype, util.sizeFromShape(outShape));\n    if (simplyConcat && dtype !== 'string') {\n        // Use built-in TypedArray.set() method for speed.\n        let offset = 0;\n        inputs.forEach(input => {\n            const size = util.sizeFromShape(input.shape);\n            outVals.set(input.vals, offset);\n            offset += size;\n        });\n    }\n    else {\n        let colOffset = 0;\n        inputs.forEach(input => {\n            const decodedData = dtype === 'string' ?\n                backend_util.fromUint8ToStringArray(input.vals) :\n                input.vals;\n            let tIdx = 0;\n            for (let row = 0; row < input.shape[0]; ++row) {\n                const resIdx = row * outShape[1] + colOffset;\n                for (let col = 0; col < input.shape[1]; ++col) {\n                    outVals[resIdx + col] = decodedData[tIdx++];\n                }\n            }\n            colOffset += input.shape[1];\n        });\n    }\n    return outVals;\n}\n//# sourceMappingURL=Concat_impl.js.map","/**\n * @license\n * Copyright 2019 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { util } from '@tensorflow/tfjs-core';\nexport function assertNotComplex(tensor, opName) {\n    if (!Array.isArray(tensor)) {\n        tensor = [tensor];\n    }\n    tensor.forEach(t => {\n        if (t != null) {\n            util.assert(t.dtype !== 'complex64', () => `${opName} does not support complex64 tensors in the CPU backend.`);\n        }\n    });\n}\n//# sourceMappingURL=cpu_util.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { backend_util, Concat, util } from '@tensorflow/tfjs-core';\nimport { complex } from './Complex';\nimport { concatImpl } from './Concat_impl';\nimport { identity } from './Identity';\nimport { imag } from './Imag';\nimport { real } from './Real';\nimport { reshape } from './Reshape';\nexport function concat(args) {\n    const { inputs, backend, attrs } = args;\n    const { axis } = attrs;\n    const $axis = util.parseAxisParam(axis, inputs[0].shape)[0];\n    let outShape = backend_util.computeOutShape(inputs.map(t => t.shape), $axis);\n    if (util.sizeFromShape(outShape) === 0) {\n        return backend.makeTensorInfo(outShape, inputs[0].dtype, []);\n    }\n    // Keep only non-empty tensors (ignore tensors with 0 in their shape).\n    const $inputs = inputs.filter(t => util.sizeFromShape(t.shape) > 0);\n    if ($inputs.length === 1) {\n        return identity({ inputs: { x: $inputs[0] }, backend });\n    }\n    const shapes = $inputs.map(t => t.shape);\n    backend_util.assertParamsConsistent(shapes, $axis);\n    if ($inputs[0].dtype === 'complex64') {\n        const reals = $inputs.map((t) => real({ inputs: { input: t }, backend }));\n        const imags = $inputs.map((t) => imag({ inputs: { input: t }, backend }));\n        const realConcated = concat({ inputs: reals, backend, attrs: { axis: $axis } });\n        const imagConcated = concat({ inputs: imags, backend, attrs: { axis: $axis } });\n        const result = complex({ inputs: { real: realConcated, imag: imagConcated }, backend });\n        reals.forEach(r => backend.disposeIntermediateTensorInfo(r));\n        imags.forEach(i => backend.disposeIntermediateTensorInfo(i));\n        backend.disposeIntermediateTensorInfo(realConcated);\n        backend.disposeIntermediateTensorInfo(imagConcated);\n        return result;\n    }\n    // Any concat of n-dimensional tensors across any axis can be reduced to\n    // a concatenation of two-dimensional tensors across the axis 1 by first\n    // partitioning the axes of the original tensors into those less than the\n    // axis to be concatenated and the rest. Then reshape the tensors\n    // into a two-dimensional tensor by collapsing these two sets of axes and\n    // concatenate the resulting matrices across the axis 1, finally reshaping\n    // the result to have the proper shape.\n    const inputs2D = $inputs.map(t => {\n        const innerSize = util.sizeFromShape(t.shape.slice($axis));\n        const shape = [-1, innerSize];\n        return reshape({ inputs: { x: t }, backend, attrs: { shape } });\n    });\n    const inputsValShapes = inputs2D.map(t => {\n        return { vals: backend.data.get(t.dataId).values, shape: t.shape };\n    });\n    // Concats 2d tensors along axis=1.\n    outShape =\n        backend_util.computeOutShape(inputs2D.map(t => t.shape), 1 /* axis */);\n    const simplyConcat = inputs2D[0].shape[0] === 1;\n    const outVals = concatImpl(inputsValShapes, outShape, inputs[0].dtype, simplyConcat);\n    const finalOutShape = backend_util.computeOutShape($inputs.map(t => t.shape), $axis);\n    const outInfo = backend.makeTensorInfo(finalOutShape, inputs[0].dtype, outVals);\n    inputs2D.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return outInfo;\n}\nexport const concatConfig = {\n    kernelName: Concat,\n    backendName: 'cpu',\n    kernelFunc: concat\n};\n//# sourceMappingURL=Concat.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { ArgMax, backend_util, util } from '@tensorflow/tfjs-core';\nimport { assertNotComplex } from '../cpu_util';\nimport { transpose } from './Transpose';\nexport function argMax(args) {\n    const { inputs, backend, attrs } = args;\n    const { x } = inputs;\n    const { axis } = attrs;\n    assertNotComplex(x, 'argMax');\n    let axes = util.parseAxisParam(axis, x.shape);\n    const permutedAxes = backend_util.getAxesPermutation(axes, x.shape.length);\n    let $x = x;\n    const intermediateTensorInfos = [];\n    if (permutedAxes != null) {\n        $x = transpose({ inputs: { x }, backend, attrs: { perm: permutedAxes } });\n        intermediateTensorInfos.push($x);\n        axes = backend_util.getInnerMostAxes(axes.length, $x.shape.length);\n    }\n    axes = [axes[0]];\n    backend_util.assertAxesAreInnerMostDims('argMax', axes, $x.shape.length);\n    const [outShape, reduceShape] = backend_util.computeOutAndReduceShapes($x.shape, axes);\n    const outSize = util.sizeFromShape(outShape);\n    const vals = util.makeZerosTypedArray(outSize, 'int32');\n    const reduceSize = util.sizeFromShape(reduceShape);\n    const aVals = backend.data.get($x.dataId).values;\n    for (let i = 0; i < vals.length; ++i) {\n        const offset = i * reduceSize;\n        let max = aVals[offset];\n        let maxIndex = 0;\n        for (let j = 0; j < reduceSize; ++j) {\n            const value = aVals[offset + j];\n            if (value > max) {\n                max = value;\n                maxIndex = j;\n            }\n        }\n        vals[i] = maxIndex;\n    }\n    intermediateTensorInfos.forEach(t => backend.disposeIntermediateTensorInfo(t));\n    return backend.makeTensorInfo(outShape, 'int32', vals);\n}\nexport const argMaxConfig = {\n    kernelName: ArgMax,\n    backendName: 'cpu',\n    kernelFunc: argMax\n};\n//# sourceMappingURL=ArgMax.js.map","/**\n * @license\n * Copyright 2020 Google LLC. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n * =============================================================================\n */\nimport { Equal } from '@tensorflow/tfjs-core';\nimport { createSimpleBinaryKernelImpl } from '../utils/binary_impl';\nimport { binaryKernelFunc } from '../utils/binary_utils';\nexport const equalImpl = createSimpleBinaryKernelImpl((a, b) => (a === b) ? 1 : 0);\nexport const equal = binaryKernelFunc(Equal, equalImpl, null /* complexImpl */, 'bool');\nexport const equalConfig = {\n    kernelName: Equal,\n    backendName: 'cpu',\n    kernelFunc: equal\n};\n//# sourceMappingURL=Equal.js.map"],"names":["batchToSpaceNDConfig","kernelName","BatchToSpaceND","backendName","kernelFunc","args","inputs","backend","attrs","x","blockShape","crops","prod","reduce","a","b","reshaped","backend_util","shape","permuted","length","reshapedPermuted","sliceBeginCoords","sliceSize","xReshaped","xTransposed","perm","xTransposedReshaped","result","begin","size","disposeIntermediateTensorInfo","avgPoolConfig","AvgPool","filterSize","strides","pad","dimRoundingMode","util","convInfo","res","filterWidth","filterHeight","inShape","outShape","xValues","data","get","dataId","values","buffer","dtype","makeTensorInfo","denseBincountConfig","DenseBincount","weights","binaryOutput","xVals","weightsVals","outVals","xBuf","bufferSync","weightsBuf","outBuf","Error","avgPoolGradConfig","AvgPoolGrad","dy","input","strideHeight","strideWidth","dilationHeight","dilationWidth","effectiveFilterHeight","effectiveFilterWidth","padLeft","padInfo","left","padTop","top","dx","avgMultiplier","dyData","dyBuf","batchSize","d","inChannels","dxR","inHeight","dxC","inWidth","dyRCorner","dyCCorner","dotProd","wR","dyR","outHeight","Math","floor","wC","dyC","outWidth","set","eluGradConfig","EluGrad","y","resultValues","Float32Array","dyValues","i","v","conv3DBackpropInputV2Config","Conv3DBackpropInputV2","filter","inputShape","dyStrides","filterStrides","TensorBuffer","dxValues","dxS0","dxS1","dxS2","dxS3","dyS0","dyS1","dyS2","dyS3","fltValues","fltS0","fltS1","fltS2","fltS3","filterDepth","inDepth","outChannels","outDepth","strideDepth","frontPad","front","topPad","leftPad","d1","xF","xFCorner","xFMin","max","ceil","yFMax","min","xR","xRCorner","xRMin","yRMax","xC","xCCorner","xCMin","yCMax","yF","wF","yR","yC","dyOffset","fltOffset","d2","acosh","Acosh","xi","acoshConfig","atan2Impl","aValue","bValue","atan2","Atan2","atan2Config","cosh","Cosh","coshConfig","atan","Atan","atanConfig","cast","zerosTensorInfo","floatX","real","imag","realPart","Int32Array","from","zero","resultData","resultShape","castConfig","Cast","depthwiseConv2dNativeBackpropFilterConfig","DepthwiseConv2dNativeBackpropFilter","dilations","filterShape","dW","chMul","dyVals","yRMin","yCMin","trunc","dm","ceilImpl","Ceil","ceilConfig","dilation2dBackpropInputConfig","Dilation2DBackpropInput","cpuBackend","$x","$filter","rank","$dy","gradients","hOut","hBeg","wOut","wBeg","curVal","Number","MIN_SAFE_INTEGER","hInMax","wInMax","h","hIn","w","wIn","val","write","conv2DBackpropFilterConfig","Conv2DBackpropFilter","dataFormat","$dataFormat","isChannelsLast","elu","Elu","exp","eluConfig","dilation2dBackpropFilterConfig","Dilation2DBackpropFilter","hMax","wMax","argMinConfig","ArgMin","axis","axes","permutedAxes","intermediateTensorInfos","push","reduceShape","outSize","vals","reduceSize","aVals","offset","minIndex","j","value","forEach","t","expm1Impl","expm1","Expm1","expm1Config","anyConfig","Any","keepDims","origAxes","anyVal","expandedShape","reshapedResult","conv2DBackpropInputConfig","Conv2DBackpropInput","xBatchStride","xRowStride","xColStride","xChannelStride","yBatchStride","yRowStride","yColStride","yChannelStride","expandDims","dim","inputRank","newShape","slice","$dim","splice","expandDimsConfig","ExpandDims","asinh","Asinh","asinhConfig","einsumConfig","Einsum","equation","tensors","allDims","summedDims","idDims","path","steps","nSteps","out","numDimsRemaining","tensorsToDispose","idTerm","permutationIndices","dimsToExpand","targetShape","k","tensorInfo","cos","Cos","cosConfig","conv2D","xStrides","wVals","yVals","xOffset1","yOffset1","yOffset2","wOffset1","xOffset2","yOffset3","xOffset3","wOffset3","xVal","conv2DConfig","Conv2D","conv3DBackpropFilterV2Config","Conv3DBackpropFilterV2","dw","dwValues","dwS0","dwS1","dwS2","dwS3","xS0","xS1","xS2","xS3","yFMin","wOffset2","wOffset4","yOffset4","bincountConfig","Bincount","whereImpl","kernel_impls","MathBackendCPU","KernelBackend","constructor","super","this","blockSize","firstUse","DataStorage","engine","nextDataId","env","id","refCount","outId","encodedValues","map","has","incRef","decRef","move","numDataIds","read","readSync","complexTensorInfos","realValues","imagValues","decodedData","_a","makeOutput","makeTensorFromDataId","disposeData","force","delete","time","f","start","kernelMs","memory","unreliable","reasons","where","condition","condVals","dispose","floatPrecision","epsilon","registerBackend","atanh","Atanh","atanhConfig","cumsumConfig","Cumsum","exclusive","reverse","permutation","permutedAxis","resultDtype","upcastType","finalDim","indexAdjuster","idx","prevIdx","reversePermutation","reverseTransposedResult","asin","Asin","asinConfig","p","a1","a2","a3","a4","a5","erf","Erf","sign","abs","erfConfig","allConfig","All","all","cropAndResizeConfig","CropAndResize","image","boxes","boxInd","cropSize","method","extrapolationValue","batch","imageHeight","imageWidth","numChannels","numBoxes","cropHeight","cropWidth","output","boxVals","boxIndVals","imageVals","inStride","outStride","startInd","y1","x1","y2","x2","bInd","heightScale","widthScale","yInd","c","ind","topInd","bottomInd","yLerp","xInd","leftInd","rightInd","xLerp","topLeft","topRight","bottomLeft","bottom","closestX","round","closestY","inInd","outInd","depthToSpaceConfig","DepthToSpace","inputHeight","inputWidth","inputDepth","outputHeight","outputWidth","outputDepth","outputIdx","inH","offsetH","inW","offsetD","inputIdx","batchNormConfig","FusedBatchNorm","scale","mean","variance","varianceEpsilon","mVals","varVals","sVals","offVals","offValsLength","sValsLength","varValsLength","mValsLength","offi","mi","si","vi","sqrt","avgPool3DConfig","AvgPool3D","simpleAbsImpl","absConfig","Abs","complexAbsConfig","ComplexAbs","complexVals","realVals","imagVals","hypot","expImpl","Exp","expConfig","dilation2dConfig","Dilation2D","xRank","filterVals","filterRank","outRank","outputVals","xIndex","filterIndex","conv3DConfig","Conv3D","dilationDepth","padFront","xOffset4","clip","ClipByValue","clipAttrs","clipValueMax","clipValueMin","clipConfig","batchMatMul","transposeA","transposeB","aRank","bRank","innerShapeA","innerShapeB","outerShapeA","outerShapeB","outerDimsA","outerDimsB","batchDimA","batchDimB","batchDimsCompatible","concat","a3dShape","b3dShape","a3d","b3d","sharedDim","leftDim","rightDim","batchDim","a3dValues","b3dValues","a3dStrides","b3dStrides","aBatch","aOuterStep","aInnerStep","bInnerStep","bOuterStep","bBatch","resVals","bi","i0","j0","k0","iBlock","jBlock","kBlock","sum","batchOffsetA","batchOffsetB","batchMatMulConfig","BatchMatMul","depthwiseConv2dNativeBackpropInputConfig","DepthwiseConv2dNativeBackpropInput","bincountImpl","weightsDtype","weightsShape","weightsSize","bincountReduceImpl","numRows","numCols","avgPool3DGradConfig","AvgPool3DGrad","effectiveFilterDepth","channel","dxDepth","dxRow","dxCol","dyDepthCorner","dyRowCorner","dyColCorner","wDepth","dyDepth","wRow","dyRow","wCol","dyCol","depthwiseConv2dNative","$dilations","q","depthwiseConv2dNativeConfig","DepthwiseConv2dNative","complex","complexInfo","complexConfig","Complex","addNConfig","AddN","currVals","diagConfig","Diag","xSize","addImpl","addComplexImpl","aReal","aImag","bReal","bImag","add","Add","addConfig","acos","Acos","acosConfig","concatImpl","simplyConcat","colOffset","tIdx","row","resIdx","col","assertNotComplex","tensor","opName","Array","isArray","$axis","$inputs","shapes","reals","imags","realConcated","imagConcated","r","inputs2D","inputsValShapes","finalOutShape","outInfo","concatConfig","Concat","argMaxConfig","ArgMax","maxIndex","equalImpl","equal","Equal","equalConfig"],"sourceRoot":""}