{"version":3,"file":"stylist-vendors-5aa22f55.b23e90acd2fa572871d9.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/metrics.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/losses.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/logs.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Built-in metrics.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy } from '@tensorflow/tfjs-core';\nimport * as K from './backend/tfjs_backend';\nimport { NotImplementedError, ValueError } from './errors';\nimport { binaryCrossentropy as lossBinaryCrossentropy, categoricalCrossentropy as categoricalCrossentropyLoss, cosineProximity, lossesMap, meanAbsoluteError, meanAbsolutePercentageError, meanSquaredError, sparseCategoricalCrossentropy as sparseCategoricalCrossentropyLoss } from './losses';\nimport * as util from './utils/generic_utils';\nexport function binaryAccuracy(yTrue, yPred) {\n    return tidy(() => {\n        const threshold = tfc.mul(.5, tfc.onesLike(yPred));\n        const yPredThresholded = K.cast(tfc.greater(yPred, threshold), yTrue.dtype);\n        return tfc.mean(tfc.equal(yTrue, yPredThresholded), -1);\n    });\n}\nexport function categoricalAccuracy(yTrue, yPred) {\n    return tidy(() => K.cast(tfc.equal(tfc.argMax(yTrue, -1), tfc.argMax(yPred, -1)), 'float32'));\n}\nfunction truePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 1))), 'float32');\n    });\n}\nfunction falseNegatives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 1), tfc.equal(yPred, 0))), 'float32');\n    });\n}\nfunction falsePositives(yTrue, yPred) {\n    return tidy(() => {\n        return tfc.cast(tfc.sum(tfc.logicalAnd(tfc.equal(yTrue, 0), tfc.equal(yPred, 1))), 'float32');\n    });\n}\nexport function precision(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fp = falsePositives(yTrue, yPred);\n        const denominator = tfc.add(tp, fp);\n        return tfc.cast(tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0), 'float32');\n    });\n}\nexport function recall(yTrue, yPred) {\n    return tidy(() => {\n        const tp = truePositives(yTrue, yPred);\n        const fn = falseNegatives(yTrue, yPred);\n        const denominator = tfc.add(tp, fn);\n        return tfc.cast(tfc.where(tfc.greater(denominator, 0), tfc.div(tp, denominator), 0), 'float32');\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return lossBinaryCrossentropy(yTrue, yPred);\n}\nexport function sparseCategoricalAccuracy(yTrue, yPred) {\n    if (yTrue.rank === yPred.rank) {\n        yTrue = tfc.squeeze(yTrue, [yTrue.rank - 1]);\n    }\n    yPred = tfc.argMax(yPred, -1);\n    if (yPred.dtype !== yTrue.dtype) {\n        yPred = tfc.cast(yPred, yTrue.dtype);\n    }\n    return tfc.cast(tfc.equal(yTrue, yPred), 'float32');\n}\nexport function topKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\nexport function sparseTopKCategoricalAccuracy(yTrue, yPred) {\n    throw new NotImplementedError();\n}\nexport function r2Score(yTrue, yPred) {\n    return tidy(() => {\n        const sumSquaresResiduals = yTrue.sub(yPred).square().sum();\n        const sumSquares = yTrue.sub(yTrue.mean()).square().sum();\n        return tfc.scalar(1).sub(sumSquaresResiduals.div(sumSquares));\n    });\n}\n// Aliases.\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const categoricalCrossentropy = categoricalCrossentropyLoss;\nexport const cosine = cosineProximity;\nexport const sparseCategoricalCrossentropy = sparseCategoricalCrossentropyLoss;\n// TODO(cais, nielsene): Add serialize().\nexport const metricsMap = {\n    binaryAccuracy,\n    categoricalAccuracy,\n    precision,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    mse,\n    MSE,\n    mae,\n    MAE,\n    mape,\n    MAPE,\n    cosine\n};\nexport function get(identifier) {\n    if (typeof identifier === 'string' && identifier in metricsMap) {\n        return metricsMap[identifier];\n    }\n    else if (typeof identifier !== 'string' && identifier != null) {\n        return identifier;\n    }\n    else {\n        throw new ValueError(`Unknown metric ${identifier}`);\n    }\n}\n/**\n * Get the shortcut function name.\n *\n * If the fn name is a string,\n *   directly return the string name.\n * If the function is included in metricsMap or lossesMap,\n *   return key of the map.\n *   - If the function relative to multiple keys,\n *     return the first found key as the function name.\n *   - If the function exists in both lossesMap and metricsMap,\n *     search lossesMap first.\n * If the function is not included in metricsMap or lossesMap,\n *   return the function name.\n *\n * @param fn loss function, metric function, or short cut name.\n * @returns Loss or Metric name in string.\n */\nexport function getLossOrMetricName(fn) {\n    util.assert(fn !== null, `Unknown LossOrMetricFn ${fn}`);\n    if (typeof fn === 'string') {\n        return fn;\n    }\n    else {\n        let fnName;\n        for (const key of Object.keys(lossesMap)) {\n            if (lossesMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        for (const key of Object.keys(metricsMap)) {\n            if (metricsMap[key] === fn) {\n                fnName = key;\n                break;\n            }\n        }\n        if (fnName !== undefined) {\n            return fnName;\n        }\n        return fn.name;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/* Original Source: losses.py */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { tidy, util } from '@tensorflow/tfjs-core';\nimport { epsilon } from './backend/common';\nimport * as K from './backend/tfjs_backend';\nimport { ValueError } from './errors';\n/**\n * Normalizes a tensor wrt the L2 norm alongside the specified axis.\n * @param x\n * @param axis Axis along which to perform normalization.\n */\nexport function l2Normalize(x, axis) {\n    return tidy(() => {\n        if (x.dtype !== 'float32') {\n            x = tfc.cast(x, 'float32');\n        }\n        const squareSum = tfc.sum(K.square(x), axis, true);\n        const epsilonTensor = tfc.fill(squareSum.shape, epsilon());\n        const norm = tfc.sqrt(tfc.maximum(squareSum, epsilonTensor));\n        return tfc.div(x, norm);\n    });\n}\nexport function meanSquaredError(yTrue, yPred) {\n    return tidy(() => tfc.mean(K.square(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsoluteError(yTrue, yPred) {\n    return tidy(() => tfc.mean(tfc.abs(tfc.sub(yPred, yTrue)), -1));\n}\nexport function meanAbsolutePercentageError(yTrue, yPred) {\n    return tidy(() => {\n        const diff = tfc.sub(yTrue, yPred);\n        const clippedTrue = tfc.clipByValue(tfc.abs(yTrue), epsilon(), Number.MAX_VALUE);\n        const absResult = tfc.abs(tfc.div(diff, clippedTrue));\n        return tfc.mul(100, tfc.mean(absResult, -1));\n    });\n}\nexport function meanSquaredLogarithmicError(yTrue, yPred) {\n    return tidy(() => {\n        const clippedPred = tfc.clipByValue(yPred, epsilon(), Number.MAX_VALUE);\n        const firstLog = tfc.log(tfc.add(1, clippedPred));\n        const clippedTrue = tfc.clipByValue(yTrue, epsilon(), Number.MAX_VALUE);\n        const secondLog = tfc.log(tfc.add(1, clippedTrue));\n        return tfc.mean(K.square(tfc.sub(firstLog, secondLog)), -1);\n    });\n}\nexport function squaredHinge(yTrue, yPred) {\n    return tidy(() => {\n        const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n        return tfc.mean(K.square(maxResult), -1);\n    });\n}\nexport function hinge(yTrue, yPred) {\n    return tidy(() => {\n        const maxResult = tfc.maximum(0, tfc.sub(1, tfc.mul(yTrue, yPred)));\n        return tfc.mean(maxResult, -1);\n    });\n}\nexport function categoricalHinge(yTrue, yPred) {\n    return tidy(() => {\n        const pos = tfc.sum(tfc.mul(yTrue, yPred), -1);\n        const neg = tfc.max(tfc.mul(tfc.sub(1, yTrue), yPred), -1);\n        return tfc.maximum(0, tfc.add(1, tfc.sub(neg, pos)));\n    });\n}\n/**\n * Logarithm of the hyperbolic cosine of the prediction error.\n *\n * `log(cosh(x))` is approximately equal to `(x ** 2) / 2` for small `x` and\n * to `abs(x) - log(2)` for large `x`. This means that 'logcosh' works mostly\n * like the mean squared error, but will not be so strongly affected by the\n * occasional wildly incorrect prediction.\n */\nexport function logcosh(yTrue, yPred) {\n    return tidy(() => {\n        const log2 = Math.log(2);\n        const predictionDiff = tfc.sub(yPred, yTrue);\n        const logcoshResult = tfc.sub(tfc.add(predictionDiff, tfc.softplus(tfc.mul(-2, predictionDiff))), log2);\n        return tfc.mean(logcoshResult, -1);\n    });\n}\nexport function categoricalCrossentropy(target, output, fromLogits = false) {\n    return tidy(() => {\n        if (fromLogits) {\n            output = tfc.softmax(output);\n        }\n        else {\n            // scale preds so that the class probabilities of each sample sum to 1.\n            const outputSum = tfc.sum(output, output.shape.length - 1, true);\n            output = tfc.div(output, outputSum);\n        }\n        output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n        return tfc.neg(tfc.sum(tfc.mul(tfc.cast(target, 'float32'), tfc.log(output)), output.shape.length - 1));\n    });\n}\n/**\n * Categorical crossentropy with integer targets.\n *\n * @param target An integer tensor.\n * @param output A tensor resulting from a softmax (unless `fromLogits` is\n *  `true`, in which case `output` is expected to be the logits).\n * @param fromLogits Boolean, whether `output` is the result of a softmax, or is\n *   a tensor of logits.\n */\nexport function sparseCategoricalCrossentropy(target, output, fromLogits = false) {\n    return tidy(() => {\n        const flatTarget = tfc.cast(tfc.floor(K.flatten(target)), 'int32');\n        output = tfc.clipByValue(output, epsilon(), 1 - epsilon());\n        const outputShape = output.shape;\n        const oneHotTarget = tfc.reshape(tfc.oneHot(flatTarget, outputShape[outputShape.length - 1]), outputShape);\n        return categoricalCrossentropy(oneHotTarget, output, fromLogits);\n    });\n}\n/**\n * From TensorFlow's implementation in nn_impl.py:\n *\n * For brevity, let `x = logits`, `z = labels`.  The logistic loss is\n *      z * -log(sigmoid(x)) + (1 - z) * -log(1 - sigmoid(x))\n *    = z * -log(1 / (1 + exp(-x))) + (1 - z) * -log(exp(-x) / (1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (-log(exp(-x)) + log(1 + exp(-x)))\n *    = z * log(1 + exp(-x)) + (1 - z) * (x + log(1 + exp(-x))\n *    = (1 - z) * x + log(1 + exp(-x))\n *    = x - x * z + log(1 + exp(-x))\n * For x < 0, to avoid overflow in exp(-x), we reformulate the above\n *      x - x * z + log(1 + exp(-x))\n *    = log(exp(x)) - x * z + log(1 + exp(-x))\n *    = - x * z + log(1 + exp(x))\n * Hence, to ensure stability and avoid overflow, the implementation uses this\n * equivalent formulation\n *    max(x, 0) - x * z + log(1 + exp(-abs(x)))\n *\n * @param labels The labels.\n * @param logits The logits.\n */\nexport function sigmoidCrossEntropyWithLogits(labels, logits) {\n    if (!util.arraysEqual(labels.shape, logits.shape)) {\n        throw new ValueError(`logits and labels must have the same shape, but got shapes ` +\n            `${JSON.stringify(labels.shape)} and ${JSON.stringify(logits.shape)}`);\n    }\n    return tidy(() => {\n        // The logistic loss formula from above is\n        //   x - x * z + log(1 + exp(-x))\n        // For x < 0, a more numerically stable formula is\n        //   -x * z + log(1 + exp(x))\n        // Note that these two expressions can be combined into the following:\n        //   max(x, 0) - x * z + log(1 + exp(-abs(x)))\n        const reluLogits = tfc.relu(logits);\n        const negAbsLogits = tfc.neg(tfc.abs(logits));\n        return tfc.add(tfc.sub(reluLogits, tfc.mul(logits, labels)), tfc.log1p(tfc.exp(negAbsLogits)));\n    });\n}\nexport function binaryCrossentropy(yTrue, yPred) {\n    return tidy(() => {\n        let y;\n        y = tfc.clipByValue(yPred, epsilon(), 1 - epsilon());\n        y = tfc.log(tfc.div(y, tfc.sub(1, y)));\n        return tfc.mean(sigmoidCrossEntropyWithLogits(yTrue, y), -1);\n    });\n}\nexport function kullbackLeiblerDivergence(yTrue, yPred) {\n    return tidy(() => {\n        const clippedTrue = tfc.clipByValue(yTrue, epsilon(), 1);\n        const clippedPred = tfc.clipByValue(yPred, epsilon(), 1);\n        return tfc.sum(tfc.mul(yTrue, tfc.log(tfc.div(clippedTrue, clippedPred))), -1);\n    });\n}\nexport function poisson(yTrue, yPred) {\n    return tidy(() => {\n        const logPred = tfc.log(tfc.add(epsilon(), yPred));\n        return tfc.mean(tfc.sub(yPred, tfc.mul(yTrue, logPred)), -1);\n    });\n}\nexport function cosineProximity(yTrue, yPred) {\n    return tidy(() => {\n        const trueNormalized = l2Normalize(yTrue, -1);\n        const predNormalized = l2Normalize(yPred, -1);\n        const trueXPred = tfc.mul(trueNormalized, predNormalized);\n        return tfc.neg(tfc.sum(trueXPred, -1));\n    });\n}\nexport const mse = meanSquaredError;\nexport const MSE = meanSquaredError;\nexport const mae = meanAbsoluteError;\nexport const MAE = meanAbsoluteError;\nexport const mape = meanAbsolutePercentageError;\nexport const MAPE = meanAbsolutePercentageError;\nexport const msle = meanSquaredLogarithmicError;\nexport const MSLE = meanSquaredLogarithmicError;\nexport const kld = kullbackLeiblerDivergence;\nexport const KLD = kullbackLeiblerDivergence;\nexport const cosine = cosineProximity;\n// TODO(michaelterry): Add deserialize() function.\nexport const lossesMap = {\n    meanSquaredError,\n    meanAbsoluteError,\n    meanAbsolutePercentageError,\n    meanSquaredLogarithmicError,\n    squaredHinge,\n    hinge,\n    categoricalHinge,\n    logcosh,\n    categoricalCrossentropy,\n    sparseCategoricalCrossentropy,\n    binaryCrossentropy,\n    kullbackLeiblerDivergence,\n    poisson,\n    cosineProximity\n};\n// Porting note: This diverges from the PyKeras implementation and may need to\n// change based on (de)serialization requirements.\nexport function get(identifierOrFn) {\n    if (typeof identifierOrFn === 'string') {\n        if (identifierOrFn in lossesMap) {\n            return lossesMap[identifierOrFn];\n        }\n        let errMsg = `Unknown loss ${identifierOrFn}`;\n        if (identifierOrFn.toLowerCase().includes('softmaxcrossentropy')) {\n            errMsg = `Unknown loss ${identifierOrFn}. ` +\n                'Use \"categoricalCrossentropy\" as the string name for ' +\n                'tf.losses.softmaxCrossEntropy';\n        }\n        throw new ValueError(errMsg);\n    }\n    else {\n        return identifierOrFn;\n    }\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { dispose } from '@tensorflow/tfjs-core';\n/**\n * Turn any Scalar values in a Logs object into actual number values.\n *\n * @param logs The `Logs` object to be resolved in place.\n */\nexport async function resolveScalarsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    const promises = [];\n    const keys = [];\n    const scalarsToDispose = [];\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            const valueScalar = value;\n            promises.push(valueScalar.data());\n            keys.push(key);\n            scalarsToDispose.push(valueScalar);\n        }\n    }\n    if (promises.length > 0) {\n        const values = await Promise.all(promises);\n        for (let i = 0; i < values.length; ++i) {\n            logs[keys[i]] = values[i][0];\n        }\n        // Dispose the original scalar tensors.\n        dispose(scalarsToDispose);\n    }\n}\n/**\n * Dispose all Tensors in an UnresolvedLogs object.\n *\n * @param logs An `UnresolvedLogs` object potentially containing `tf.Tensor`s in\n *   places where the values can be `tf.Tensor` or `number`.\n */\nexport function disposeTensorsInLogs(logs) {\n    if (logs == null) {\n        return;\n    }\n    for (const key in logs) {\n        const value = logs[key];\n        if (typeof value !== 'number') {\n            value.dispose();\n        }\n    }\n}\n//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9ncy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3RmanMtbGF5ZXJzL3NyYy9sb2dzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7OztHQVFHO0FBRUgsT0FBTyxFQUFDLE9BQU8sRUFBUyxNQUFNLHVCQUF1QixDQUFDO0FBV3REOzs7O0dBSUc7QUFDSCxNQUFNLENBQUMsS0FBSyxVQUFVLG9CQUFvQixDQUFDLElBQW9CO0lBQzdELElBQUksSUFBSSxJQUFJLElBQUksRUFBRTtRQUNoQixPQUFPO0tBQ1I7SUFDRCxNQUFNLFFBQVEsR0FBdUQsRUFBRSxDQUFDO0lBQ3hFLE1BQU0sSUFBSSxHQUFhLEVBQUUsQ0FBQztJQUMxQixNQUFNLGdCQUFnQixHQUFhLEVBQUUsQ0FBQztJQUN0QyxLQUFLLE1BQU0sR0FBRyxJQUFJLElBQUksRUFBRTtRQUN0QixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDeEIsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7WUFDN0IsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDO1lBQzFCLFFBQVEsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUM7WUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNmLGdCQUFnQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUNwQztLQUNGO0lBQ0QsSUFBSSxRQUFRLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtRQUN2QixNQUFNLE1BQU0sR0FBRyxNQUFNLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDM0MsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUM5QjtRQUNELHVDQUF1QztRQUN2QyxPQUFPLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztLQUMzQjtBQUNILENBQUM7QUFFRDs7Ozs7R0FLRztBQUNILE1BQU0sVUFBVSxvQkFBb0IsQ0FBQyxJQUFvQjtJQUN2RCxJQUFJLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDaEIsT0FBTztLQUNSO0lBQ0QsS0FBSyxNQUFNLEdBQUcsSUFBSSxJQUFJLEVBQUU7UUFDdEIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3hCLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQzdCLEtBQUssQ0FBQyxPQUFPLEVBQUUsQ0FBQztTQUNqQjtLQUNGO0FBQ0gsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBMTENcbiAqXG4gKiBVc2Ugb2YgdGhpcyBzb3VyY2UgY29kZSBpcyBnb3Zlcm5lZCBieSBhbiBNSVQtc3R5bGVcbiAqIGxpY2Vuc2UgdGhhdCBjYW4gYmUgZm91bmQgaW4gdGhlIExJQ0VOU0UgZmlsZSBvciBhdFxuICogaHR0cHM6Ly9vcGVuc291cmNlLm9yZy9saWNlbnNlcy9NSVQuXG4gKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICovXG5cbmltcG9ydCB7ZGlzcG9zZSwgU2NhbGFyfSBmcm9tICdAdGVuc29yZmxvdy90ZmpzLWNvcmUnO1xuXG4vKipcbiAqIExvZ3MgaW4gd2hpY2ggdmFsdWVzIGNhbiBiZSBlaXRoZXIgbnVtYmVycyBvciBUZW5zb3JzIChTY2FsYXJzKS5cbiAqXG4gKiBVc2VkIGludGVybmFsbHkuXG4gKi9cbmV4cG9ydCB0eXBlIFVucmVzb2x2ZWRMb2dzID0ge1xuICBba2V5OiBzdHJpbmddOiBudW1iZXJ8U2NhbGFyO1xufTtcblxuLyoqXG4gKiBUdXJuIGFueSBTY2FsYXIgdmFsdWVzIGluIGEgTG9ncyBvYmplY3QgaW50byBhY3R1YWwgbnVtYmVyIHZhbHVlcy5cbiAqXG4gKiBAcGFyYW0gbG9ncyBUaGUgYExvZ3NgIG9iamVjdCB0byBiZSByZXNvbHZlZCBpbiBwbGFjZS5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJlc29sdmVTY2FsYXJzSW5Mb2dzKGxvZ3M6IFVucmVzb2x2ZWRMb2dzKSB7XG4gIGlmIChsb2dzID09IG51bGwpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgY29uc3QgcHJvbWlzZXM6IEFycmF5PFByb21pc2U8RmxvYXQzMkFycmF5fEludDMyQXJyYXl8VWludDhBcnJheT4+ID0gW107XG4gIGNvbnN0IGtleXM6IHN0cmluZ1tdID0gW107XG4gIGNvbnN0IHNjYWxhcnNUb0Rpc3Bvc2U6IFNjYWxhcltdID0gW107XG4gIGZvciAoY29uc3Qga2V5IGluIGxvZ3MpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGxvZ3Nba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgY29uc3QgdmFsdWVTY2FsYXIgPSB2YWx1ZTtcbiAgICAgIHByb21pc2VzLnB1c2godmFsdWVTY2FsYXIuZGF0YSgpKTtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgc2NhbGFyc1RvRGlzcG9zZS5wdXNoKHZhbHVlU2NhbGFyKTtcbiAgICB9XG4gIH1cbiAgaWYgKHByb21pc2VzLmxlbmd0aCA+IDApIHtcbiAgICBjb25zdCB2YWx1ZXMgPSBhd2FpdCBQcm9taXNlLmFsbChwcm9taXNlcyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgIGxvZ3Nba2V5c1tpXV0gPSB2YWx1ZXNbaV1bMF07XG4gICAgfVxuICAgIC8vIERpc3Bvc2UgdGhlIG9yaWdpbmFsIHNjYWxhciB0ZW5zb3JzLlxuICAgIGRpc3Bvc2Uoc2NhbGFyc1RvRGlzcG9zZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBEaXNwb3NlIGFsbCBUZW5zb3JzIGluIGFuIFVucmVzb2x2ZWRMb2dzIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0gbG9ncyBBbiBgVW5yZXNvbHZlZExvZ3NgIG9iamVjdCBwb3RlbnRpYWxseSBjb250YWluaW5nIGB0Zi5UZW5zb3JgcyBpblxuICogICBwbGFjZXMgd2hlcmUgdGhlIHZhbHVlcyBjYW4gYmUgYHRmLlRlbnNvcmAgb3IgYG51bWJlcmAuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkaXNwb3NlVGVuc29yc0luTG9ncyhsb2dzOiBVbnJlc29sdmVkTG9ncykge1xuICBpZiAobG9ncyA9PSBudWxsKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGZvciAoY29uc3Qga2V5IGluIGxvZ3MpIHtcbiAgICBjb25zdCB2YWx1ZSA9IGxvZ3Nba2V5XTtcbiAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgICAgdmFsdWUuZGlzcG9zZSgpO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIExvZ3MgaW4gd2hpY2ggdmFsdWVzIGNhbiBvbmx5IGJlIG51bWJlcnMuXG4gKlxuICogVXNlZCB3aGVuIGNhbGxpbmcgY2xpZW50LXByb3ZpZGVkIGN1c3RvbSBjYWxsYmFja3MuXG4gKi9cbmV4cG9ydCB0eXBlIExvZ3MgPSB7XG4gIFtrZXk6IHN0cmluZ106IG51bWJlcjtcbn07XG4iXX0="],"names":["binaryAccuracy","yTrue","yPred","tidy","threshold","yPredThresholded","dtype","categoricalAccuracy","truePositives","binaryCrossentropy","sparseCategoricalAccuracy","rank","mse","MSE","mae","MAE","mape","MAPE","categoricalCrossentropy","cosine","sparseCategoricalCrossentropy","metricsMap","precision","tp","fp","falsePositives","denominator","get","identifier","getLossOrMetricName","fn","fnName","key","Object","keys","undefined","name","l2Normalize","x","axis","squareSum","epsilonTensor","shape","norm","meanSquaredError","meanAbsoluteError","meanAbsolutePercentageError","diff","clippedTrue","Number","MAX_VALUE","absResult","meanSquaredLogarithmicError","clippedPred","firstLog","secondLog","target","output","fromLogits","outputSum","length","flatTarget","outputShape","y","labels","logits","util","JSON","stringify","reluLogits","negAbsLogits","sigmoidCrossEntropyWithLogits","kullbackLeiblerDivergence","cosineProximity","trueNormalized","predNormalized","trueXPred","lossesMap","squaredHinge","maxResult","hinge","categoricalHinge","pos","neg","logcosh","log2","Math","log","predictionDiff","logcoshResult","poisson","logPred","identifierOrFn","errMsg","toLowerCase","includes","async","resolveScalarsInLogs","logs","promises","scalarsToDispose","value","valueScalar","push","data","values","Promise","all","i","dispose","disposeTensorsInLogs"],"sourceRoot":""}