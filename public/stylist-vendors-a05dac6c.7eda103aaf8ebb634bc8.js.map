{"version":3,"file":"stylist-vendors-a05dac6c.7eda103aaf8ebb634bc8.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@socket.io/component-emitter/lib/esm/index.js","webpack://StylistWidget/./node_modules/socket.io-parser/build/esm/is-binary.js","webpack://StylistWidget/./node_modules/socket.io-parser/build/esm/binary.js","webpack://StylistWidget/./node_modules/socket.io-parser/build/esm/index.js","webpack://StylistWidget/./node_modules/socket.io-client/build/esm/on.js","webpack://StylistWidget/./node_modules/socket.io-client/build/esm/socket.js","webpack://StylistWidget/./node_modules/socket.io-client/build/esm/contrib/backo2.js","webpack://StylistWidget/./node_modules/socket.io-client/build/esm/manager.js","webpack://StylistWidget/./node_modules/socket.io-client/build/esm/index.js","webpack://StylistWidget/./node_modules/socket.io-client/build/esm/url.js"],"sourcesContent":["/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nexport function Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","const withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst isView = (obj) => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj.buffer instanceof ArrayBuffer;\n};\nconst toString = Object.prototype.toString;\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeFile = typeof File === \"function\" ||\n    (typeof File !== \"undefined\" &&\n        toString.call(File) === \"[object FileConstructor]\");\n/**\n * Returns true if obj is a Buffer, an ArrayBuffer, a Blob or a File.\n *\n * @private\n */\nexport function isBinary(obj) {\n    return ((withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj))) ||\n        (withNativeBlob && obj instanceof Blob) ||\n        (withNativeFile && obj instanceof File));\n}\nexport function hasBinary(obj, toJSON) {\n    if (!obj || typeof obj !== \"object\") {\n        return false;\n    }\n    if (Array.isArray(obj)) {\n        for (let i = 0, l = obj.length; i < l; i++) {\n            if (hasBinary(obj[i])) {\n                return true;\n            }\n        }\n        return false;\n    }\n    if (isBinary(obj)) {\n        return true;\n    }\n    if (obj.toJSON &&\n        typeof obj.toJSON === \"function\" &&\n        arguments.length === 1) {\n        return hasBinary(obj.toJSON(), true);\n    }\n    for (const key in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {\n            return true;\n        }\n    }\n    return false;\n}\n","import { isBinary } from \"./is-binary.js\";\n/**\n * Replaces every Buffer | ArrayBuffer | Blob | File in packet with a numbered placeholder.\n *\n * @param {Object} packet - socket.io event packet\n * @return {Object} with deconstructed packet and list of buffers\n * @public\n */\nexport function deconstructPacket(packet) {\n    const buffers = [];\n    const packetData = packet.data;\n    const pack = packet;\n    pack.data = _deconstructPacket(packetData, buffers);\n    pack.attachments = buffers.length; // number of binary 'attachments'\n    return { packet: pack, buffers: buffers };\n}\nfunction _deconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (isBinary(data)) {\n        const placeholder = { _placeholder: true, num: buffers.length };\n        buffers.push(data);\n        return placeholder;\n    }\n    else if (Array.isArray(data)) {\n        const newData = new Array(data.length);\n        for (let i = 0; i < data.length; i++) {\n            newData[i] = _deconstructPacket(data[i], buffers);\n        }\n        return newData;\n    }\n    else if (typeof data === \"object\" && !(data instanceof Date)) {\n        const newData = {};\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                newData[key] = _deconstructPacket(data[key], buffers);\n            }\n        }\n        return newData;\n    }\n    return data;\n}\n/**\n * Reconstructs a binary packet from its placeholder packet and buffers\n *\n * @param {Object} packet - event packet with placeholders\n * @param {Array} buffers - binary buffers to put in placeholder positions\n * @return {Object} reconstructed packet\n * @public\n */\nexport function reconstructPacket(packet, buffers) {\n    packet.data = _reconstructPacket(packet.data, buffers);\n    delete packet.attachments; // no longer useful\n    return packet;\n}\nfunction _reconstructPacket(data, buffers) {\n    if (!data)\n        return data;\n    if (data && data._placeholder === true) {\n        const isIndexValid = typeof data.num === \"number\" &&\n            data.num >= 0 &&\n            data.num < buffers.length;\n        if (isIndexValid) {\n            return buffers[data.num]; // appropriate buffer (should be natural order anyway)\n        }\n        else {\n            throw new Error(\"illegal attachments\");\n        }\n    }\n    else if (Array.isArray(data)) {\n        for (let i = 0; i < data.length; i++) {\n            data[i] = _reconstructPacket(data[i], buffers);\n        }\n    }\n    else if (typeof data === \"object\") {\n        for (const key in data) {\n            if (Object.prototype.hasOwnProperty.call(data, key)) {\n                data[key] = _reconstructPacket(data[key], buffers);\n            }\n        }\n    }\n    return data;\n}\n","import { Emitter } from \"@socket.io/component-emitter\";\nimport { deconstructPacket, reconstructPacket } from \"./binary.js\";\nimport { isBinary, hasBinary } from \"./is-binary.js\";\n/**\n * These strings must not be used as event names, as they have a special meaning.\n */\nconst RESERVED_EVENTS = [\n    \"connect\",\n    \"connect_error\",\n    \"disconnect\",\n    \"disconnecting\",\n    \"newListener\",\n    \"removeListener\", // used by the Node.js EventEmitter\n];\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encoder constructor\n     *\n     * @param {function} replacer - custom replacer to pass down to JSON.parse\n     */\n    constructor(replacer) {\n        this.replacer = replacer;\n    }\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {\n            if (hasBinary(obj)) {\n                return this.encodeAsBinary({\n                    type: obj.type === PacketType.EVENT\n                        ? PacketType.BINARY_EVENT\n                        : PacketType.BINARY_ACK,\n                    nsp: obj.nsp,\n                    data: obj.data,\n                    id: obj.id,\n                });\n            }\n        }\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data, this.replacer);\n        }\n        return str;\n    }\n    /**\n     * Encode packet as 'buffer sequence' by removing blobs, and\n     * deconstructing packet into object with placeholders and\n     * a list of buffers.\n     */\n    encodeAsBinary(obj) {\n        const deconstruction = deconstructPacket(obj);\n        const pack = this.encodeAsString(deconstruction.packet);\n        const buffers = deconstruction.buffers;\n        buffers.unshift(pack); // add packet info to beginning of data list\n        return buffers; // write all the buffers\n    }\n}\n// see https://stackoverflow.com/questions/8511281/check-if-a-value-is-an-object-in-javascript\nfunction isObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    /**\n     * Decoder constructor\n     *\n     * @param {function} reviver - custom reviver to pass down to JSON.stringify\n     */\n    constructor(reviver) {\n        super();\n        this.reviver = reviver;\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            if (this.reconstructor) {\n                throw new Error(\"got plaintext data when reconstructing a packet\");\n            }\n            packet = this.decodeString(obj);\n            const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;\n            if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {\n                packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;\n                // binary packet's json\n                this.reconstructor = new BinaryReconstructor(packet);\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else if (isBinary(obj) || obj.base64) {\n            // raw binary data\n            if (!this.reconstructor) {\n                throw new Error(\"got binary data when not reconstructing a packet\");\n            }\n            else {\n                packet = this.reconstructor.takeBinaryData(obj);\n                if (packet) {\n                    // received final buffer\n                    this.reconstructor = null;\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = this.tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    tryParse(str) {\n        try {\n            return JSON.parse(str, this.reviver);\n        }\n        catch (e) {\n            return false;\n        }\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return isObject(payload);\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || isObject(payload);\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return (Array.isArray(payload) &&\n                    (typeof payload[0] === \"number\" ||\n                        (typeof payload[0] === \"string\" &&\n                            RESERVED_EVENTS.indexOf(payload[0]) === -1)));\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n        if (this.reconstructor) {\n            this.reconstructor.finishedReconstruction();\n            this.reconstructor = null;\n        }\n    }\n}\n/**\n * A manager of a binary event's 'buffer sequence'. Should\n * be constructed whenever a packet of type BINARY_EVENT is\n * decoded.\n *\n * @param {Object} packet\n * @return {BinaryReconstructor} initialized reconstructor\n */\nclass BinaryReconstructor {\n    constructor(packet) {\n        this.packet = packet;\n        this.buffers = [];\n        this.reconPack = packet;\n    }\n    /**\n     * Method to be called when binary data received from connection\n     * after a BINARY_EVENT packet.\n     *\n     * @param {Buffer | ArrayBuffer} binData - the raw binary data received\n     * @return {null | Object} returns null if more binary data is expected or\n     *   a reconstructed packet object if all buffers have been received.\n     */\n    takeBinaryData(binData) {\n        this.buffers.push(binData);\n        if (this.buffers.length === this.reconPack.attachments) {\n            // done with buffer list\n            const packet = reconstructPacket(this.reconPack, this.buffers);\n            this.finishedReconstruction();\n            return packet;\n        }\n        return null;\n    }\n    /**\n     * Cleans up binary packet reconstruction variables.\n     */\n    finishedReconstruction() {\n        this.reconPack = null;\n        this.buffers = [];\n    }\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\n/**\n * A Socket is the fundamental class for interacting with the server.\n *\n * A Socket belongs to a certain Namespace (by default /) and uses an underlying {@link Manager} to communicate.\n *\n * @example\n * const socket = io();\n *\n * socket.on(\"connect\", () => {\n *   console.log(\"connected\");\n * });\n *\n * // send an event to the server\n * socket.emit(\"foo\", \"bar\");\n *\n * socket.on(\"foobar\", () => {\n *   // an event was received from the server\n * });\n *\n * // upon disconnection\n * socket.on(\"disconnect\", (reason) => {\n *   console.log(`disconnected due to ${reason}`);\n * });\n */\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     */\n    constructor(io, nsp, opts) {\n        super();\n        /**\n         * Whether the socket is currently connected to the server.\n         *\n         * @example\n         * const socket = io();\n         *\n         * socket.on(\"connect\", () => {\n         *   console.log(socket.connected); // true\n         * });\n         *\n         * socket.on(\"disconnect\", () => {\n         *   console.log(socket.connected); // false\n         * });\n         */\n        this.connected = false;\n        /**\n         * Whether the connection state was recovered after a temporary disconnection. In that case, any missed packets will\n         * be transmitted by the server.\n         */\n        this.recovered = false;\n        /**\n         * Buffer for packets received before the CONNECT packet\n         */\n        this.receiveBuffer = [];\n        /**\n         * Buffer for packets that will be sent once the socket is connected\n         */\n        this.sendBuffer = [];\n        /**\n         * The queue of packets to be sent with retry in case of failure.\n         *\n         * Packets are sent one by one, each waiting for the server acknowledgement, in order to guarantee the delivery order.\n         * @private\n         */\n        this._queue = [];\n        /**\n         * A sequence to generate the ID of the {@link QueuedPacket}.\n         * @private\n         */\n        this._queueSeq = 0;\n        this.ids = 0;\n        /**\n         * A map containing acknowledgement handlers.\n         *\n         * The `withError` attribute is used to differentiate handlers that accept an error as first argument:\n         *\n         * - `socket.emit(\"test\", (err, value) => { ... })` with `ackTimeout` option\n         * - `socket.timeout(5000).emit(\"test\", (err, value) => { ... })`\n         * - `const value = await socket.emitWithAck(\"test\")`\n         *\n         * From those that don't:\n         *\n         * - `socket.emit(\"test\", (value) => { ... });`\n         *\n         * In the first case, the handlers will be called with an error when:\n         *\n         * - the timeout is reached\n         * - the socket gets disconnected\n         *\n         * In the second case, the handlers will be simply discarded upon disconnection, since the client will never receive\n         * an acknowledgement from the server.\n         *\n         * @private\n         */\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        this._opts = Object.assign({}, opts);\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Whether the socket is currently disconnected\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"connect\", () => {\n     *   console.log(socket.disconnected); // false\n     * });\n     *\n     * socket.on(\"disconnect\", () => {\n     *   console.log(socket.disconnected); // true\n     * });\n     */\n    get disconnected() {\n        return !this.connected;\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects.\n     *\n     * @example\n     * const socket = io();\n     *\n     * console.log(socket.active); // true\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   if (reason === \"io server disconnect\") {\n     *     // the disconnection was initiated by the server, you need to manually reconnect\n     *     console.log(socket.active); // false\n     *   }\n     *   // else the socket will automatically try to reconnect\n     *   console.log(socket.active); // true\n     * });\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @example\n     * const socket = io({\n     *   autoConnect: false\n     * });\n     *\n     * socket.connect();\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for {@link connect()}.\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * This method mimics the WebSocket.send() method.\n     *\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send\n     *\n     * @example\n     * socket.send(\"hello\");\n     *\n     * // this is equivalent to\n     * socket.emit(\"message\", \"hello\");\n     *\n     * @return self\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @example\n     * socket.emit(\"hello\", \"world\");\n     *\n     * // all serializable datastructures are supported (no need to call JSON.stringify)\n     * socket.emit(\"hello\", 1, \"2\", { 3: [\"4\"], 5: Uint8Array.from([6]) });\n     *\n     * // with an acknowledgement from the server\n     * socket.emit(\"hello\", \"world\", (val) => {\n     *   // ...\n     * });\n     *\n     * @return self\n     */\n    emit(ev, ...args) {\n        var _a, _b, _c;\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev.toString() + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {\n            this._addToQueue(args);\n            return this;\n        }\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;\n        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());\n        const discardPacket = this.flags.volatile && !isTransportWritable;\n        if (discardPacket) {\n        }\n        else if (isConnected) {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        var _a;\n        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        const fn = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, args);\n        };\n        fn.withError = true;\n        this.acks[id] = fn;\n    }\n    /**\n     * Emits an event and waits for an acknowledgement\n     *\n     * @example\n     * // without timeout\n     * const response = await socket.emitWithAck(\"hello\", \"world\");\n     *\n     * // with a specific timeout\n     * try {\n     *   const response = await socket.timeout(1000).emitWithAck(\"hello\", \"world\");\n     * } catch (err) {\n     *   // the server did not acknowledge the event in the given delay\n     * }\n     *\n     * @return a Promise that will be fulfilled when the server acknowledges the event\n     */\n    emitWithAck(ev, ...args) {\n        return new Promise((resolve, reject) => {\n            const fn = (arg1, arg2) => {\n                return arg1 ? reject(arg1) : resolve(arg2);\n            };\n            fn.withError = true;\n            args.push(fn);\n            this.emit(ev, ...args);\n        });\n    }\n    /**\n     * Add the packet to the queue.\n     * @param args\n     * @private\n     */\n    _addToQueue(args) {\n        let ack;\n        if (typeof args[args.length - 1] === \"function\") {\n            ack = args.pop();\n        }\n        const packet = {\n            id: this._queueSeq++,\n            tryCount: 0,\n            pending: false,\n            args,\n            flags: Object.assign({ fromQueue: true }, this.flags),\n        };\n        args.push((err, ...responseArgs) => {\n            if (packet !== this._queue[0]) {\n                // the packet has already been acknowledged\n                return;\n            }\n            const hasError = err !== null;\n            if (hasError) {\n                if (packet.tryCount > this._opts.retries) {\n                    this._queue.shift();\n                    if (ack) {\n                        ack(err);\n                    }\n                }\n            }\n            else {\n                this._queue.shift();\n                if (ack) {\n                    ack(null, ...responseArgs);\n                }\n            }\n            packet.pending = false;\n            return this._drainQueue();\n        });\n        this._queue.push(packet);\n        this._drainQueue();\n    }\n    /**\n     * Send the first packet of the queue, and wait for an acknowledgement from the server.\n     * @param force - whether to resend a packet that has not been acknowledged yet\n     *\n     * @private\n     */\n    _drainQueue(force = false) {\n        if (!this.connected || this._queue.length === 0) {\n            return;\n        }\n        const packet = this._queue[0];\n        if (packet.pending && !force) {\n            return;\n        }\n        packet.pending = true;\n        packet.tryCount++;\n        this.flags = packet.flags;\n        this.emit.apply(this, packet.args);\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this._sendConnectPacket(data);\n            });\n        }\n        else {\n            this._sendConnectPacket(this.auth);\n        }\n    }\n    /**\n     * Sends a CONNECT packet to initiate the Socket.IO session.\n     *\n     * @param data\n     * @private\n     */\n    _sendConnectPacket(data) {\n        this.packet({\n            type: PacketType.CONNECT,\n            data: this._pid\n                ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data)\n                : data,\n        });\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @param description\n     * @private\n     */\n    onclose(reason, description) {\n        this.connected = false;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason, description);\n        this._clearAcks();\n    }\n    /**\n     * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from\n     * the server.\n     *\n     * @private\n     */\n    _clearAcks() {\n        Object.keys(this.acks).forEach((id) => {\n            const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);\n            if (!isBuffered) {\n                // note: handlers that do not accept an error as first argument are ignored here\n                const ack = this.acks[id];\n                delete this.acks[id];\n                if (ack.withError) {\n                    ack.call(this, new Error(\"socket has been disconnected\"));\n                }\n            }\n        });\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    this.onconnect(packet.data.sid, packet.data.pid);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n        if (this._pid && args.length && typeof args[args.length - 1] === \"string\") {\n            this._lastOffset = args[args.length - 1];\n        }\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowledgement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (typeof ack !== \"function\") {\n            return;\n        }\n        delete this.acks[packet.id];\n        // @ts-ignore FIXME ack is incorrectly inferred as 'never'\n        if (ack.withError) {\n            packet.data.unshift(null);\n        }\n        // @ts-ignore\n        ack.apply(this, packet.data);\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id, pid) {\n        this.id = id;\n        this.recovered = pid && this._pid === pid;\n        this._pid = pid; // defined only if connection state recovery is enabled\n        this.connected = true;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n        this._drainQueue(true);\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => {\n            this.notifyOutgoingListeners(packet);\n            this.packet(packet);\n        });\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually. In that case, the socket will not try to reconnect.\n     *\n     * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.\n     *\n     * @example\n     * const socket = io();\n     *\n     * socket.on(\"disconnect\", (reason) => {\n     *   // console.log(reason); prints \"io client disconnect\"\n     * });\n     *\n     * socket.disconnect();\n     *\n     * @return self\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for {@link disconnect()}.\n     *\n     * @return self\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @example\n     * socket.compress(false).emit(\"hello\");\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @example\n     * socket.volatile.emit(\"hello\"); // the server may or may not receive it\n     *\n     * @returns self\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * @example\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     *\n     * @returns self\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @example\n     * socket.onAny((event, ...args) => {\n     *   console.log(`got ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @example\n     * socket.prependAny((event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`got event ${event}`);\n     * }\n     *\n     * socket.onAny(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAny(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAny();\n     *\n     * @param listener\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.onAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    onAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * Note: acknowledgements sent to the server are not included.\n     *\n     * @example\n     * socket.prependAnyOutgoing((event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * });\n     *\n     * @param listener\n     */\n    prependAnyOutgoing(listener) {\n        this._anyOutgoingListeners = this._anyOutgoingListeners || [];\n        this._anyOutgoingListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @example\n     * const catchAllListener = (event, ...args) => {\n     *   console.log(`sent event ${event}`);\n     * }\n     *\n     * socket.onAnyOutgoing(catchAllListener);\n     *\n     * // remove a specific listener\n     * socket.offAnyOutgoing(catchAllListener);\n     *\n     * // or remove all listeners\n     * socket.offAnyOutgoing();\n     *\n     * @param [listener] - the catch-all listener (optional)\n     */\n    offAnyOutgoing(listener) {\n        if (!this._anyOutgoingListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyOutgoingListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyOutgoingListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     */\n    listenersAnyOutgoing() {\n        return this._anyOutgoingListeners || [];\n    }\n    /**\n     * Notify the listeners for each packet sent\n     *\n     * @param packet\n     *\n     * @private\n     */\n    notifyOutgoingListeners(packet) {\n        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {\n            const listeners = this._anyOutgoingListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, packet.data);\n            }\n        }\n    }\n}\n","/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\nexport function Backoff(opts) {\n    opts = opts || {};\n    this.ms = opts.min || 100;\n    this.max = opts.max || 10000;\n    this.factor = opts.factor || 2;\n    this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n    this.attempts = 0;\n}\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\nBackoff.prototype.duration = function () {\n    var ms = this.ms * Math.pow(this.factor, this.attempts++);\n    if (this.jitter) {\n        var rand = Math.random();\n        var deviation = Math.floor(rand * this.jitter * ms);\n        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;\n    }\n    return Math.min(ms, this.max) | 0;\n};\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\nBackoff.prototype.reset = function () {\n    this.attempts = 0;\n};\n/**\n * Set the minimum duration\n *\n * @api public\n */\nBackoff.prototype.setMin = function (min) {\n    this.ms = min;\n};\n/**\n * Set the maximum duration\n *\n * @api public\n */\nBackoff.prototype.setMax = function (max) {\n    this.max = max;\n};\n/**\n * Set the jitter\n *\n * @api public\n */\nBackoff.prototype.setJitter = function (jitter) {\n    this.jitter = jitter;\n};\n","import { Socket as Engine, installTimerFunctions, nextTick, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"socket.io-parser\";\nimport { on } from \"./on.js\";\nimport { Backoff } from \"./contrib/backo2.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        if (!v) {\n            this.skipReconnect = true;\n        }\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        const onError = (err) => {\n            this.cleanup();\n            this._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                this.maybeReconnectOnOpen();\n            }\n        };\n        // emit `error`\n        const errorSub = on(socket, \"error\", onError);\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                onError(new Error(\"timeout\"));\n                socket.close();\n            }, timeout);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), \n        // @ts-ignore\n        on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        try {\n            this.decoder.add(data);\n        }\n        catch (e) {\n            this.onclose(\"parse error\", e);\n        }\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        // the nextTick call prevents an exception in a user-provided event listener from triggering a disconnection due to a \"parse error\"\n        nextTick(() => {\n            this.emitReserved(\"packet\", packet);\n        }, this.setTimeoutFn);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        else if (this._autoConnect && !socket.active) {\n            socket.connect();\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called when:\n     *\n     * - the low-level engine is closed\n     * - the parser encountered a badly formatted packet\n     * - all sockets are disconnected\n     *\n     * @private\n     */\n    onclose(reason, description) {\n        var _a;\n        this.cleanup();\n        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason, description);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(() => {\n                this.clearTimeoutFn(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    if (parsed.query && !opts.query) {\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"socket.io-parser\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\nexport { Fetch, NodeXHR, XHR, NodeWebSocket, WebSocket, WebTransport, } from \"engine.io-client\";\n","import { parse } from \"engine.io-client\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parse(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n"],"names":["Emitter","obj","key","prototype","mixin","on","addEventListener","event","fn","this","_callbacks","push","once","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","length","cb","callbacks","i","splice","emit","args","Array","len","slice","emitReserved","listeners","hasListeners","withNativeArrayBuffer","ArrayBuffer","Object","toString","withNativeBlob","Blob","call","withNativeFile","File","isBinary","isView","buffer","hasBinary","toJSON","isArray","l","hasOwnProperty","deconstructPacket","packet","buffers","packetData","data","pack","_deconstructPacket","attachments","placeholder","_placeholder","num","newData","Date","reconstructPacket","_reconstructPacket","Error","RESERVED_EVENTS","protocol","PacketType","Encoder","constructor","replacer","encode","type","EVENT","ACK","encodeAsString","encodeAsBinary","BINARY_EVENT","BINARY_ACK","nsp","id","str","JSON","stringify","deconstruction","unshift","isObject","value","Decoder","reviver","super","add","reconstructor","decodeString","isBinaryEvent","BinaryReconstructor","base64","takeBinaryData","p","Number","charAt","undefined","start","buf","substring","next","c","payload","tryParse","substr","isPayloadValid","parse","e","CONNECT","DISCONNECT","CONNECT_ERROR","indexOf","destroy","finishedReconstruction","reconPack","binData","ev","freeze","connect","connect_error","disconnect","disconnecting","newListener","Socket","io","opts","connected","recovered","receiveBuffer","sendBuffer","_queue","_queueSeq","ids","acks","flags","auth","_opts","assign","_autoConnect","open","disconnected","subEvents","subs","onopen","bind","onpacket","onerror","onclose","active","_readyState","send","_a","_b","_c","retries","fromQueue","volatile","_addToQueue","options","compress","ack","pop","_registerAckCallback","isTransportWritable","engine","transport","writable","isConnected","_hasPingExpired","notifyOutgoingListeners","timeout","ackTimeout","timer","setTimeoutFn","clearTimeoutFn","withError","emitWithAck","Promise","resolve","reject","arg1","arg2","tryCount","pending","err","responseArgs","shift","_drainQueue","force","_packet","_sendConnectPacket","_pid","pid","offset","_lastOffset","reason","description","_clearAcks","keys","forEach","some","String","sid","onconnect","onevent","onack","ondisconnect","message","emitEvent","_anyListeners","listener","self","sent","emitBuffered","subDestroy","close","onAny","prependAny","offAny","listenersAny","onAnyOutgoing","_anyOutgoingListeners","prependAnyOutgoing","offAnyOutgoing","listenersAnyOutgoing","Backoff","ms","min","max","factor","jitter","attempts","duration","Math","pow","rand","random","deviation","floor","reset","setMin","setMax","setJitter","Manager","uri","nsps","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","_parser","parser","encoder","decoder","autoConnect","v","_reconnection","skipReconnect","_reconnectionAttempts","_reconnectionDelay","_randomizationFactor","_reconnectionDelayMax","_timeout","maybeReconnectOnOpen","_reconnecting","reconnect","socket","openSubDestroy","onError","cleanup","errorSub","autoUnref","unref","onping","ondata","ondecoded","_destroy","_close","encodedPackets","write","delay","onreconnect","attempt","cache","lookup","parsed","loc","location","host","test","port","href","url","source","sameNamespace","forceNew","multiplex","query","queryKey"],"sourceRoot":""}