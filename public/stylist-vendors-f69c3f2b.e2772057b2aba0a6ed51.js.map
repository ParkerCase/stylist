{"version":3,"file":"stylist-vendors-f69c3f2b.e2772057b2aba0a6ed51.js","mappings":"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","sources":["webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/engine/training_utils.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/engine/training_tensors.js","webpack://StylistWidget/./node_modules/@tensorflow/tfjs-layers/dist/engine/training_dataset.js"],"sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\nimport { argMax, clone, dispose, mul, reshape, tensor1d, tidy } from '@tensorflow/tfjs-core';\nfunction standardizeSampleOrClassWeights(xWeight, outputNames, weightType) {\n    const numOutputs = outputNames.length;\n    if (xWeight == null || (Array.isArray(xWeight) && xWeight.length === 0)) {\n        return outputNames.map(name => null);\n    }\n    if (numOutputs === 1) {\n        if (Array.isArray(xWeight) && xWeight.length === 1) {\n            return xWeight;\n        }\n        else if (typeof xWeight === 'object' && outputNames[0] in xWeight) {\n            return [xWeight[outputNames[0]]];\n        }\n        else {\n            return [xWeight];\n        }\n    }\n    if (Array.isArray(xWeight)) {\n        if (xWeight.length !== numOutputs) {\n            throw new Error(`Provided ${weightType} is an array of ${xWeight.length} ` +\n                `element(s), but the model has ${numOutputs} outputs. ` +\n                `Make sure a set of weights is provided for each model output.`);\n        }\n        return xWeight;\n    }\n    else if (typeof xWeight === 'object' && Object.keys(xWeight).length > 0 &&\n        typeof xWeight[Object.keys(xWeight)[0]] ===\n            'object') {\n        const output = [];\n        outputNames.forEach(outputName => {\n            if (outputName in xWeight) {\n                output.push(xWeight[outputName]);\n            }\n            else {\n                output.push(null);\n            }\n        });\n        return output;\n    }\n    else {\n        throw new Error(`The model has multiple (${numOutputs}) outputs, ` +\n            `so ${weightType} must be either an array with ` +\n            `${numOutputs} elements or an object with ${outputNames} keys. ` +\n            `Provided ${weightType} not understood: ${JSON.stringify(xWeight)}`);\n    }\n}\n/**\n * Standardize class weighting objects.\n *\n * This function takes a single class-weighting object, an array of them,\n * or a map from output name to class-weighting object. It compares it to the\n * output name(s) of the model, base on which it outputs an array of\n * class-weighting objects of which the length matches the number of outputs.\n *\n * @param classWeight Input class-weighting object(s).\n * @param outputNames All output name(s) of the model.\n * @return An array of class-weighting objects. The length of the array matches\n *   the model's number of outputs.\n */\nexport function standardizeClassWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'classWeight');\n}\nexport function standardizeSampleWeights(classWeight, outputNames) {\n    return standardizeSampleOrClassWeights(classWeight, outputNames, 'sampleWeight');\n}\n/**\n * Standardize by-sample and/or by-class weights for training.\n *\n * Note that this function operates on one model output at a time. For a model\n * with multiple outputs, you must call this function multiple times.\n *\n * @param y The target tensor that the by-sample and/or by-class weight is for.\n *     The values of y are assumed to encode the classes, either directly\n *     as an integer index, or as one-hot encoding.\n * @param sampleWeight By-sample weights.\n * @param classWeight By-class weights: an object mapping class indices\n *     (integers) to a weight (float) to apply to the model's loss for the\n *     samples from this class during training. This can be useful to tell the\n *     model to \"pay more attention\" to samples from an under-represented class.\n * @param sampleWeightMode The mode for the sample weights.\n * @return A Promise of weight tensor, of which the size of the first dimension\n *     matches that of `y`.\n */\nexport async function standardizeWeights(y, sampleWeight, classWeight, sampleWeightMode) {\n    if (sampleWeight != null || sampleWeightMode != null) {\n        // TODO(cais): Once 'temporal' mode is implemented, document it in the doc\n        // string.\n        throw new Error('Support sampleWeight is not implemented yet');\n    }\n    if (classWeight != null) {\n        // Apply class weights per sample.\n        const yClasses = tidy(() => {\n            if (y.shape.length === 1) {\n                // Assume class indices.\n                return clone(y);\n            }\n            else if (y.shape.length === 2) {\n                if (y.shape[1] > 1) {\n                    // Assume one-hot encoding of classes.\n                    const axis = 1;\n                    return argMax(y, axis);\n                }\n                else if (y.shape[1] === 1) {\n                    // Class index.\n                    return reshape(y, [y.shape[0]]);\n                }\n                else {\n                    throw new Error(`Encountered unexpected last-dimension size (${y.shape[1]}) ` +\n                        `during handling of class weights. The size is expected to be ` +\n                        `>= 1.`);\n                }\n            }\n            else {\n                throw new Error(`Unexpected rank of target (y) tensor (${y.rank}) during ` +\n                    `handling of class weights. The rank is expected to be 1 or 2.`);\n            }\n        });\n        const yClassIndices = Array.from(await yClasses.data());\n        dispose(yClasses);\n        const classSampleWeight = [];\n        yClassIndices.forEach(classIndex => {\n            if (classWeight[classIndex] == null) {\n                throw new Error(`classWeight must contain all classes in the training data. ` +\n                    `The class ${classIndex} exists in the data but not in ` +\n                    `classWeight`);\n            }\n            else {\n                classSampleWeight.push(classWeight[classIndex]);\n            }\n        });\n        return tensor1d(classSampleWeight, 'float32');\n    }\n    else {\n        return null;\n    }\n}\n/**\n * Apply per-sample weights on the loss values from a number of samples.\n *\n * @param losses Loss tensor of shape `[batchSize]`.\n * @param sampleWeights Per-sample weight tensor of shape `[batchSize]`.\n * @returns Tensor of the same shape as`losses`.\n */\nexport function computeWeightedLoss(losses, sampleWeights) {\n    return mul(losses, sampleWeights);\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using tf.Tensor objects.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { Tensor } from '@tensorflow/tfjs-core';\nimport { expandDims, gather, sliceAlongFirstAxis } from '../backend/tfjs_backend';\nexport function checkBatchSize(batchSize) {\n    tfc.util.assert(batchSize > 0 && Number.isInteger(batchSize), () => `batchSize is required to be a positive integer, but got ${batchSize}`);\n}\n/**\n * Slice a Tensor or an Array of Tensors, by start and stop indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArraysByIndices()` together.\n *\n * @param arrays: the input.\n * @param start: the starting index (inclusive).\n * @param stop: the stopping index (exclusive).\n * @returns The result of the slicing. If `arrays` is an `Array` of\n *   `tf.Tensor`s, the slicing will be applied to all elements of the `Array`\n *   in the same way.\n */\nexport function sliceArrays(arrays, start, stop) {\n    if (arrays == null) {\n        return [null];\n    }\n    else if (Array.isArray(arrays)) {\n        return arrays.map(array => sliceAlongFirstAxis(array, start, stop - start));\n    }\n    else { // Tensor.\n        return sliceAlongFirstAxis(arrays, start, stop - start);\n    }\n}\n/**\n * Slice a Tensor or an Array of Tensors, by random-order indices.\n *\n * Porting Note: The `_slice_arrays` function in PyKeras is covered by this\n *   function and `sliceArrays()` together.\n *\n * @param arrays The input `tf.Tensor` or `Array` of `tf.Tensor`s to slice.\n *   If an `Array` of `tf.Tensor`s, all `tf.Tensor`s will be sliced in the\n *   same fashion.\n * @param indices The indices to use for slicing along the first (batch)\n *   dimension.\n * @returns Result(s) of the slicing.\n */\nexport function sliceArraysByIndices(arrays, indices) {\n    return tfc.tidy(() => {\n        if (arrays == null) {\n            return null;\n        }\n        else if (Array.isArray(arrays)) {\n            return arrays.map(array => sliceArraysByIndices(array, indices));\n        }\n        else {\n            // TODO(cais): indices should be a pre-constructed Tensor1D to avoid\n            //   tensor1d() calls.\n            return gather(arrays, indices.dtype === 'int32' ? indices : tfc.cast(indices, 'int32'));\n        }\n    });\n}\n/**\n * Returns a list of batch indices (tuples of indices).\n * @param size: Integer, total size of the data to slice into batches.\n * @param batchSize: Integer, batch size.\n * @returns An Array of [batchStart, batchEnd] tuples. batchStart is\n *   inclusive; batchEnd is exclusive. I.e., each batch consists of indices x\n *   that satisfy batchStart <= x < batchEnd.\n */\nexport function makeBatches(size, batchSize) {\n    const output = [];\n    let batchStart = 0;\n    let batchEnd = null;\n    while (batchStart < size) {\n        batchEnd = batchStart + batchSize;\n        if (batchEnd >= size) {\n            batchEnd = size;\n        }\n        output.push([batchStart, batchEnd]);\n        batchStart = batchEnd;\n    }\n    return output;\n}\n/**\n * Ensure tensors all have a rank of at least 2.\n *\n * If a tensor has a rank of 1, it is dimension-expanded to rank 2.\n * If any tensor has a rank of 0 (i.e., is a scalar), an error will be thrown.\n */\nexport function ensureTensorsRank2OrHigher(tensors) {\n    const outs = [];\n    if (tensors instanceof Tensor) {\n        tensors = [tensors];\n    }\n    // Make Tensors at least 2D.\n    for (let i = 0; i < tensors.length; ++i) {\n        const tensor = tensors[i];\n        if (tensor.rank === 1) {\n            outs.push(expandDims(tensor, 1));\n        }\n        else if (tensor.rank === 0) {\n            throw new Error('Expected tensor to be at least 1D, but received a 0D tensor ' +\n                '(scalar).');\n        }\n        else {\n            outs.push(tensor);\n        }\n    }\n    return outs;\n}\n/**\n * Compare a set of tensors with a reference (old) set, discard the ones\n * in the new set that are not present in the reference set.\n *\n * This method is used for memory clenaup during calls such as\n * LayersModel.fit().\n *\n * @param tensors New set which may contain Tensors not present in\n *   `refTensors`.\n * @param refTensors Reference Tensor set.\n */\n// TODO(cais, kangyizhang): Deduplicate with tfjs-data.\nexport function disposeNewTensors(tensors, refTensors) {\n    if (tensors == null) {\n        return;\n    }\n    const oldTensorIds = [];\n    if (refTensors instanceof Tensor) {\n        oldTensorIds.push(refTensors.id);\n    }\n    else if (Array.isArray(refTensors)) {\n        refTensors.forEach(t => oldTensorIds.push(t.id));\n    }\n    else if (refTensors != null) {\n        // `oldTensors` is a map from string name to Tensor.\n        for (const name in refTensors) {\n            const oldTensor = refTensors[name];\n            oldTensorIds.push(oldTensor.id);\n        }\n    }\n    const tensorsToDispose = [];\n    if (tensors instanceof Tensor) {\n        if (oldTensorIds.indexOf(tensors.id) === -1) {\n            tensorsToDispose.push(tensors);\n        }\n    }\n    else if (Array.isArray(tensors)) {\n        tensors.forEach(t => {\n            if (oldTensorIds.indexOf(t.id) === -1) {\n                tensorsToDispose.push(t);\n            }\n        });\n    }\n    else if (tensors != null) {\n        // `oldTensors` is a map from string name to Tensor.\n        for (const name in tensors) {\n            const tensor = tensors[name];\n            if (oldTensorIds.indexOf(tensor.id) === -1) {\n                tensorsToDispose.push(tensor);\n            }\n        }\n    }\n    tensorsToDispose.forEach(t => {\n        if (!t.isDisposed) {\n            t.dispose();\n        }\n    });\n}\n//# sourceMappingURL=data:application/json;base64,","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Use of this source code is governed by an MIT-style\n * license that can be found in the LICENSE file or at\n * https://opensource.org/licenses/MIT.\n * =============================================================================\n */\n/**\n * Interfaces and methods for training models using TensorFlow.js datasets.\n */\nimport * as tfc from '@tensorflow/tfjs-core';\nimport { scalar } from '@tensorflow/tfjs-core';\nimport { configureCallbacks, standardizeCallbacks } from '../base_callbacks';\nimport { NotImplementedError, ValueError } from '../errors';\nimport { disposeTensorsInLogs } from '../logs';\nimport { singletonOrArray, toList } from '../utils/generic_utils';\nimport { standardizeClassWeights, standardizeWeights } from './training_utils';\n// Default batch size used during tensor-based validation.\nconst DEFAULT_VALIDATION_BATCH_SIZE = 32;\n/**\n * Standardize the output of a dataset iterator for use by\n * LayersModel.fitDataset().\n *\n * @param model: A `tf.LayersModel` object.\n * @param iteratorOut The output of a dataset iterator. It is required to be\n *   an object of the form `{xs: TensorOrArrayOrMap, ys:\n * TensorOrArrayOrMap}`, where `TensorOrArrayOrMap` is a single `tf.Tensor`,\n * a `tf.Tensor[]`, or a flat map from string names to `tf.Tensor`s.\n * @returns A flat array of `tf.Tensor` objects: the input `tf.Tensor`s\n *   followed by the target `tf.Tensor`s.  When `tf.Tensor`s are provided\n *   as a map, the order in the resulting array is taken from the `inputNames`\n *   and `outputNames` of the model.\n */\nfunction standardizeDataIteratorOutput(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, iteratorOut) {\n    let xs;\n    let ys;\n    const iteratorOutObj = iteratorOut;\n    xs = iteratorOutObj['xs'];\n    ys = iteratorOutObj['ys'];\n    tfc.util.assert(xs != null && ys != null, () => 'A Dataset iterator for fitDataset() is expected to generate ' +\n        'objects of the form `{xs: xVal, ys: yVal}`, where the two ' +\n        'values may be `tf.Tensor`, an array of Tensors, or a map of ' +\n        'string to Tensor.  The provided Dataset instead generates ' +\n        `${iteratorOut}`);\n    const flattenedXs = flattenTensorOrArrayOrMap('input', model.inputNames, xs);\n    const flattenedYs = flattenTensorOrArrayOrMap('output', model.outputNames, ys);\n    const batchSize = flattenedXs[0].shape[0];\n    tfc.util.assert(flattenedXs.length === model.inputs.length, () => `LayersModel has ${model.inputs.length} inputs, but the dataset ` +\n        `provides ${flattenedXs.length} inputs.  (Expected input keys: ` +\n        `${JSON.stringify(model.inputNames)})`);\n    tfc.util.assert(flattenedYs.length === model.outputs.length, () => `LayersModel has ${model.outputs.length} outputs, but the dataset ` +\n        `provides ${flattenedYs.length} outputs.  (Expected output keys: ` +\n        `${JSON.stringify(model.outputNames)})`);\n    for (let xIndex = 0; xIndex < flattenedXs.length; xIndex++) {\n        tfc.util.assert(flattenedXs[xIndex].shape[0] === batchSize, () => `Batch size mismatch: input ` +\n            `${model.inputNames[xIndex]} has ${flattenedXs[xIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n    }\n    for (let yIndex = 0; yIndex < flattenedYs.length; yIndex++) {\n        tfc.util.assert(flattenedYs[yIndex].shape[0] === batchSize, () => `Batch size mismatch: output ` +\n            `${model.outputNames[yIndex]} has ${flattenedYs[yIndex].shape[0]}; ` +\n            `expected  ${batchSize} based on input ${model.inputNames[0]}.`);\n    }\n    return { xs: flattenedXs, ys: flattenedYs };\n}\nfunction flattenTensorOrArrayOrMap(inputOrOutput, names, values) {\n    if (values instanceof tfc.Tensor) {\n        return [values];\n    }\n    else if (Array.isArray(values)) {\n        tfc.util.assert(values.length === names.length, () => `Received an array of ${values.length} Tensors, but expected ${names.length} to match the ${inputOrOutput} keys ${names}.`);\n        return values;\n    }\n    else {\n        const result = [];\n        // Check that all the required keys are available.\n        for (const name of names) {\n            if (values[name] == null) {\n                throw new ValueError(`The feature data generated by the dataset lacks the required ` +\n                    `${inputOrOutput} key '${name}'.`);\n            }\n            result.push(values[name]);\n        }\n        return result;\n    }\n}\nfunction standardizeTensorValidationData(data) {\n    if (data.length === 3) {\n        throw new NotImplementedError('Validation with sample weights is not implemented yet.');\n    }\n    return { xs: data[0], ys: data[1] };\n}\nexport async function fitDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n    const hasBatchesPerEpoch = args.batchesPerEpoch != null;\n    tfc.util.assert(model.optimizer != null, () => 'You must compile a model before training/testing. Use ' +\n        'LayersModel.compile(modelCompileConfig).');\n    tfc.util.assert(args != null, () => `For fitDataset(), the 2nd argument (config) is required, ` +\n        `but it is not provided in this call.`);\n    tfc.util.assert(args.epochs != null && args.epochs > 0 && Number.isInteger(args.epochs), () => `For fitDataset(), config.epochs is expected to be a positive ` +\n        `integer, but got ${args.epochs}`);\n    tfc.util.assert(!hasBatchesPerEpoch ||\n        (args.batchesPerEpoch > 0 && Number.isInteger(args.batchesPerEpoch)), () => `For fitDataset(), config.batchesPerEpoch is expected to be a ` +\n        `positive integer if specified, but got ${args.batchesPerEpoch}`);\n    tfc.util.assert(\n    // tslint:disable-next-line:no-any\n    args['validationSplit'] == null, () => '`validationSplit` is not supported by `fitDataset()`. ' +\n        'Use validationData instead.');\n    if (model.isTraining) {\n        throw new Error('Cannot start training because another fit() call is ongoing.');\n    }\n    model.isTraining = true;\n    try {\n        const doValidation = args.validationData != null;\n        let valXs;\n        let valYs;\n        if (doValidation) {\n            if (isDatasetObject(args.validationData)) {\n                tfc.util.assert(args.validationBatches == null ||\n                    (args.validationBatches > 0 &&\n                        Number.isInteger(args.validationBatches)), () => `For fitDataset() with dataset-based validation, ` +\n                    `config.validationBatches is expected not to be provided, ` +\n                    `or to be a positive integer, ` +\n                    `but got ${args.validationBatches}`);\n            }\n            else {\n                const validationData = standardizeTensorValidationData(args.validationData);\n                valXs = validationData.xs;\n                valYs = validationData.ys;\n            }\n        }\n        const trainFunction = model.makeTrainFunction();\n        const outLabels = model.getDedupedMetricsNames();\n        let callbackMetrics;\n        if (doValidation) {\n            callbackMetrics =\n                outLabels.slice().concat(outLabels.map(n => 'val_' + n));\n        }\n        else {\n            callbackMetrics = outLabels.slice();\n        }\n        const callbacks = standardizeCallbacks(args.callbacks, args.yieldEvery);\n        const verbose = args.verbose == null ? 1 : args.verbose;\n        const { callbackList, history } = configureCallbacks(callbacks, verbose, args.epochs, null, null, getStepsPerEpoch(dataset, args), null, // Batch size determined by the dataset itself.\n        doValidation, callbackMetrics);\n        callbackList.setModel(model);\n        model.history = history;\n        await callbackList.onTrainBegin();\n        model.stopTraining_ = false;\n        let epoch = args.initialEpoch == null ? 0 : args.initialEpoch;\n        let dataIterator = await dataset.iterator();\n        while (epoch < args.epochs) {\n            const epochLogs = {};\n            await callbackList.onEpochBegin(epoch);\n            let stepsDone = 0;\n            let batchIndex = 0;\n            if (!hasBatchesPerEpoch) {\n                dataIterator = await dataset.iterator();\n            }\n            while (hasBatchesPerEpoch ? stepsDone < args.batchesPerEpoch : true) {\n                const iteratorOut = await dataIterator.next();\n                // If `batchesPerEpoch` is specified, the dataset should not be\n                // exhausted until all epoches are done.\n                if (hasBatchesPerEpoch && iteratorOut.done) {\n                    console.warn('You provided `batchesPerEpoch` as ' +\n                        `${args.batchesPerEpoch}, ` +\n                        'but your dataset iterator ran out of data after ' +\n                        `${stepsDone} batches; ` +\n                        'interrupting training. Make sure that your ' +\n                        'dataset can generate at least `batchesPerEpoch * epochs` ' +\n                        'batches (in this case, ' +\n                        `${args.batchesPerEpoch * args.epochs} batches). ` +\n                        'You may need to use the repeat() function when building ' +\n                        'your dataset.');\n                    break;\n                }\n                if (iteratorOut.value != null) {\n                    const { xs, ys } = standardizeDataIteratorOutput(model, iteratorOut.value);\n                    const batchLogs = {};\n                    batchLogs['batch'] = batchIndex;\n                    batchLogs['size'] = xs[0].shape[0];\n                    await callbackList.onBatchBegin(batchIndex, batchLogs);\n                    const sampleWeights = [];\n                    if (args.classWeight != null) {\n                        const standardClassWeights = standardizeClassWeights(args.classWeight, model.outputNames);\n                        for (let i = 0; i < standardClassWeights.length; ++i) {\n                            sampleWeights.push(await standardizeWeights(ys[i], null, standardClassWeights[i]));\n                        }\n                    }\n                    // Train on batch.\n                    const ins = xs.concat(ys).concat(sampleWeights);\n                    const outs = trainFunction(ins);\n                    tfc.dispose(ins);\n                    for (let i = 0; i < outLabels.length; ++i) {\n                        const label = outLabels[i];\n                        const out = outs[i];\n                        batchLogs[label] = out;\n                        tfc.keep(out);\n                    }\n                    await callbackList.onBatchEnd(batchIndex, batchLogs);\n                    disposeTensorsInLogs(batchLogs);\n                    batchIndex++;\n                    stepsDone++;\n                }\n                if (hasBatchesPerEpoch ? stepsDone >= args.batchesPerEpoch :\n                    iteratorOut.done) {\n                    // Epoch finished. Perform validation.\n                    if (doValidation) {\n                        let valOuts;\n                        if (isDatasetObject(args.validationData)) {\n                            valOuts = toList(await model.evaluateDataset(args.validationData, { batches: args.validationBatches }));\n                        }\n                        else {\n                            valOuts = toList(model.evaluate(valXs, valYs, {\n                                batchSize: args.validationBatchSize == null ?\n                                    DEFAULT_VALIDATION_BATCH_SIZE :\n                                    args.validationBatchSize,\n                                verbose: 0\n                            }));\n                        }\n                        for (let i = 0; i < model.metricsNames.length; ++i) {\n                            epochLogs[`val_${model.metricsNames[i]}`] = valOuts[i];\n                        }\n                    }\n                    // Call `break` to exit one epoch lopp after validation is done. If\n                    // config.batchesPerEpoch is specified, an epoch while loop will\n                    // stop when `stepsDone >= config.batchesPerEpoch`. When\n                    // config.batchesPerEpoch is not provided, the following `break` is\n                    // required to exit the while lopp after dataset is exhausted.\n                    break;\n                }\n                if (model.stopTraining_) {\n                    break;\n                }\n            }\n            await callbackList.onEpochEnd(epoch, epochLogs);\n            epoch++;\n            if (model.stopTraining_) {\n                break;\n            }\n        }\n        await callbackList.onTrainEnd();\n        await model.history.syncData();\n        return model.history;\n    }\n    finally {\n        model.isTraining = false;\n    }\n}\n/** Helper function that determines number of steps (batches) per epoch. */\nfunction getStepsPerEpoch(dataset, args) {\n    // Attempt to determine # of batches in an epoch.\n    let stepsPerEpoch = null;\n    if (args.batchesPerEpoch != null) {\n        stepsPerEpoch = args.batchesPerEpoch;\n    }\n    else if (Number.isFinite(dataset.size)) {\n        stepsPerEpoch = dataset.size;\n    }\n    return stepsPerEpoch;\n}\n// Check if provided object is a Dataset object by checking its .iterator\n// element.\nfunction isDatasetObject(dataset) {\n    return (typeof dataset.iterator === 'function');\n}\n// Check if provided object is a LazyIterator object by checking it's .next\n// element.\nfunction isLazyIteratorObject(iterator) {\n    return (typeof iterator.next === 'function');\n}\nexport async function evaluateDataset(\n// Type `model` as `any` here to avoid circular dependency w/\n// training.ts.\n// tslint:disable-next-line:no-any\nmodel, dataset, args) {\n    args = args || {};\n    const hasBatches = args.batches != null;\n    const f = model.testFunction;\n    let outs = [];\n    if (args.verbose > 0) {\n        throw new NotImplementedError('Verbose mode is not implemented yet.');\n    }\n    tfc.util.assert(!hasBatches || (args.batches > 0 && Number.isInteger(args.batches)), () => 'Test loop expects `batches` to be a positive integer, but ' +\n        `received ${JSON.stringify(args.batches)}`);\n    const dataIterator = isLazyIteratorObject(dataset) ?\n        dataset :\n        await dataset.iterator();\n    // Keeps track of number of examples used in this evaluation.\n    let numExamples = 0;\n    let batch = 0;\n    while (hasBatches ? batch < args.batches : true) {\n        const iteratorOut = await dataIterator.next();\n        outs = tfc.tidy(() => {\n            if (iteratorOut.value) {\n                // TODO(cais): Once real dataset is available, use\n                //   `map(x => standardizeDataIteratorOutput(model, x).map(f)`.\n                const { xs, ys } = standardizeDataIteratorOutput(model, iteratorOut.value);\n                const xsAndYs = xs.concat(ys);\n                const batchOuts = tfc.tidy(() => f(xsAndYs));\n                tfc.dispose(xsAndYs);\n                if (batch === 0) {\n                    for (let i = 0; i < batchOuts.length; ++i) {\n                        outs.push(scalar(0));\n                    }\n                }\n                const batchSize = xsAndYs[0].shape[0];\n                for (let i = 0; i < batchOuts.length; ++i) {\n                    const batchOut = batchOuts[i];\n                    const oldScalar = outs[i];\n                    outs[i] =\n                        tfc.tidy(() => tfc.add(outs[i], tfc.mul(batchSize, batchOut)));\n                    if (batch > 0) {\n                        tfc.dispose(oldScalar);\n                    }\n                }\n                tfc.dispose(batchOuts);\n                numExamples += batchSize;\n                ++batch;\n            }\n            return outs;\n        });\n        if (iteratorOut.done) {\n            if (hasBatches) {\n                console.warn('Your dataset iterator ran out of data during evaluateDataset(). ' +\n                    'Interrupting evalution. Make sure that your ' +\n                    'dataset can generate at least `batches` ' +\n                    `batches (in this case, ${args.batches} batches). ` +\n                    'You may need to use the repeat() function when building ' +\n                    'your dataset.');\n            }\n            break;\n        }\n    }\n    for (let i = 0; i < outs.length; ++i) {\n        const oldScalar = outs[i];\n        outs[i] = tfc.div(outs[i], numExamples);\n        tfc.dispose(oldScalar);\n    }\n    return singletonOrArray(outs);\n}\n//# sourceMappingURL=data:application/json;base64,"],"names":["standardizeSampleOrClassWeights","xWeight","outputNames","weightType","numOutputs","length","Array","isArray","map","name","Error","Object","keys","output","forEach","outputName","push","JSON","stringify","standardizeClassWeights","classWeight","async","standardizeWeights","y","sampleWeight","sampleWeightMode","yClasses","tidy","shape","clone","axis","argMax","reshape","rank","yClassIndices","from","data","dispose","classSampleWeight","classIndex","tensor1d","computeWeightedLoss","losses","sampleWeights","mul","checkBatchSize","batchSize","Number","isInteger","sliceArrays","arrays","start","stop","array","sliceArraysByIndices","indices","dtype","makeBatches","size","batchStart","batchEnd","ensureTensorsRank2OrHigher","tensors","outs","Tensor","i","tensor","disposeNewTensors","refTensors","oldTensorIds","id","t","oldTensor","tensorsToDispose","indexOf","isDisposed","DEFAULT_VALIDATION_BATCH_SIZE","standardizeDataIteratorOutput","model","iteratorOut","xs","ys","iteratorOutObj","flattenedXs","flattenTensorOrArrayOrMap","inputNames","flattenedYs","inputs","outputs","xIndex","yIndex","inputOrOutput","names","values","result","fitDataset","dataset","args","hasBatchesPerEpoch","batchesPerEpoch","optimizer","epochs","isTraining","doValidation","validationData","valXs","valYs","isDatasetObject","validationBatches","standardizeTensorValidationData","trainFunction","makeTrainFunction","outLabels","getDedupedMetricsNames","callbackMetrics","slice","concat","n","callbacks","yieldEvery","verbose","callbackList","history","stepsPerEpoch","isFinite","getStepsPerEpoch","setModel","onTrainBegin","stopTraining_","epoch","initialEpoch","dataIterator","iterator","epochLogs","onEpochBegin","stepsDone","batchIndex","next","done","value","batchLogs","onBatchBegin","standardClassWeights","ins","label","out","onBatchEnd","valOuts","evaluateDataset","batches","evaluate","validationBatchSize","metricsNames","onEpochEnd","onTrainEnd","syncData","hasBatches","f","testFunction","numExamples","batch","xsAndYs","batchOuts","scalar","batchOut","oldScalar"],"sourceRoot":""}